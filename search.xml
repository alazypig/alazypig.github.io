<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>03-31-2022記</title>
    <url>/2022/03/31/03-31-2022%E8%A8%98/</url>
    <content><![CDATA[<h1 id="今日炒股記錄"><a href="#今日炒股記錄" class="headerlink" title="今日炒股記錄"></a>今日炒股記錄</h1><p>又一次做 T 失敗了。總覺得不會漲到那麼搞，結果又追高了。<br>一直盯盤十分影響心態，不能這樣繼續下去。</p>
<p>之後每天只看尾盤（14:30），其他時間不打開炒股軟件。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>04-21-2022记</title>
    <url>/2022/04/21/04-21-2022%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="炒股记录"><a href="#炒股记录" class="headerlink" title="炒股记录"></a>炒股记录</h1><p>还是得看大盘炒股。<br>前几日没卖，导致-17%再现</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>10/31/2021 记</title>
    <url>/2021/10/31/10-31-2021-%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="晚上睡不着。看了一眼-HuoBi"><a href="#晚上睡不着。看了一眼-HuoBi" class="headerlink" title="晚上睡不着。看了一眼 HuoBi"></a>晚上睡不着。看了一眼 HuoBi</h3><p>发现自己的合约被强制平仓了。陆续开始清退大陆用户。</p>
<p>也就几百块，取出来也没多大作用。</p>
<p>看了看最近的风口 <code>Meta verse</code>，买了点币。顺便跟着<code>孙割</code>买了点币。</p>
<ul>
<li>15 个 <code>MANA</code>: <a href="https://decentraland.org/">基于 VR 的游戏平台</a></li>
<li>9600 个 <code>BTT</code>: <a href="https://bittorrent.com/btt/">Bit torrent</a></li>
</ul>
<p>之后 HuoBi 清退，还需要把币提出来。麻烦</p>
<h3 id="周一看看能不能把股市内的基金投入到-恒生30ETF"><a href="#周一看看能不能把股市内的基金投入到-恒生30ETF" class="headerlink" title="周一看看能不能把股市内的基金投入到 恒生30ETF"></a>周一看看能不能把股市内的基金投入到 <code>恒生30ETF</code></h3><p><code>恒生ETF</code>中很大一部分是 <code>Meta Verse</code> 概念。<br>股市还是太难玩了。玩不明白。</p>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/10 總結</title>
    <url>/2020/11/07/2020-10-%E7%B8%BD%E7%B5%90/</url>
    <content><![CDATA[<h3 id="最近的任務量比較多"><a href="#最近的任務量比較多" class="headerlink" title="最近的任務量比較多"></a>最近的任務量比較多</h3><p>10 月份除開 1-8 只休息了四天, 需求很趕, 代碼質量參差不齊.</p>
<h3 id="上個月的任務"><a href="#上個月的任務" class="headerlink" title="上個月的任務"></a>上個月的任務</h3><ul>
<li>React Hook: 這個月打算將之前的代碼邏輯抽離城自定義 hooks</li>
<li>shell: 需求太密已擱置</li>
<li>Linux: 需求太密已擱置</li>
<li>優化 code: 大部分都已經優化掉了, 少數 code 還存在很大問題.</li>
</ul>
<h3 id="這個月的目標"><a href="#這個月的目標" class="headerlink" title="這個月的目標:"></a>這個月的目標:</h3><ul>
<li>補全測試</li>
<li>優化代碼結構, 文件結構</li>
<li>挖掘 Jest 深入用法</li>
<li>重新熟悉 Typescript</li>
<li>shell</li>
</ul>
<h3 id="最近的事"><a href="#最近的事" class="headerlink" title="最近的事"></a>最近的事</h3><ul>
<li>BTC 價格接近 16000</li>
<li>美國大選</li>
<li>追完<em>說唱新世代</em>, 一場三個小時是有夠久的</li>
<li>人生中第一次得蕁麻疹, 查不出病因</li>
</ul>
<!-- test for ci -->
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>07-26-2022记</title>
    <url>/2022/07/26/07-26-2022%E8%AE%B0/</url>
    <content><![CDATA[<p>许久未登，上来看看。<br>发现<code>checkbox</code>不渲染了，于是找了个插件处理了 <a href="https://github.com/hexojs/hexo-renderer-marked">hexo-renderer-marked</a></p>
<ul>
<li>近来股票依旧捉摸不透</li>
<li>事业毫无长进</li>
<li>还在摸索之后的道路</li>
</ul>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2020/11 總結</title>
    <url>/2020/12/07/2020-11-%E7%B8%BD%E7%B5%90/</url>
    <content><![CDATA[<h3 id="最近在做的事"><a href="#最近在做的事" class="headerlink" title="最近在做的事"></a>最近在做的事</h3><ul>
<li>去中心化 APP</li>
<li>閱讀”我的簡史”</li>
</ul>
<h3 id="上月任務"><a href="#上月任務" class="headerlink" title="上月任務"></a>上月任務</h3><ul>
<li>Testing: 需求過多,完成一半</li>
<li>結構優化: Done.</li>
<li>TS: 擱置</li>
<li>shell: 擱置</li>
</ul>
<h3 id="這個月的目標"><a href="#這個月的目標" class="headerlink" title="這個月的目標"></a>這個月的目標</h3><ul>
<li>線性代數</li>
<li>Webpack</li>
<li>去中心化 APP</li>
</ul>
<h3 id="最近的事"><a href="#最近的事" class="headerlink" title="最近的事"></a>最近的事</h3><ul>
<li>BTC 接近 20000</li>
<li>去道院參觀</li>
<li>補習數學</li>
</ul>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2021-05-09</title>
    <url>/2021/05/09/2021-05-09/</url>
    <content><![CDATA[<h3 id="天下无不散的宴席"><a href="#天下无不散的宴席" class="headerlink" title="天下无不散的宴席"></a>天下无不散的宴席</h3><p>实习生只剩下一个了，其他都离职了。对他们来说是件好事，呆在这里也不能提高多少。</p>
<p>最近发生的事情太多了：</p>
<ul>
<li>养了一只猫：某天突然就想养只猫了，下午决定晚上就去领了一只。回家后花了不少精力，现在活得还算不错。</li>
<li>新买了个镜头：入了个 35mm f2.0 镜头，扫街+人像应该够了。</li>
<li>不知不觉喜欢上了一个女生：深入了解后发现希望不大，还是放弃了。</li>
<li>去了家公司参观：这家公司有 Node 中间层，是以前未接触过的。今后还需努力。</li>
<li>刷了一点 leetcode：在公司需求不多，就刷着为以后做准备了。</li>
<li>买了一点书：身体和心灵总有一个在路上。</li>
<li>去桂山岛旅游：看了看人烟稀少的小镇是什么样的生活。</li>
</ul>
<h3 id="币圈疯狂的人们"><a href="#币圈疯狂的人们" class="headerlink" title="币圈疯狂的人们"></a>币圈疯狂的人们</h3><p>数字货币的世界，涨跌不需要理由。<br>公司一群人炒币，只有一个人脱身，其余的加起来估计亏了百来万。<br>地铁上，公交上，餐厅奶茶店；俊男靓女，大爷大妈，所有人都在炒币，太疯狂了。</p>
<p>人的欲望总是无穷的，赌徒只需要输一次就能将所有的钱输完，人性的弱点。<br>大家都希望山底买，山顶卖。但是谁又知道你是不是买在山顶呢。大家都信仰最大傻瓜理论，觉得自己不是那个大傻瓜。</p>
<h3 id="安心生活"><a href="#安心生活" class="headerlink" title="安心生活"></a>安心生活</h3><p>周末出去走走看看世界<br>看一场电影<br>看几本书<br>与朋友游戏几局<br>平安喜乐就够了</p>
<h3 id="还是决定关闭-blog-了。"><a href="#还是决定关闭-blog-了。" class="headerlink" title="还是决定关闭 blog 了。"></a>还是决定关闭 blog 了。</h3><p>太多黑历史，何况还有骂 GCD 的东西。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2020总结</title>
    <url>/2021/01/01/2020%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="转眼间就是新的一年了。"><a href="#转眼间就是新的一年了。" class="headerlink" title="转眼间就是新的一年了。"></a>转眼间就是新的一年了。</h3><p>2020 年，庚子年。发生了许多事情。</p>
<ul>
<li>新冠</li>
<li>澳洲大火</li>
<li>美股熔断</li>
<li>···</li>
</ul>
<p>在这一年里我也毕业了，入职了，成为了一个打工人士。有了收入之后之前想买的东西都基本买齐了，之前想做的事还在稳步进行中。<br>虽然很多人说 2020 是未来十年中最好的一年，但是在我这还是有可圈可点的地方。大环境的改变，正是抓住机遇的时候。</p>
<span id="more"></span>

<h3 id="今年完成的事情"><a href="#今年完成的事情" class="headerlink" title="今年完成的事情"></a>今年完成的事情</h3><ol>
<li>毕业</li>
<li>入职</li>
<li>购买想要的数码产品</li>
<li>补习数学（线性代数、离散）</li>
<li>学习英语</li>
<li>看剧</li>
<li>听歌（QQ 音乐榜单显示全年听了 3700 首）</li>
<li>数字货币（盈利）</li>
<li>基金（亏损）</li>
<li>股票（亏损）</li>
</ol>
<h3 id="明年预计完成的事情"><a href="#明年预计完成的事情" class="headerlink" title="明年预计完成的事情"></a>明年预计完成的事情</h3><ol>
<li>加薪</li>
<li>独自旅游</li>
<li>学习炒股</li>
<li>学习数学（代数）</li>
<li>深入技术</li>
<li>学习色彩与构图</li>
</ol>
<h3 id="仰望星空，脚踏实地。"><a href="#仰望星空，脚踏实地。" class="headerlink" title="仰望星空，脚踏实地。"></a>仰望星空，脚踏实地。</h3><p>在之前的学生生涯中，总是容易对自己的些许成就沾沾自喜。进入了社会后才会发现之前的成就根本不值一提。<br>需要学习的还有很多，在 TypeScript 群里学习了很多新的知识。</p>
<p>新的一年，希望能认识更多优秀的人，学习更多新的知识。</p>
]]></content>
      <categories>
        <category>Year-end Summary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2021观影记录</title>
    <url>/2021/01/01/2021%E8%A7%82%E5%BD%B1%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="电影"><a href="#电影" class="headerlink" title="电影"></a>电影</h3><ul>
<li>&#x2611; 沐浴之王：老套路。看完了感觉很无聊。</li>
<li>&#x2611; Dead to 2020：英剧喜剧片。有点意思，照例黑老美。</li>
</ul>
<!-- - &#x2610; 送你一朵小红花 -->
<ul>
<li>&#x2611; 十诫：老电影，十分艺术。</li>
<li>&#x2611; Megan Leavey：军人与军犬之间的故事，但是我还是觉得一旦走上了这条路，就很难回归正常生活了。</li>
<li>&#x2610; 邪不压正</li>
<li>&#x2611; 急先锋：很难想象是 2020 年的电影，给我的感觉比不上神话。</li>
<li>&#x2611; Azizler（易舍难分）：拿到了好的题材，拍了一部烂片。</li>
<li>&#x2611; Mosul（血战摩苏尔）：钢枪很热血，剧情挺狗血。</li>
<li>&#x2611; Greenland（末日逃生）：强行拖剧情，很多地方逻辑不通。特效还可以。</li>
<li>&#x2611; 赵子龙：垃圾片。</li>
<li>&#x2611; 送你一朵小红花</li>
<li>&#x2611; 盗梦空间</li>
</ul>
<h3 id="纪录片"><a href="#纪录片" class="headerlink" title="纪录片"></a>纪录片</h3><ul>
<li>&#x2611; Alien Worlds：根据现有的环境对其他星球进行模拟，幻想存在的物种。最后一集很震撼，随着进化只剩下神经系统，不需要肉体。靠葡萄糖维持生命，高度发达的机器人。</li>
</ul>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>2022总结</title>
    <url>/2023/01/08/2022%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="一年一度的总结时间"><a href="#一年一度的总结时间" class="headerlink" title="一年一度的总结时间"></a>一年一度的总结时间</h3><p>转眼又是一年了,这三年,一年比一年魔幻.</p>
<ul>
<li>1 月:深圳开始 24h 核酸</li>
<li>2 月:离职</li>
<li>3 月:回家</li>
<li>…</li>
<li>8 月:进厂.真正意义上的进厂,做 battery pack.</li>
<li>…</li>
<li>11 月:乌鲁木齐起火烧死人,引发国内某些地方开始抗议.</li>
<li>12 月:大放开,预计死亡会上百万人.但是目前为止官方的死亡人数还停留在 17 人.</li>
</ul>
<p>后续会如何发展,这下谁也说不准了.这就是习近平,能猜到他,他就不叫习近平了.<br>做了那么多事,没有一件是成功的,千古留名.</p>
<h3 id="去年的目标"><a href="#去年的目标" class="headerlink" title="去年的目标"></a>去年的目标</h3><ul>
<li><input disabled="" type="checkbox"> 学习公司管理方面的知识:没有时间</li>
<li><input disabled="" type="checkbox"> 学习订单流程:没有时间</li>
<li><input disabled="" type="checkbox"> 去广东主要城市旅游:没有时间,不过去了一次福建漳州,东山岛 &amp; 土楼</li>
<li><input checked="" disabled="" type="checkbox"> 学习英语:继续保持</li>
<li><input disabled="" type="checkbox"> 量化基本知识:没有时间</li>
<li><input disabled="" type="checkbox"> 命理学:没有时间</li>
</ul>
<h3 id="明年预计完成的事情"><a href="#明年预计完成的事情" class="headerlink" title="明年预计完成的事情"></a>明年预计完成的事情</h3><p>一直都很讨厌进厂.不是因为工资低,工作累,主要的原因是 i don’t have enough free time.<br>真的没有时间去完成自己的事情,每天 8:00 am 上班 9:30 pm 下班,11 个小时花在工厂里,加上晚上还要陪女朋友,真的没有时间.唯一的可能就是,压榨睡眠时间,但是容易猝死.</p>
<ol>
<li>英语,需要到精通需要学习上万小时,努力吧.</li>
<li>攒钱了,先把婚姻大事搞定.</li>
<li>目前的几本书先看完</li>
<li>陪女朋友出省旅游一次</li>
<li>日语还是慢慢来吧</li>
<li>电池健康管理</li>
</ol>
<h3 id="感觉奶奶有点老年痴呆了"><a href="#感觉奶奶有点老年痴呆了" class="headerlink" title="感觉奶奶有点老年痴呆了"></a>感觉奶奶有点老年痴呆了</h3><p>总要走到生死离别的.今年准备买车了,趁有时间多回家陪陪奶奶吧.</p>
]]></content>
      <categories>
        <category>Year-end Summary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2024总结</title>
    <url>/2025/01/17/2024%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="事业略有起色"><a href="#事业略有起色" class="headerlink" title="事业略有起色"></a>事业略有起色</h3><p>3 月份从工厂离职了,真正意义上的工厂.每天除了当客服,收发快递,还有搬货&#x2F;送货&#x2F;扫地&#x2F;修电脑&#x2F;修网线… 如果真的说学到了什么东西, 那就是: “穷死不耕丈人田,饿死不打亲戚工”. 用最少的钱去让你干最多的活, 美其名曰”教学”, 实际上资源也不给, 就等你一个人摸爬滚打. 算了, 各自安好.</p>
<p>在厂里做过的工作</p>
<ul>
<li>收发快递</li>
<li>收货&#x2F;送货</li>
<li>赶生产</li>
<li>客服</li>
<li>店铺运营</li>
<li>TikTok 运营</li>
<li>摄影&#x2F;美工&#x2F;后期</li>
<li>司机</li>
<li>跑腿</li>
<li>修电脑&#x2F;修网线</li>
<li>…</li>
</ul>
<p>工资: 5k-6k&#x2F;月, 工作时间: 9:00-19:30, 工作日为 6 天&#x2F;周.</p>
<p>4 月离职了, 找了一家做数字货币相关的公司,负责 React Native. 在我这小地方还是不错的, 因为工作岗位没那么多, 就将就下吧. 公司里有个老大哥, 看起来 blog 里面摸索过非常多的东西, 但是实际的代码真是一言难尽, 也可能是老项目的原因吧, 太多遗留了, 初期规划不好+没有彻底的理解, 就会导致项目越来越混乱.<br>项目最开始应该是要走 MVC 模式的, 但是不知道为什么写着写着就变成了 MVVM 模式, 导致代码混乱, 后期维护起来也很麻烦. 很多地方还会存在 State 刷新滞后问题, 因为整体是没有一个状态管理的, 靠的是强制更新最底层的一个 state 去整体刷新 page. 非常不友好.</p>
<p>奶奶送回老家了,说起来也有意思,四十来岁就跟着二伯父了, 劳累到七十多, 有点脑萎缩(记忆力减退,智商减退),二伯父一脚踢给大伯父了,哈哈. 所以说, 心不黑,不能成商啊. 准备过年回去看一下, 毕竟这种事小辈也不好掺和. 大伯父都不说话, 我还说什么呢? 不能交真心.</p>
<p>没什么想说的了, 年终总结也就是记流水账, 希望自己能坚持下去, 2025 继续努力.</p>
<h3 id="去年的目标"><a href="#去年的目标" class="headerlink" title="去年的目标"></a>去年的目标</h3><p>Opps… 才发现去年没有写总结呢, 那就用前年的目标吧.</p>
<ul>
<li><input disabled="" type="checkbox"> <strong>英语,需要到精通需要学习上万小时,努力吧</strong> : 正在努力学习</li>
<li><input disabled="" type="checkbox"> <strong>攒钱了,先把婚姻大事搞定</strong> : 嗯… 开销有点大, 今年存… flag</li>
<li><input checked="" disabled="" type="checkbox"> <strong>目前的几本书先看完</strong> : 说来也算看完了吧, 纸质书+微信读书. 而且我觉得微信读书非常好</li>
<li><input checked="" disabled="" type="checkbox"> <strong>陪女朋友出省旅游一次</strong> : 已经去了 南昌&#x2F;南京&#x2F;杭州 今年继续努力.</li>
<li><input checked="" disabled="" type="checkbox"> <strong>日语还是慢慢来吧</strong> : 在用 Duolingo 学习,但是学到后面还是得上书本. Duolingo 只是非常基础非常基础的东西,让你开口, 仅此而已. 真要系统学习还是得上书本.</li>
<li><input disabled="" type="checkbox"> <strong>电池健康管理</strong> : 无了, 已从电池厂离职</li>
</ul>
<h3 id="今年的目标"><a href="#今年的目标" class="headerlink" title="今年的目标"></a>今年的目标</h3><p>嗯…又多了一些爱好</p>
<ol>
<li>英语: 老生常谈了, 不赘述</li>
<li>日语: 努力学习, 以后可以看看日本的机会</li>
<li>工资: 努力提高到 3 开头吧, 大概率是实现不了</li>
<li>创业: 准备看看有没有什么项目了, 拿点钱来做点事情, 预计会上独立站&#x2F;阿里国际站, 还在计划中.</li>
<li>结婚: 运气好的话, 应该可以搞定吧</li>
<li>旅游: 或许能上一次高原呢?</li>
</ol>
]]></content>
      <categories>
        <category>Year-end Summary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Alibaba Cloud</title>
    <url>/2020/09/14/Alibaba-Cloud/</url>
    <content><![CDATA[<h3 id="買了個阿里雲服務"><a href="#買了個阿里雲服務" class="headerlink" title="買了個阿里雲服務"></a>買了個阿里雲服務</h3><p>有點太貴了。隨便跑點什麽 Memory 就 100%。</p>
<p>時常掉綫，不知道是不是網絡的問題。拿到公司 Network 環境一樣掉綫。</p>
<p>想搭個 Gatsby 玩玩，還是用自己的電腦吧。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>2021总结</title>
    <url>/2022/01/08/2021%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h3 id="一年一度的总结时间"><a href="#一年一度的总结时间" class="headerlink" title="一年一度的总结时间"></a>一年一度的总结时间</h3><p>2021，辛丑年。<br>这一年，似乎发生了许多事；事情太多，以至于能记住的太少了。</p>
<ul>
<li>教育减负，新东方股价蒸发 90%</li>
<li>房产暴雷，恒大欠债 1.6 万亿</li>
<li>疫情，孕妇流产、心梗无法救治、猝死、……</li>
</ul>
<p>是好事吗？是坏事吗？<br>长远来看，民智开化了许多，不再一味地听从党和政府，有了自己的思考。<br>但是，如果一个政府没有了民心支持，那么他还能维持不倒吗？<br>每次变革都是流血，只希望不要起太大的冲突。</p>
<span id="more"></span>

<h3 id="去年的目标"><a href="#去年的目标" class="headerlink" title="去年的目标"></a>去年的目标</h3><ul>
<li><input disabled="" type="checkbox"> 加薪：今年无加薪，可能是疫情原因。不过没所谓，已经准备不干了。</li>
<li><input checked="" disabled="" type="checkbox"> 独自旅游：去了广州、潮州、汕头等地。</li>
<li><input checked="" disabled="" type="checkbox"> 学习炒股：只学习了皮毛，感觉技术分析始终只是判读过去，无法预知未来。需要多了解一下<code>订单流</code>。</li>
<li><input disabled="" type="checkbox"> 学习数学：丝毫未看。</li>
<li><input checked="" disabled="" type="checkbox"> 深入技术：深入了解了<code>React源码</code>以及部分<code>Vue源码</code>，虽然不准备干这行了，但是为了留后路还是需要时常补习。</li>
<li><input checked="" disabled="" type="checkbox"> 学习色彩与构图：构图算是入了个门，色彩尚未开始。学习，就是需要多看，多实践。纸上得来终觉浅，绝知此事要躬行。</li>
</ul>
<h3 id="明年预计完成的事情"><a href="#明年预计完成的事情" class="headerlink" title="明年预计完成的事情"></a>明年预计完成的事情</h3><ol>
<li>学习公司管理方面的知识。</li>
<li>学习整个订单流程。短期内应该是需要自己动手，了解之后才知道如何改进。</li>
<li>有机会的话，游遍整个广东的主要城市吧。</li>
<li>英语当然是要坚持打卡的。</li>
<li>学习命理知识。</li>
<li>加一个量化的基本知识吧。</li>
</ol>
<h3 id="花无重开日，人无再少年。"><a href="#花无重开日，人无再少年。" class="headerlink" title="花无重开日，人无再少年。"></a>花无重开日，人无再少年。</h3><p>奶奶年纪也大了，每天下班看着地铁内的人，心情极差。思来想去，打工也是一辈子，闯一闯也是一辈子，再者八字暗示会有长辈相助，适合从商，那就搏一搏吧。<br>转行要趁早。同时，不能被利益迷惑了双眼，保持初心。<br>现在公司的老板，初心已经变了。从最开始的<code>打造全国顶尖云存储</code>，到现在的<code>只想噶韭菜</code>，整个人都疑神疑鬼的。还是得学习<code>稻盛和夫</code>的公司管理，一个公司，不仅仅是用于赚钱的工具，更多的，是为那些工人提供避风港。</p>
]]></content>
      <categories>
        <category>Year-end Summary</category>
      </categories>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Basic Authentication</title>
    <url>/2024/11/06/Basic-Authentication/</url>
    <content><![CDATA[<h1 id="什么是-Basic-Authentication？"><a href="#什么是-Basic-Authentication？" class="headerlink" title="什么是 Basic Authentication？"></a>什么是 Basic Authentication？</h1><p>Basic Authentication 是一种 HTTP 协议的认证方式，它使用用户名和密码对客户端进行身份验证。<br>RFC 2617 定义了 Basic Authentication 协议，它规定了客户端如何向服务器发送请求，以及服务器如何验证用户名和密码。<br>当用户试图访问受保护的资源时，服务器会判断 HTTP Header 中的 Authorization 字段是否包含有效的 Basic Authentication 认证信息。如果没有，服务器会返回 401 Unauthorized 状态码，要求客户端提供认证信息，并在响应头中添加 WWW-Authenticate: Basic 字段。</p>
<span id="more"></span>

<h1 id="Basic-Authentication-的流程"><a href="#Basic-Authentication-的流程" class="headerlink" title="Basic Authentication 的流程"></a>Basic Authentication 的流程</h1><ol>
<li>客户端向服务器发送请求，并在请求头中添加 Authorization 字段，其值使用 Basic 认证方式，并附带用户名和密码。</li>
<li>服务器收到请求后，会对用户名和密码进行验证，如果验证成功，则允许客户端访问受保护的资源。</li>
<li>如果验证失败，则服务器会返回 401 Unauthorized 状态码，并在响应头中添加 WWW-Authenticate: Basic 字段，要求客户端提供认证信息。</li>
<li>客户端收到 401 Unauthorized 状态码后，会弹出认证对话框，要求用户输入用户名和密码。</li>
<li>客户端输入用户名和密码后，会将用户名和密码使用 Base64 编码，并在 Authorization 字段中附带。</li>
<li>服务器再次收到请求，并对用户名和密码进行验证。</li>
<li>如果验证成功，则允许客户端访问受保护的资源。</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Authorization: Basic base64(username:password)</span><br></pre></td></tr></table></figure>

<h1 id="Basic-Authentication-的优缺点"><a href="#Basic-Authentication-的优缺点" class="headerlink" title="Basic Authentication 的优缺点"></a>Basic Authentication 的优缺点</h1><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ul>
<li>简单：基本认证只需要客户端和服务器之间共享一个密钥，不需要其他额外的配置。</li>
<li>兼容性强：基本认证是 HTTP 协议的认证方式，所有现代浏览器都支持。</li>
</ul>
<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>安全性低：Base64 编码为非对称加密，容易被破解。</li>
<li>传输效率低：用户名和密码需要进行 Base64 编码，会增加请求头的大小。</li>
<li>无状态：基本认证没有状态，每次请求都需要重新验证。</li>
</ul>
<h1 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h1><ul>
<li>对于需要安全访问的资源，建议使用 HTTPS 协议。</li>
</ul>
<p>适合使用基本认证的场景：</p>
<ul>
<li>内部系统之间的数据交换，如内部系统之间的数据传输。</li>
<li>内部系统之间的数据共享，如内部系统之间的文件共享。</li>
<li>内部系统之间的数据访问，如内部系统之间的 API 访问。</li>
</ul>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Authentication</tag>
        <tag>Backend</tag>
        <tag>Interview</tag>
      </tags>
  </entry>
  <entry>
    <title>Battery svg</title>
    <url>/2021/01/05/Battery-svg/</url>
    <content><![CDATA[<p><img src="/svgs/battery.svg" alt="Battery"></p>
]]></content>
      <tags>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>Binary Indexed Array</title>
    <url>/2021/06/19/Binary-Index-Array/</url>
    <content><![CDATA[<h3 id="Definition"><a href="#Definition" class="headerlink" title="Definition"></a>Definition</h3><p>A <strong>Fenwick tree</strong> or <strong>binary indexed tree</strong> is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers.</p>
<ol>
<li>update(index, delta): 将<code>delta</code>加到<code>index</code>位置上。</li>
<li>prefixSum(index): 求 <code>sum[1, index]</code>的值。</li>
<li>rangeSum(from, to): 求 <code>sum[from, to]</code> 的值。</li>
</ol>
<p>时间复杂度：</p>
<ol>
<li>update(index, delta): 更新需要循环更新每一个<code>parent</code>的值，从<code>index</code>开始到最后一个<code>parent</code>。复杂度为<code>O(n)</code>。</li>
<li>prefixSum(index): 直接返回<code>sum[index + 1]</code>即可，复杂度为<code>O(1)</code>。</li>
<li>rangeSum(from, to): 直接返回<code>sum[to + 1] - sum[from]</code>即可，复杂度为<code>O(1)</code>。</li>
</ol>
<h3 id="Build"><a href="#Build" class="headerlink" title="Build"></a>Build</h3><p>现在有个<code>nums</code>初始数组，通过这个数组构造一个<code>BITArray</code>。<br>构造<code>Binary Indexed Array</code>。</p>
<ol>
<li>实现<code>insert(index, delta)</code>:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insert</span>(<span class="params">index, delta</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; <span class="variable language_">this</span>.<span class="property">BITArray</span>.<span class="property">length</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">BITArray</span>[index] += delta</span><br><span class="line">    index += index &amp; -index <span class="comment">// BIT中，parent的index计算方法为：parent = child + (child &amp; -child)</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>构造 BITArray:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">MyArray</span>(<span class="params">nums</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">BITArray</span> = <span class="keyword">new</span> <span class="title class_">Array</span>(nums.<span class="property">length</span> + <span class="number">1</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = nums.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">insert</span>(i + <span class="number">1</span>, nums[i]) <span class="comment">// 在每个index处循环插入，delta就是初始值。</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>实现<code>sum(index)</code>:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">index</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">while</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    sum += <span class="variable language_">this</span>.<span class="property">BITArray</span>[index]</span><br><span class="line">    index -= index &amp; -index <span class="comment">// BIT中，child的计算方法为：child = parent - (parent &amp; -parent)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>实现<code>perfixSum(from, to)</code></li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">perfixSum</span>(<span class="params"><span class="keyword">from</span>, to</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">sum</span>(to + <span class="number">1</span>) - <span class="variable language_">this</span>.<span class="title function_">sum</span>(<span class="keyword">from</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Blog集成到CI</title>
    <url>/2020/10/01/Blog%E9%9B%86%E6%88%90%E5%88%B0CI/</url>
    <content><![CDATA[<h3 id="閑著無聊看了看如何部署"><a href="#閑著無聊看了看如何部署" class="headerlink" title="閑著無聊看了看如何部署"></a>閑著無聊看了看如何部署</h3><p>公司内部有 k8s 集群,所以也需要學習如何寫 deploy 脚本.目前服務挂在 Travis CI 上,後續可能會使用自己的機器裝個 Github Runner 啥的…</p>
<p>步驟大致為:</p>
<ol>
<li>在 Travis 中登錄,然後選擇需要 watch 的倉庫</li>
<li>編寫 deploy 文件,需要内部暴露字段的可以在 setting 中添加</li>
<li>在 github 中拿到 person access token,添加到 Travis</li>
</ol>
<p>因爲 blog 還不需要 build 和 test 的步驟,所以我的 deploy file 暫時還沒有這些:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="number">10</span> <span class="comment"># hexo目前似乎還不支持node 14版本</span></span><br><span class="line"></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span> <span class="comment"># 需要監聽的branch</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-deployer-git</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.name</span> <span class="string">&quot;$&#123;username&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="string">user.email</span> <span class="string">&quot;$&#123;email&#125;&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">rm</span> <span class="string">-rf</span> <span class="string">themes/next</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="string">https://github.com/theme-next/hexo-theme-next</span> <span class="string">themes/next</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">assets/config/_config.yml</span> <span class="string">themes/next/_config.yml</span> <span class="comment"># 我將自己的theme config存在assets中</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">cp</span> <span class="string">assets/images/avatar.jpg</span> <span class="string">themes/next/source/images/avatar.jpg</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">sed</span> <span class="string">-i</span> <span class="string">&quot;s/github_token/$&#123;GITHUB_TOKEN&#125;/g&quot;</span> <span class="string">_config.yml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">clean</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">echo</span> <span class="string">&quot;Generation finished.&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">foo@example.com</span></span><br><span class="line">  <span class="attr">on_success:</span> <span class="string">change</span></span><br><span class="line">  <span class="attr">on_failure:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure>

<h3 id="October-Plan"><a href="#October-Plan" class="headerlink" title="October Plan"></a>October Plan</h3><ul>
<li>React Hook: 首要完成的目標</li>
<li>shell: 不知道能學到什麽程度</li>
<li>Linux 命令: 不知道能學到什麽程度</li>
<li>優化之前的 code: 算是屎山了</li>
</ul>
<span id="more"></span>

<h3 id="September-Harvest"><a href="#September-Harvest" class="headerlink" title="September Harvest"></a>September Harvest</h3><ul>
<li>Test Driven Development: 業務需求太多,暫時還是需求開發</li>
<li>State Management: 還不熟練</li>
<li>Null Value Judgment: 後端新使用的框架,如果字段值為<code>0</code>或者<code>&#39;&#39;</code>,返回的 data 裏直接沒這個字段了(XD),所以很多地方都新增了判空處理</li>
</ul>
<h3 id="Left-Questions"><a href="#Left-Questions" class="headerlink" title="Left Questions"></a>Left Questions</h3><ul>
<li>Mobx 包裹的對象無法 log</li>
<li>React Native 難以 debug</li>
<li>移動端難以 testing</li>
</ul>
]]></content>
      <tags>
        <tag>CI</tag>
      </tags>
  </entry>
  <entry>
    <title>AJAX实现原理与技术背景</title>
    <url>/2025/03/18/AJAX%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E4%B8%8E%E6%8A%80%E6%9C%AF%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<h1 id="AJAX：实现原理与技术背景"><a href="#AJAX：实现原理与技术背景" class="headerlink" title="AJAX：实现原理与技术背景"></a>AJAX：实现原理与技术背景</h1><p>在现代 Web 开发中，AJAX（Asynchronous JavaScript and XML，异步 JavaScript 和 XML）是一种不可或缺的技术。它通过异步通信实现了网页的无刷新更新，极大地提升了用户体验。那么，AJAX 是如何实现的？它的出现又有着怎样的背景？</p>
<h2 id="从静态到动态的-Web-进化"><a href="#从静态到动态的-Web-进化" class="headerlink" title="从静态到动态的 Web 进化"></a>从静态到动态的 Web 进化</h2><h3 id="Web-1-0-的局限性"><a href="#Web-1-0-的局限性" class="headerlink" title="Web 1.0 的局限性"></a>Web 1.0 的局限性</h3><p>在互联网早期，网页主要依赖同步请求模型。当用户点击链接或提交表单时，浏览器会向服务器发送请求，然后等待服务器返回全新的 HTML 页面。这一过程会导致整个页面刷新，用户不得不面对短暂的空白和等待。对于简单的静态网站，这种模式尚可接受，但随着 Web 应用复杂性的增加，例如实时聊天、动态表单验证等需求，这种方式的弊端愈发明显——用户体验差、交互效率低。</p>
<h3 id="动态-Web-的需求"><a href="#动态-Web-的需求" class="headerlink" title="动态 Web 的需求"></a>动态 Web 的需求</h3><p>进入 21 世纪，互联网用户对 Web 应用的要求日益提高。人们希望网页能像桌面应用程序一样，提供流畅的交互和实时更新。例如，在输入搜索关键词时实时显示建议，或在聊天应用中即时刷新消息。这些需求推动了 Web 技术向动态化、异步化的方向发展。</p>
<h3 id="技术基础的成熟"><a href="#技术基础的成熟" class="headerlink" title="技术基础的成熟"></a>技术基础的成熟</h3><p>AJAX 并非凭空出现，它建立在一系列已有技术之上：</p>
<ul>
<li>JavaScript：作为客户端脚本语言，负责处理用户交互和动态更新页面内容。</li>
<li>XMLHttpRequest（XHR）：浏览器内置对象，允许在后台与服务器通信。</li>
<li>DOM（文档对象模型）：提供操作页面结构的接口，使数据能够无缝嵌入。</li>
<li>XML：最初用于数据交换（后来 JSON 逐渐取而代之）。</li>
</ul>
<p>这些技术的成熟为 AJAX 的诞生奠定了基础。尤其是 XMLHttpRequest，最早由微软在 Internet Explorer 5 中引入，随后被其他浏览器标准化，成为 AJAX 的核心组件。</p>
<span id="more"></span>

<h3 id="AJAX-的命名与推广"><a href="#AJAX-的命名与推广" class="headerlink" title="AJAX 的命名与推广"></a>AJAX 的命名与推广</h3><p>2005 年，Jesse James Garrett 在文章《Ajax: A New Approach to Web Applications》中首次提出“AJAX”这一术语，用以描述这种异步加载技术。同年，Google 将 AJAX 广泛应用于 Gmail 和 Google Maps 等产品，展示了其强大潜力。这些成功的案例迅速推动了 AJAX 在 Web 开发中的普及，成为 Web 2.0 时代的重要标志。</p>
<h2 id="AJAX-的实现原理"><a href="#AJAX-的实现原理" class="headerlink" title="AJAX 的实现原理"></a>AJAX 的实现原理</h2><p>AJAX 的核心在于通过异步请求实现客户端与服务器的无刷新通信。其实现过程可以分为以下几个步骤：</p>
<h3 id="1-XMLHttpRequest"><a href="#1-XMLHttpRequest" class="headerlink" title="1. XMLHttpRequest"></a>1. XMLHttpRequest</h3><p>XMLHttpRequest（简称 XHR）是 AJAX 的核心工具。它允许浏览器在不中断用户操作的情况下，向服务器发送请求并接收响应。以下是一个简单的实现示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.example.com/data&quot;</span>, <span class="literal">true</span>) <span class="comment">// true 表示异步请求</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">readyState</span> === <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">responseText</span>) <span class="comment">// 输出服务器返回的数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">xhr.<span class="title function_">send</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li>xhr.open：初始化请求，指定方法（GET&#x2F;POST）、URL 和是否异步。</li>
<li>xhr.onreadystatechange：监听请求状态变化，readyState 为 4 表示请求完成，status 为 200 表示成功。</li>
<li>xhr.send：发送请求。</li>
</ul>
<h3 id="2-异步通信流程"><a href="#2-异步通信流程" class="headerlink" title="2. 异步通信流程"></a>2. 异步通信流程</h3><ul>
<li>发起请求：JavaScript 创建 XHR 对象并配置请求参数。</li>
<li>发送请求：请求发送后，浏览器不会阻塞，用户可继续操作页面。</li>
<li>接收响应：服务器处理完成后返回数据，XHR 通过事件触发回调函数。</li>
<li>更新页面：JavaScript 解析响应数据并通过 DOM 操作更新页面内容。</li>
</ul>
<h3 id="3-数据交换格式"><a href="#3-数据交换格式" class="headerlink" title="3. 数据交换格式"></a>3. 数据交换格式</h3><p>AJAX 最初使用 XML 作为数据格式，但由于 XML 解析复杂且冗长，JSON（JavaScript Object Notation）逐渐成为主流。JSON 轻量且易于 JavaScript 处理，大幅提升了效率。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(xhr.<span class="property">responseText</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerHTML</span> = data.<span class="property">message</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-现代演进：Fetch-API"><a href="#4-现代演进：Fetch-API" class="headerlink" title="4. 现代演进：Fetch API"></a>4. 现代演进：Fetch API</h3><p>随着 Web 技术的发展，Fetch API 作为 XHR 的替代品逐渐流行。它基于 Promise，语法更简洁，但本质上仍是 AJAX 思想的延续：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&quot;https://api.example.com/data&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;result&quot;</span>).<span class="property">innerHTML</span> = data.<span class="property">message</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;Error:&quot;</span>, error))</span><br></pre></td></tr></table></figure>

<h2 id="AJAX-的优势与影响"><a href="#AJAX-的优势与影响" class="headerlink" title="AJAX 的优势与影响"></a>AJAX 的优势与影响</h2><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><ul>
<li>提升用户体验：无需刷新页面即可更新内容，交互更流畅。</li>
<li>节省资源：按需加载数据，减少了带宽和服务器压力。</li>
<li>推动 Web 2.0：为动态、用户驱动的应用提供了技术支持。</li>
</ul>
<h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><ul>
<li>依赖 JavaScript：若用户禁用脚本，AJAX 将失效。</li>
<li>SEO 挑战：早期搜索引擎难以抓取动态内容（现已通过服务端渲染等技术改善）。</li>
</ul>
<h3 id="技术演进"><a href="#技术演进" class="headerlink" title="技术演进"></a>技术演进</h3><p>在 AJAX 的基础上，现代 Web 开发引入了更多技术，如 WebSocket（实现双向通信）和前端框架（如 React、Vue），进一步优化了动态体验。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AJAX 的出现是 Web 技术发展的里程碑。它源于用户对动态 Web 的需求，依托 JavaScript、XMLHttpRequest 等技术实现了异步通信。从传统的页面刷新到无刷新的实时更新，AJAX 不仅改变了 Web 应用的开发方式，也推动了互联网从静态展示向交互式体验的转型。尽管如今新工具层出不穷，AJAX 的核心思想依然影响着现代 Web 开发的每一个角落。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>BST</title>
    <url>/2019/03/14/BST/</url>
    <content><![CDATA[<h3 id="Binary-Search-Tree"><a href="#Binary-Search-Tree" class="headerlink" title="Binary Search Tree"></a>Binary Search Tree</h3><ul>
<li>若左子树不空，则左子树上所有结点的值均小于它的根结点的值。</li>
<li>若右子树不空，则右子树上所有结点的值均大于它的根结点的值。</li>
<li>左、右子树也分别为二叉排序树。</li>
<li>没有键值相等的节点。</li>
</ul>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>Node:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">print</span> = (<span class="params">key</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(key)</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">key</span> = key</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">left</span> = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">right</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Tree：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">BinarySearchTree</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">root</span> = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">insert</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">new</span> <span class="title class_">Node</span>(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">root</span> = node</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">insertNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, node)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">insertNode</span>(<span class="params">parent, node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (parent.<span class="property">key</span> &gt; node.<span class="property">key</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent.<span class="property">left</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">          parent.<span class="property">left</span> = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">insertNode</span>(parent.<span class="property">left</span>, node)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (parent.<span class="property">right</span> == <span class="literal">null</span>) &#123;</span><br><span class="line">          parent.<span class="property">right</span> = node</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">insertNode</span>(parent.<span class="property">right</span>, node)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">inOrderTraverse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 中序遍历</span></span><br><span class="line">    <span class="title function_">inOrderTraverse</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">inOrderTraverse</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node) &#123;</span><br><span class="line">        <span class="title function_">inOrderTraverse</span>(node.<span class="property">left</span>)</span><br><span class="line">        <span class="title function_">print</span>(node.<span class="property">key</span>)</span><br><span class="line">        <span class="title function_">inOrderTraverse</span>(node.<span class="property">right</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">preOrderTraverse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 先序遍历</span></span><br><span class="line">    <span class="title function_">preOrderTraverse</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">preOrderTraverse</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="title function_">print</span>(node.<span class="property">key</span>)</span><br><span class="line">      <span class="title function_">preOrderTraverse</span>(node.<span class="property">left</span>)</span><br><span class="line">      <span class="title function_">preOrderTraverse</span>(node.<span class="property">right</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">postOrderTraverse</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 后序遍历</span></span><br><span class="line">    <span class="title function_">postOrderTraverse</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">postOrderTraverse</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="title function_">postOrderTraverse</span>(node.<span class="property">left</span>)</span><br><span class="line">      <span class="title function_">postOrderTraverse</span>(node.<span class="property">right</span>)</span><br><span class="line">      <span class="title function_">print</span>(node.<span class="property">key</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">max</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> maxNode = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMax</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node &amp;&amp; node.<span class="property">right</span>) &#123;</span><br><span class="line">        maxNode = node</span><br><span class="line">        <span class="title function_">getMax</span>(node.<span class="property">right</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getMax</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">    <span class="keyword">return</span> maxNode.<span class="property">key</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">min</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> minNode = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getMin</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node &amp;&amp; node.<span class="property">left</span>) &#123;</span><br><span class="line">        minNode = node</span><br><span class="line">        <span class="title function_">getMin</span>(node.<span class="property">left</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">getMin</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">    <span class="keyword">return</span> minNode.<span class="property">key</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">search</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">findNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!node) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">      <span class="keyword">if</span> (key &gt; node.<span class="property">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findNode</span>(node.<span class="property">right</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &lt; node.<span class="property">key</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">findNode</span>(node.<span class="property">left</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">findNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="title function_">search</span>(key)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调整二叉树</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">adjustNode</span>(<span class="params">current, key</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (key &lt; current.<span class="property">key</span>) &#123;</span><br><span class="line">        current.<span class="property">left</span> = <span class="title function_">adjustNode</span>(current.<span class="property">left</span>, key)</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key &gt; current.<span class="property">key</span>) &#123;</span><br><span class="line">        current.<span class="property">right</span> = <span class="title function_">adjustNode</span>(current.<span class="property">right</span>, key)</span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 左右都空直接删除</span></span><br><span class="line">        <span class="keyword">if</span> (current.<span class="property">left</span> === <span class="literal">null</span> &amp;&amp; current.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> (current = <span class="literal">null</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.<span class="property">right</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理左边不空</span></span><br><span class="line">          <span class="keyword">let</span> temp = current.<span class="property">left</span></span><br><span class="line">          current = <span class="literal">null</span></span><br><span class="line">          <span class="keyword">return</span> temp</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (current.<span class="property">left</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理右边不空</span></span><br><span class="line">          <span class="keyword">let</span> temp = current.<span class="property">right</span></span><br><span class="line">          current = <span class="literal">null</span></span><br><span class="line">          <span class="keyword">return</span> temp</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 从需要删除的节点的右边寻找一个最小的节点，放置当前位置</span></span><br><span class="line">        current.<span class="property">key</span> = <span class="title function_">minNode</span>(current.<span class="property">right</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调整后处理那个节点</span></span><br><span class="line">        current.<span class="property">right</span> = <span class="title function_">adjustNode</span>(current.<span class="property">right</span>, current.<span class="property">key</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> current</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">minNode</span>(<span class="params">node</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (node.<span class="property">left</span>) <span class="keyword">return</span> <span class="title function_">minNode</span>(node.<span class="property">left</span>)</span><br><span class="line">      <span class="keyword">return</span> node</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">adjustNode</span>(<span class="variable language_">this</span>.<span class="property">root</span>, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>** Test **</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tree = <span class="keyword">new</span> <span class="title class_">BinarySearchTree</span>()</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">5</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">  tree.<span class="title function_">insert</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">30</span>; i &gt; <span class="number">15</span>; i--) &#123;</span><br><span class="line">  tree.<span class="title function_">insert</span>(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(tree.<span class="title function_">search</span>(<span class="number">6</span>))</span><br><span class="line">tree.<span class="title function_">remove</span>(<span class="number">15</span>)</span><br><span class="line">tree.<span class="title function_">remove</span>(<span class="number">10</span>)</span><br><span class="line">tree.<span class="title function_">remove</span>(<span class="number">29</span>)</span><br><span class="line">tree.<span class="title function_">inOrderTraverse</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>Block-level function</title>
    <url>/2019/04/17/Block-level-function/</url>
    <content><![CDATA[<h3 id="在某个论坛有人问了下面的一段代码"><a href="#在某个论坛有人问了下面的一段代码" class="headerlink" title="在某个论坛有人问了下面的一段代码"></a>在某个论坛有人问了下面的一段代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outside&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">f</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inside&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure>

<p>问的是为什么在浏览器中是<code>f is not a function</code>。<br>这个问题其实很好回答，存在函数提升，但是仔细想想又不对，因为函数提升是把整个函数都提升到当前作用域，所以按理来说 f 并不会是<code>undefined</code>。<br>如果按照函数提升的话，结果应该是像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outside&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inside&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">f</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure>

<p>所以结果应该是<code>inside</code>才对，用 IE7 可以发现结果确实是 inside。<br>那这里为什么是 undefined 呢？<br>后面那位兄弟说在阮一峰的《ES6 入门》中说道，ES6 规定块级作用域中的函数定义规定为函数表达式。如果是定义为函数表达式的话，那就会像这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outside&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f</span><br><span class="line">  <span class="title function_">f</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inside&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure>

<p>这么一来这个<code>undefined</code>就可以解释了，因为只存在变量提升，而还未定义，所以就会出现<code>undefined</code>。但是那本书后还加了一句，浏览器并未遵循实现。<br>后面在 starkoverflow 上找到了一个老哥的回答，他的解释为这是因为<code>strict &amp; non-strict mode</code>的不同。</p>
<ul>
<li>let 和 const 在两种模式下行为一样</li>
<li>function 在两种模式下的行为就不是一样的，因为浏览器会扩展非严格模式，从而兼容老代码。</li>
</ul>
<p>所以，在<code>strict mode</code>中，第一段代码输出的是<code>outside</code>，<code>non-strict mode</code>中就会报错，因为会变成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;outside&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> f <span class="comment">// function-scoped</span></span><br><span class="line">  <span class="title function_">f</span>(<span class="params"></span>)</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">let</span> f1 = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inside&quot;</span>)</span><br><span class="line">    &#125; <span class="comment">// block-scoped</span></span><br><span class="line">    f = f1</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>()</span><br></pre></td></tr></table></figure>

<p>MDN 中关于<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions#Block-level_functions_in_non-strict_code">Block-level functions in non-strict code</a>的也只有一句话： <code>Don&#39;t.</code></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Building a Highlight Text Component in React</title>
    <url>/2025/02/11/Building-a-Highlight-Text-Component-in-React/</url>
    <content><![CDATA[<p>In modern web development, enhancing user experience by highlighting specific text within a larger body of content is a common requirement. Whether it’s for search results, annotations, or emphasizing key information, a <strong>Highlight Text</strong> component can be incredibly useful. In this article, we’ll walk through the process of building a simple yet effective Highlight Text component using React.</p>
<p>Here is the Example captured:</p>
<p><img src="https://code-example-1255795341.cos.ap-singapore.myqcloud.com/rn-high-light-eg-1.png" alt="Highlight Text Component Example"></p>
<span id="more"></span>

<h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Edward &lt;wang.huiyang<span class="doctag">@outlook</span>.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@created</span> 2025-02-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Children</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Highlight</span> &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="built_in">string</span></span><br><span class="line">  style?: <span class="built_in">string</span></span><br><span class="line">  onPress?: <span class="function">(<span class="params">text: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">HighlightTextProps</span> &#123;</span><br><span class="line">  <span class="attr">highlights</span>: <span class="title class_">Highlight</span>[]</span><br><span class="line">  textStyle?: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">children</span>: <span class="title class_">React</span>.<span class="property">ReactNode</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> splitText = (&#123;</span><br><span class="line">  text,</span><br><span class="line">  highlights,</span><br><span class="line">&#125;: &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">highlights</span>: <span class="built_in">string</span>[]</span><br><span class="line">&#125;): <span class="built_in">string</span>[] =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">highlightRegex</span>: <span class="built_in">string</span>[] = highlights.<span class="title function_">map</span>(</span><br><span class="line">    <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="string">`(<span class="subst">$&#123;i.replace(/<span class="string">&quot;/g, &quot;</span><span class="string">&quot;).trim()&#125;)`</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  )</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  const finalRegex = new RegExp(highlightRegex.join(&quot;</span>|<span class="string">&quot;), &quot;</span>gm<span class="string">&quot;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  const parts =</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    text &amp;&amp; highlightRegex.length &gt; 0</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      ? text.split(finalRegex).filter((i) =&gt; i !== undefined &amp;&amp; i !== &quot;</span><span class="string">&quot;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      : text</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      ? [text]</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      : []</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  return parts</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">const HighlightText: React.FC&lt;HighlightTextProps&gt; = (&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  children,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  textStyle,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  highlights,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">&#125;) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  let text = &quot;</span><span class="string">&quot;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  Children.map(children, (child) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    if (typeof child === &quot;</span><span class="built_in">string</span><span class="string">&quot;) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      text += child</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &#125;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  const chunks = splitText(&#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    text,</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    highlights: highlights.map((i) =&gt; i.value),</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  &#125;)</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string"></span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">  return (</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">    &lt;div className=&#123;textStyle&#125;&gt;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">      &#123;chunks.map((chunk, index) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        let keyword: JSX.Element | null = null</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">        if (highlights) &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">          highlights.forEach((item) =&gt; &#123;</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">            const regexSource = highlights.map(</span></span></span></span><br><span class="line"><span class="string"><span class="subst"><span class="string">              (i) =&gt; `($&#123;i.value.replace(/&quot;</span>/g, <span class="string">&quot;&quot;</span>).trim()&#125;</span>)`</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">const</span> itemRegex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">`^<span class="subst">$&#123;regexSource.join(<span class="string">&quot;|&quot;</span>)&#125;</span>$`</span>, <span class="string">&quot;gm&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (itemRegex &amp;&amp; itemRegex.<span class="title function_">test</span>(chunk)) &#123;</span><br><span class="line">              keyword = (</span><br><span class="line">                <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">key</span>=<span class="string">&#123;index&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">className</span>=<span class="string">&#123;item.style&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> item.onPress &amp;&amp; item.onPress(chunk)&#125;</span></span><br><span class="line"><span class="language-xml">                &gt;</span></span><br><span class="line"><span class="language-xml">                  &#123;chunk&#125;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">              )</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (keyword) &#123;</span><br><span class="line">          <span class="keyword">return</span> keyword</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;chunk&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &#125;)&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">HighlightText</span></span><br></pre></td></tr></table></figure>

<h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">HighlightText</span></span><br><span class="line">  textStyle=<span class="string">&quot;u-font-14-colored mt-[12px] mx-[12px]&quot;</span></span><br><span class="line">  highlights=&#123;[</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">value</span>: state?.<span class="property">email</span>,</span><br><span class="line">      <span class="attr">style</span>: <span class="string">&quot;text-primary&quot;</span>,</span><br><span class="line">      <span class="attr">onPress</span>: <span class="function">(<span class="params">text</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Clicked: <span class="subst">$&#123;text&#125;</span>`</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ]&#125;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="title class_">Enter</span> the <span class="number">6</span>-digit verification code sent to &#123;state?.<span class="property">email</span>&#125;. <span class="title class_">This</span> code will</span><br><span class="line">  expire <span class="keyword">in</span> <span class="number">10</span> minutes.</span><br><span class="line">&lt;/<span class="title class_">HighlightText</span>&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>TailwindCSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Builder 模式</title>
    <url>/2019/07/10/Builder-%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Human</span> = <span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">skill</span> = (param &amp;&amp; param.<span class="property">skill</span>) || <span class="string">&quot;null&quot;</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">hobby</span> = (param &amp;&amp; param.<span class="property">skill</span>) || <span class="string">&quot;null&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Human</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getSkill</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">skill</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getHobby</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobby</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Named</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  ;(<span class="function">(<span class="params">name, _this</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">wholeName</span> = name</span><br><span class="line">    <span class="keyword">if</span> (name.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">      _this.<span class="property">FirstName</span> = name.<span class="title function_">slice</span>(<span class="number">0</span>, name.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>))</span><br><span class="line">      _this.<span class="property">LastName</span> = name.<span class="title function_">slice</span>(name.<span class="title function_">indexOf</span>(<span class="string">&quot; &quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(name, _this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Work</span> = <span class="keyword">function</span> (<span class="params">work</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  ;(<span class="function">(<span class="params">work, _this</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (work) &#123;</span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;code&quot;</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">work</span> = <span class="string">&quot;developer&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">case</span> <span class="string">&quot;design&quot;</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">work</span> = <span class="string">&quot;designer&quot;</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">work</span> = work</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(work, _this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Work</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">changeWork</span> = <span class="keyword">function</span> (<span class="params">work</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">work</span> = work</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * to create a Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">work</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="keyword">function</span> (<span class="params">name, work</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> _person = <span class="keyword">new</span> <span class="title class_">Human</span>()</span><br><span class="line">  _person.<span class="property">name</span> = <span class="keyword">new</span> <span class="title class_">Named</span>(name)</span><br><span class="line">  _person.<span class="property">work</span> = <span class="keyword">new</span> <span class="title class_">Work</span>(work)</span><br><span class="line">  <span class="keyword">return</span> _person</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack Edward&quot;</span>, <span class="string">&quot;design&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">work</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>)</span><br><span class="line">person.<span class="property">work</span>.<span class="title function_">changeWork</span>(<span class="string">&quot;code&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">work</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>C %s格式化输出</title>
    <url>/2018/11/07/C-s%E6%A0%BC%E5%BC%8F%E5%8C%96%E8%BE%93%E5%87%BA/</url>
    <content><![CDATA[<h3 id="写题时遇见的一个东西"><a href="#写题时遇见的一个东西" class="headerlink" title="写题时遇见的一个东西"></a>写题时遇见的一个东西</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* s = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%15.2s&quot;</span>, s);</span><br><span class="line"><span class="comment">//result: he</span></span><br></pre></td></tr></table></figure>

<p>找到如下用法：</p>
<ul>
<li>*%ms:输出的字符串占 m 列，如字符串本身长度大于 m,则突破获 m 的限制，将字符串全部输出。若串长小于 m,则左补空格。</li>
<li>*%-ms:如果串长小于 m,则在 m 列范围内，字符串向左靠，右补空格。</li>
<li>*%m.ns:输出占 m 列，但只取字符串中左端 n 个字符。这 n 个字符输出在 m 列的右侧，左补空格，注意：如果 n 未指定，默认为 0.</li>
<li>*%-m.ns:其中 m、n 含义同上，n 个字符输出在 m 列范围的左侧，右补空格。如果 n&gt;m,则自动取 n 值，即保证 n 个字符正常输出，注意：如果 n 未指定，默认为 0.</li>
</ul>
<p>如果是 sprintf(desc, “%m.ns”, sour);<br></p>
<ul>
<li>如果 desc 空间够的话，会在%m.ns 串 的结尾自动补 null 字符，不同于 strncpy.例如 :sprintf(desc, “%.3s”, “123456”);</li>
<li>desc 如果空间&gt;&#x3D;4 字节的话，第 4 个字节将是 null 字符。</li>
</ul>
]]></content>
      <tags>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Boosting Flutter Performance with Frame-Based Rendering using</title>
    <url>/2025/01/07/Boosting-Flutter-Performance-with-Frame-Based-Rendering-using/</url>
    <content><![CDATA[<h1 id="Boosting-Flutter-Performance-with-Frame-Based-Rendering-using-keframe"><a href="#Boosting-Flutter-Performance-with-Frame-Based-Rendering-using-keframe" class="headerlink" title="Boosting Flutter Performance with Frame-Based Rendering using keframe"></a>Boosting Flutter Performance with Frame-Based Rendering using <code>keframe</code></h1><p>Flutter is known for its smooth UI performance, but complex animations or frequent rebuilds can sometimes lead to jank. Frame-based rendering, also known as keyframe animation, offers a powerful technique to optimize these scenarios. This article explores how to leverage frame-based rendering in Flutter using the <code>keframe</code> package, focusing on <code>FrameAnimation</code>, <code>FrameSeparateWidget</code>, and <code>SizeCacheWidget</code>.</p>
<h2 id="What-is-Frame-Based-Rendering"><a href="#What-is-Frame-Based-Rendering" class="headerlink" title="What is Frame-Based Rendering?"></a>What is Frame-Based Rendering?</h2><p>Traditional rendering in Flutter often involves rebuilding widgets every time their properties change. While efficient in many cases, this can become a bottleneck when dealing with intricate animations or rapidly changing data.</p>
<p>Frame-based rendering pre-calculates animation frames and stores them. During animation, the system displays these pre-rendered frames sequentially, minimizing constant rebuilds. This results in smoother animations and improved performance, especially on less powerful devices.</p>
<span id="more"></span>

<h2 id="Introducing-keframe"><a href="#Introducing-keframe" class="headerlink" title="Introducing keframe"></a>Introducing <code>keframe</code></h2><p>The <code>keframe</code> package simplifies frame-based rendering in Flutter. It provides widgets and utilities to define keyframes and animate between them efficiently.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">dependencies:</span><br><span class="line">  keframe: ^<span class="number">2.0</span><span class="number">.6</span></span><br></pre></td></tr></table></figure>

<p><strong>Core Components: <code>FrameAnimation</code>, <code>FrameSeparateWidget</code>, and <code>SizeCacheWidget</code></strong><br><code>keframe</code> provides three main components that work together:</p>
<ul>
<li><code>FrameAnimation</code>: The core widget that manages the animation timeline and displays the pre-rendered frames.</li>
<li><code>FrameSeparateWidget</code>: This widget is crucial for separating the frame building process from the animation rendering. It ensures that frames are built only once and cached.</li>
<li><code>SizeCacheWidget</code>: This widget caches the size of the child widget. This is important because layout calculations can be expensive, and caching the size prevents unnecessary re-layouts during animation.</li>
</ul>
<h2 id="Basic-Usage-with-All-Components"><a href="#Basic-Usage-with-All-Components" class="headerlink" title="Basic Usage with All Components"></a>Basic Usage with All Components</h2><p>Here’s an example demonstrating how to use all three components to animate a widget’s opacity and size:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:keframe/keframe.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComplexAnimation</span> <span class="keyword">extends</span> <span class="title">StatefulWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> ComplexAnimation(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  State&lt;ComplexAnimation&gt; createState() =&gt; _ComplexAnimationState();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">_ComplexAnimationState</span> <span class="keyword">extends</span> <span class="title">State</span>&lt;<span class="title">ComplexAnimation</span>&gt; </span>&#123;</span><br><span class="line">  <span class="built_in">double</span> size = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&#x27;Complex Animation&#x27;</span>)),</span><br><span class="line">      body: Center(</span><br><span class="line">        child: GestureDetector(</span><br><span class="line">          onTap: () &#123;</span><br><span class="line">            setState(() &#123;</span><br><span class="line">              size = size == <span class="number">100</span> ? <span class="number">200</span> : <span class="number">100</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;,</span><br><span class="line">          child: FrameAnimation(</span><br><span class="line">            frameLen: <span class="number">2</span>,</span><br><span class="line">            duration: <span class="keyword">const</span> <span class="built_in">Duration</span>(milliseconds: <span class="number">500</span>),</span><br><span class="line">            curve: Curves.easeInOut,</span><br><span class="line">            frameBuilder: (context, frameIndex) &#123;</span><br><span class="line">              <span class="keyword">return</span> FrameSeparateWidget(</span><br><span class="line">                index: frameIndex,</span><br><span class="line">                builder: (context) &#123;</span><br><span class="line">                  <span class="keyword">return</span> SizeCacheWidget(</span><br><span class="line">                    child: Opacity(</span><br><span class="line">                      opacity: frameIndex == <span class="number">0</span> ? <span class="number">0.5</span> : <span class="number">1.0</span>,</span><br><span class="line">                      child: Container(</span><br><span class="line">                        width: size,</span><br><span class="line">                        height: size,</span><br><span class="line">                        color: Colors.blue,</span><br><span class="line">                      ),</span><br><span class="line">                    ),</span><br><span class="line">                  );</span><br><span class="line">                &#125;,</span><br><span class="line">              );</span><br><span class="line">            &#125;,</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Key improvements in this example:</p>
<ul>
<li><code>FrameSeparateWidget</code> is used: This ensures the frame is built only once for each frame index.</li>
<li><code>SizeCacheWidget</code> is used: This caches the size of the container, preventing unnecessary re-layouts.</li>
<li>Combined opacity and size animation: Demonstrates animating multiple properties.</li>
</ul>
<h2 id="Explanation"><a href="#Explanation" class="headerlink" title="Explanation"></a>Explanation</h2><ol>
<li>The <code>FrameAnimation</code> widget manages the animation timeline and calls the <code>frameBuilder</code> for each frame.</li>
<li>The <code>FrameSeparateWidget</code> receives the <code>frameIndex</code> and uses it as a key to cache the built widget. This is the core of the frame-based rendering optimization.</li>
<li>The <code>SizeCacheWidget</code> wraps the animated widget and caches its size, preventing unnecessary re-layouts.</li>
</ol>
<h2 id="Benefits-of-Using-keframe"><a href="#Benefits-of-Using-keframe" class="headerlink" title="Benefits of Using keframe"></a>Benefits of Using <code>keframe</code></h2><ul>
<li>Improved Performance: By pre-rendering and caching frames and sizes, <code>keframe</code> significantly reduces the computational load during animation, leading to smoother performance, especially on lower-end devices and complex animations.</li>
<li>Simplified Complex Animations: <code>keframe</code> provides a clean and concise way to define complex animations with multiple stages and properties.</li>
<li>Reduced Jank: Frame-based rendering helps minimize jank, resulting in a more polished user experience.</li>
</ul>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p><code>keframe</code>, with its <code>FrameAnimation</code>, <code>FrameSeparateWidget</code>, and <code>SizeCacheWidget</code> components, provides a powerful and efficient way to optimize Flutter applications, especially when dealing with complex animations. By using frame-based rendering, you can significantly improve performance and create smoother user experiences.</p>
<h2 id="Further-Exploration"><a href="#Further-Exploration" class="headerlink" title="Further Exploration"></a>Further Exploration</h2><p><a href="https://pub.dev/packages/keframe">keframe package on pub.dev</a></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 左侧溢出实现</title>
    <url>/2025/03/19/CSS-%E5%B7%A6%E4%BE%A7%E6%BA%A2%E5%87%BA%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>; <span class="comment">/* 固定宽度，触发溢出 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden; <span class="comment">/* 隐藏溢出内容 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">white-space</span>: nowrap; <span class="comment">/* 禁止换行 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.text</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100%</span>; <span class="comment">/* 占满容器 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">direction</span>: rtl; <span class="comment">/* 文本方向从右到左 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-overflow</span>: ellipsis; <span class="comment">/* 显示省略号 */</span></span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: left; <span class="comment">/* 强制左对齐，保持视觉上的正常阅读方向 */</span></span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>短文本不会被省略<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;text&quot;</span>&gt;</span>这是一段很长的文本，左侧会被省略<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Building an Advanced Slider Component</title>
    <url>/2025/02/08/Building-an-Advanced-Slider-Component/</url>
    <content><![CDATA[<p>In this post, I want to share how I built a custom slider component that comes packed with useful features. This slider not only supports basic functionalities like step increments and configurable maximum&#x2F;minimum values, but it also offers advanced features such as displaying scale tick values, suffix rendering, and custom value formatting. Whether you’re building a finance dashboard, a settings panel, or a data visualization tool, this component can be tailored to your needs.</p>
<h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><h3 id="Step-Increments"><a href="#Step-Increments" class="headerlink" title="Step Increments"></a>Step Increments</h3><p>The slider supports step increments, allowing you to specify how much the slider’s value should increase or decrease with each move. This is particularly useful for ensuring users select values within a desired precision.</p>
<h3 id="Scale-Tick-Values"><a href="#Scale-Tick-Values" class="headerlink" title="Scale Tick Values"></a>Scale Tick Values</h3><p>To improve usability, the slider renders tick values along its track. These ticks provide a visual reference for users, making it easier to gauge the range and current value.</p>
<h3 id="Maximum-and-Minimum-Values"><a href="#Maximum-and-Minimum-Values" class="headerlink" title="Maximum and Minimum Values"></a>Maximum and Minimum Values</h3><p>You can easily define the slider’s range by setting the maximum and minimum values. This ensures that users can only select a value within a valid, predetermined range.</p>
<h3 id="Suffix-Rendering"><a href="#Suffix-Rendering" class="headerlink" title="Suffix Rendering"></a>Suffix Rendering</h3><p>Often, slider values need to be accompanied by a unit (e.g., %, $, kg). With suffix rendering, you can easily append a suffix to the displayed value, making it clear what the number represents.</p>
<h3 id="Custom-Value-Formatting"><a href="#Custom-Value-Formatting" class="headerlink" title="Custom Value Formatting"></a>Custom Value Formatting</h3><p>In some cases, the raw slider value might not be in the ideal format for display. This slider component allows you to pass a formatter function that converts the numeric value into a user-friendly string format.</p>
<h2 id="Implementation-Overview"><a href="#Implementation-Overview" class="headerlink" title="Implementation Overview"></a>Implementation Overview</h2><p>Below is a simplified example of how the slider component is implemented using React and TypeScript:</p>
<span id="more"></span>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Edward &lt;wang.huiyang<span class="doctag">@outlook</span>.com&gt;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@created</span> 2025-02-08</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CustomColorLight</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/styles/customColor&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect, useRef, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">USlider</span>: <span class="title class_">React</span>.<span class="property">FC</span>&lt;&#123;</span><br><span class="line">  suffix?: <span class="built_in">string</span></span><br><span class="line">  min?: <span class="built_in">number</span></span><br><span class="line">  max?: <span class="built_in">number</span></span><br><span class="line">  step?: <span class="built_in">number</span></span><br><span class="line">  markStep?: <span class="built_in">number</span></span><br><span class="line">  initialValue?: <span class="built_in">number</span></span><br><span class="line">  customPoints?: <span class="built_in">number</span>[]</span><br><span class="line">  onChange?: <span class="function">(<span class="params">value: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  numFormat?: <span class="function">(<span class="params">value: <span class="built_in">number</span></span>) =&gt;</span> <span class="built_in">string</span></span><br><span class="line">&#125;&gt; = <span class="function">(<span class="params">&#123;</span></span></span><br><span class="line"><span class="params"><span class="function">  suffix,</span></span></span><br><span class="line"><span class="params"><span class="function">  min = <span class="number">0</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  max = <span class="number">100</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  step = <span class="number">1</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  markStep = <span class="number">5</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  onChange,</span></span></span><br><span class="line"><span class="params"><span class="function">  initialValue = <span class="number">50</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  customPoints,</span></span></span><br><span class="line"><span class="params"><span class="function">  numFormat,</span></span></span><br><span class="line"><span class="params"><span class="function">&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [value, setValue] = useState&lt;<span class="built_in">number</span>&gt;(initialValue) <span class="comment">// slider value</span></span><br><span class="line">  <span class="keyword">const</span> [isDragging, setIsDragging] = useState&lt;<span class="built_in">boolean</span>&gt;(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> sliderRef = useRef&lt;<span class="title class_">HTMLDivElement</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// calculate percentage of current value</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getPercentage</span> = (<span class="params">val: <span class="built_in">number</span></span>) =&gt; ((val - min) / (max - min)) * <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle slider move event</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMove</span> = (<span class="params">clientX: <span class="built_in">number</span></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!sliderRef.<span class="property">current</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> sliderRect = sliderRef.<span class="property">current</span>.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">    <span class="keyword">const</span> offsetX = clientX - sliderRect.<span class="property">left</span></span><br><span class="line">    <span class="keyword">const</span> sliderWidth = sliderRect.<span class="property">width</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// calculate current value</span></span><br><span class="line">    <span class="keyword">let</span> newValue = <span class="title class_">Math</span>.<span class="title function_">round</span>((offsetX / sliderWidth) * (max - min) + min)</span><br><span class="line">    newValue = <span class="title class_">Math</span>.<span class="title function_">max</span>(min, <span class="title class_">Math</span>.<span class="title function_">min</span>(max, newValue))</span><br><span class="line">    newValue = <span class="title class_">Math</span>.<span class="title function_">round</span>(newValue / step) * step</span><br><span class="line"></span><br><span class="line">    <span class="title function_">setValue</span>(newValue)</span><br><span class="line">    onChange &amp;&amp; <span class="title function_">onChange</span>(newValue)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">Telegram</span>.<span class="property">WebApp</span>.<span class="property">HapticFeedback</span>.<span class="title function_">selectionChanged</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// handle slider click event</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseDown</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDragging</span>(<span class="literal">true</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseUp</span> = (<span class="params"></span>) =&gt; <span class="title function_">setIsDragging</span>(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleMouseMove</span> = (<span class="params">e: React.MouseEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDragging) <span class="title function_">handleMove</span>(e.<span class="property">clientX</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleTouchMove</span> = (<span class="params">e: React.TouchEvent</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (isDragging) <span class="title function_">handleMove</span>(e.<span class="property">touches</span>[<span class="number">0</span>].<span class="property">clientX</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// generate ticks</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generateTicks</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ticks = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i += markStep) &#123;</span><br><span class="line">      ticks.<span class="title function_">push</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;absolute transform -translate-x-1/2 u-font-12 text-[#666]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">i</span>)&#125;%` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;numFormat ? numFormat(i) : i&#125;</span></span><br><span class="line"><span class="language-xml">          &#123;suffix&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ticks</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generateCustomTicks</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!customPoints) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ticks = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; customPoints.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = customPoints[i]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (val &gt;= min &amp;&amp; val &lt;= max) &#123;</span><br><span class="line">        ticks.<span class="title function_">push</span>(</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;val&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;absolute transform -translate-x-1/2 u-font-12 text-[#666]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">val</span>)&#125;%` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;numFormat ? numFormat(val) : val&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;suffix&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ticks</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generateTickPoints</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> ticks = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = min; i &lt;= max; i += markStep) &#123;</span><br><span class="line">      ticks.<span class="title function_">push</span>(</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">key</span>=<span class="string">&#123;i&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;text-xs text-gray-500 absolute transform -top-[3px] -translate-x-1/2 w-2 h-2 rounded-full border-2 bg-bg-secondary dark:bg-bg-secondary-dark&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">i</span>)&#125;%`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderColor:</span> <span class="attr">CustomColorLight.cvip</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">            setValue(i)</span></span><br><span class="line"><span class="language-xml">            onChange &amp;&amp; onChange(i)</span></span><br><span class="line"><span class="language-xml">            window.Telegram.WebApp.HapticFeedback.selectionChanged()</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ticks</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">generateCustomPoints</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (!customPoints) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> ticks = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; customPoints.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> val = customPoints[i]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (val &gt;= min &amp;&amp; val &lt;= max) &#123;</span><br><span class="line">        ticks.<span class="title function_">push</span>(</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">key</span>=<span class="string">&#123;val&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&quot;text-xs text-gray-500 absolute transform -top-[3px] -translate-x-1/2 w-2 h-2 rounded-full border-2 bg-bg-secondary dark:bg-bg-secondary-dark&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">val</span>)&#125;%`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">borderColor:</span> <span class="attr">CustomColorLight.cvip</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">              setValue(val)</span></span><br><span class="line"><span class="language-xml">              onChange &amp;&amp; onChange(val)</span></span><br><span class="line"><span class="language-xml">              window.Telegram.WebApp.HapticFeedback.selectionChanged()</span></span><br><span class="line"><span class="language-xml">            &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          &gt;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ticks</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setValue</span>(initialValue)</span><br><span class="line">  &#125;, [initialValue])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative mt-10 overflow-visible mx-[12px]&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;/* slider track */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;sliderRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;w-full h-[2px] bg-[#eee] rounded-full relative cursor-pointer overflow-visible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMouseDown</span>=<span class="string">&#123;handleMouseDown&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMouseMove</span>=<span class="string">&#123;handleMouseMove&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMouseUp</span>=<span class="string">&#123;handleMouseUp&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onMouseLeave</span>=<span class="string">&#123;handleMouseUp&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onTouchStart</span>=<span class="string">&#123;handleMouseDown&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onTouchMove</span>=<span class="string">&#123;handleTouchMove&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onTouchEnd</span>=<span class="string">&#123;handleMouseUp&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;/* slider progress */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;h-[2px] bg-cvip rounded-full absolute&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">value</span>)&#125;%` &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;/* slider handle */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">className</span>=<span class="string">&quot;w-[16px] h-[16px] top-[1px] rounded-full absolute -translate-x-1/2 -translate-y-1/2 border-2 bg-bg-secondary dark:bg-bg-secondary-dark z-50&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">value</span>)&#125;%`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderColor:</span> <span class="attr">CustomColorLight.cvip</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        &#123;/* tick points */&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;customPoints &amp;&amp; customPoints.length &gt; 0</span></span><br><span class="line"><span class="language-xml">            ? generateCustomPoints()</span></span><br><span class="line"><span class="language-xml">            : generateTickPoints()&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* ticks */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span>=<span class="string">&quot;relative h-[20px] mt-[8px] flex justify-between items-center overflow-visible&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;customPoints &amp;&amp; customPoints.length &gt; 0</span></span><br><span class="line"><span class="language-xml">          ? generateCustomTicks()</span></span><br><span class="line"><span class="language-xml">          : generateTicks()&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* floating display current value */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">className</span>=<span class="string">&quot;absolute -top-8 px-[4px] py-[2px] bg-cvip rounded u-font-12 text-black font-bold&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">left:</span> `$&#123;<span class="attr">getPercentage</span>(<span class="attr">value</span>)&#125;%`,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">transform:</span> &quot;<span class="attr">translateX</span>(<span class="attr">-50</span>%)&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">display:</span> <span class="attr">isDragging</span> ? &quot;<span class="attr">block</span>&quot; <span class="attr">:</span> &quot;<span class="attr">none</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;numFormat ? numFormat(value) : value&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;suffix&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">USlider</span></span><br></pre></td></tr></table></figure>

<h2 id="Usage-Example"><a href="#Usage-Example" class="headerlink" title="Usage Example"></a>Usage Example</h2><p>Below is an example of how to integrate the Slider component into your application:</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;div className=<span class="string">&quot;-mx-[12px] px-[12px]&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">USlider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">min</span>=<span class="string">&#123;min&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">max</span>=<span class="string">&#123;max&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">initialValue</span>=<span class="string">&#123;leverage&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">onChange</span>=<span class="string">&#123;handleSliderChange&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">customPoints</span>=<span class="string">&#123;[1,</span> <span class="attr">3</span>, <span class="attr">5</span>, <span class="attr">10</span>, <span class="attr">15</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">suffix</span>=<span class="string">&quot;x&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">  /&gt;</span></span></span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">USlider</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">min</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">max</span>=<span class="string">&#123;200&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">initialValue</span>=<span class="string">&#123;100&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">customPoints</span>=<span class="string">&#123;[0,</span> <span class="attr">50</span>, <span class="attr">100</span>, <span class="attr">150</span>, <span class="attr">200</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">numFormat</span>=<span class="string">&#123;(value)</span> =&gt;</span> ((value - 100) / 100).toFixed(2)&#125;</span></span><br><span class="line"><span class="language-xml">  /&gt;</span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><video controls width="600">
  <source src="https://code-example-1255795341.cos.ap-singapore.myqcloud.com/uslider-eg.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>

<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>The custom slider component described in this post is versatile and can be easily integrated into any React application. With features like step increments, tick values, customizable ranges, suffix rendering, and value formatting, it’s a powerful tool for creating interactive and user-friendly interfaces.</p>
<p>Feel free to customize and extend the component further to meet your project’s specific requirements. Happy coding!</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>TailwindCSS</tag>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS垂直居中</title>
    <url>/2019/03/12/CSS%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/</url>
    <content><![CDATA[<h3 id="HTML-框架"><a href="#HTML-框架" class="headerlink" title="HTML 框架"></a>HTML 框架</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#box</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#child</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;child&quot;</span>&gt;</span>target<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="绝对定位-负外边距-1"><a href="#绝对定位-负外边距-1" class="headerlink" title="绝对定位 + 负外边距 1"></a>绝对定位 + 负外边距 1</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：需要知道目标元素的高度</p>
<h3 id="绝对定位-负外边距-2"><a href="#绝对定位-负外边距-2" class="headerlink" title="绝对定位 + 负外边距 2"></a>绝对定位 + 负外边距 2</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">15%</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绝对定位-transform"><a href="#绝对定位-transform" class="headerlink" title="绝对定位 + transform"></a>绝对定位 + transform</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="绝对定位-margin-auto"><a href="#绝对定位-margin-auto" class="headerlink" title="绝对定位 + margin: auto"></a>绝对定位 + margin: auto</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#child</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Decorator 装饰器模式</title>
    <url>/2021/06/21/Decorator-%E8%A3%85%E9%A5%B0%E5%99%A8%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="e-g"><a href="#e-g" class="headerlink" title="e.g."></a>e.g.</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> worker = &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">slow</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;called with &quot;</span> + x)</span><br><span class="line">    <span class="keyword">return</span> x * <span class="variable language_">this</span>.<span class="title function_">someMethod</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decorator</span>(<span class="params">func</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> cache = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (cache.<span class="title function_">has</span>(x)) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;cache hit&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> cache.<span class="title function_">get</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> result = func.<span class="title function_">call</span>(<span class="variable language_">this</span>, x)</span><br><span class="line">    cache.<span class="title function_">set</span>(x, result)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.<span class="property">slow</span> = <span class="title function_">decorator</span>(worker.<span class="property">slow</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="title function_">slow</span>(<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(worker.<span class="title function_">slow</span>(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h3 id="Injection"><a href="#Injection" class="headerlink" title="Injection"></a>Injection</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">injection</span>(<span class="params">func, ...argsBound</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> func.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...argsBound, ...args)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&quot;Edward&quot;</span>,</span><br><span class="line">  <span class="title function_">say</span>(<span class="params">time, phrase</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`[<span class="subst">$&#123;time&#125;</span>]: <span class="subst">$&#123;<span class="variable language_">this</span>.firstName&#125;</span> <span class="subst">$&#123;phrase&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="property">say</span> = <span class="title function_">injection</span>(</span><br><span class="line">  user.<span class="property">say</span>,</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getHours</span>() + <span class="string">&quot;:&quot;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getMinutes</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">user.<span class="title function_">say</span>(<span class="string">&quot;Hi&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="arrow-function"><a href="#arrow-function" class="headerlink" title="arrow function"></a>arrow function</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">defer</span>(<span class="params">f, ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, <span class="variable language_">arguments</span>), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hi, <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> deferSay = <span class="title function_">defer</span>(sayHello, <span class="number">2000</span>)</span><br><span class="line"><span class="title function_">deferSay</span>(<span class="string">&quot;Edward&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Edward&quot;</span>,</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, this is <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">defer</span> = <span class="keyword">function</span> (<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arg), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="property">hello</span> = user.<span class="property">hello</span>.<span class="title function_">defer</span>(<span class="number">1000</span>)</span><br><span class="line">user.<span class="title function_">hello</span>(<span class="string">&quot;Ejklfj&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAscript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawer HOC Component</title>
    <url>/2024/07/22/Drawer-HOC-Component/</url>
    <content><![CDATA[<h1 id="A-drawer-animation-HOC-component"><a href="#A-drawer-animation-HOC-component" class="headerlink" title="A drawer animation HOC component"></a>A drawer animation HOC component</h1><p>Requirements:</p>
<ul>
<li><code>react-native-reanimated</code>: animation</li>
<li><code>react-native-root-siblings</code>: root sibling</li>
<li>Functional component: require hooks</li>
</ul>
<p><img src="https://photograph-1255795341.cos.ap-singapore.myqcloud.com/%E5%BD%95%E5%B1%8F2024-07-22%2015.57.55.gif" alt="Drawer HOC"></p>
<span id="more"></span>

<figure class="highlight tsx"><figcaption><span>DrawerHOC.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> <span class="variable">Edward</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2024/06/12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Drawer HOC</span></span><br><span class="line"><span class="comment"> * usage: /src/test/drawerTest/DrawerWithExpandable.tsx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">AntQColors</span>, <span class="title class_">AntQSizes</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/componetsEx/DarkColorUtility&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; hp &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/index&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useEffect &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ViewStyle</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Animated</span>, &#123;</span><br><span class="line">  interpolate,</span><br><span class="line">  interpolateColor,</span><br><span class="line">  runOnJS,</span><br><span class="line">  useAnimatedStyle,</span><br><span class="line">  useSharedValue,</span><br><span class="line">  withTiming,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-native-reanimated&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">DrawerHOC</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  WrappedComponent: React.ElementType&lt;&#123; onClose: (cb: () =&gt; <span class="built_in">void</span>) =&gt; <span class="built_in">void</span> &#125;&gt;,</span></span><br><span class="line"><span class="params">  config: &#123;</span></span><br><span class="line"><span class="params">    duration?: <span class="built_in">number</span></span></span><br><span class="line"><span class="params">    styles?: &#123;</span></span><br><span class="line"><span class="params">      mask?: ViewStyle</span></span><br><span class="line"><span class="params">      drawer?: ViewStyle</span></span><br><span class="line"><span class="params">    &#125;</span></span><br><span class="line"><span class="params">  &#125;</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">Drawer</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">DURATION</span> = config.<span class="property">duration</span> || <span class="number">300</span></span><br><span class="line">    <span class="keyword">const</span> &#123; mask = &#123;&#125;, drawer = &#123;&#125; &#125; = config.<span class="property">styles</span> || &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">PAGE_HEIGHT</span> = <span class="title function_">hp</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="keyword">const</span> backgroundOpacity = <span class="title function_">useSharedValue</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">const</span> drawerShow = <span class="title function_">useSharedValue</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> drawerBackground = <span class="title function_">useAnimatedStyle</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">backgroundColor</span>: <span class="title function_">interpolateColor</span>(</span><br><span class="line">        backgroundOpacity.<span class="property">value</span>,</span><br><span class="line">        [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">        [<span class="string">&quot;rgba(0,0,0,0)&quot;</span>, <span class="string">&quot;rgba(0,0,0,0.4)&quot;</span>]</span><br><span class="line">      ),</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> drawerContent = <span class="title function_">useAnimatedStyle</span>(<span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      <span class="attr">transform</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">translateY</span>: <span class="title function_">interpolate</span>(drawerShow.<span class="property">value</span>, [<span class="number">0</span>, <span class="number">1</span>], [<span class="variable constant_">PAGE_HEIGHT</span>, <span class="number">0</span>]),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">close</span> = (<span class="params">cb?: () =&gt; <span class="built_in">void</span></span>) =&gt; &#123;</span><br><span class="line">      drawerShow.<span class="property">value</span> = <span class="title function_">withTiming</span>(<span class="number">0</span>, &#123; <span class="attr">duration</span>: <span class="variable constant_">DURATION</span> &#125;)</span><br><span class="line">      backgroundOpacity.<span class="property">value</span> = <span class="title function_">withTiming</span>(<span class="number">0</span>, &#123; <span class="attr">duration</span>: <span class="variable constant_">DURATION</span> &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cb) &#123;</span><br><span class="line">          <span class="title function_">runOnJS</span>(cb)()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      drawerShow.<span class="property">value</span> = <span class="title function_">withTiming</span>(<span class="number">1</span>, &#123; <span class="attr">duration</span>: <span class="variable constant_">DURATION</span> &#125;)</span><br><span class="line">      backgroundOpacity.<span class="property">value</span> = <span class="title function_">withTiming</span>(<span class="number">1</span>, &#123; <span class="attr">duration</span>: <span class="variable constant_">DURATION</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">open</span>()</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Animated.View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">position:</span> &quot;<span class="attr">absolute</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">top:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">left:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">right:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">bottom:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">flex:</span> <span class="attr">1</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">justifyContent:</span> &quot;<span class="attr">flex-end</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">drawerBackground</span> <span class="attr">as</span> <span class="attr">any</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">mask</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Animated.View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">padding:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">backgroundColor:</span> <span class="attr">AntQColors.MAIN_WHITE</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">drawer</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">drawerContent</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">WrappedComponent</span> <span class="attr">onClose</span>=<span class="string">&#123;close&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">Animated.View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Animated.View</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Drawer</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">DrawerHOC</span></span><br></pre></td></tr></table></figure>

<figure class="highlight tsx"><figcaption><span>Usage.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// final component</span></span><br><span class="line"><span class="title class_">CountryPickerDrawer</span> = <span class="title class_">DrawerHOC</span>(</span><br><span class="line">  <span class="function">(<span class="params">&#123; onClose &#125;</span>) =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">CountryPicker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">closeDrawer</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">        onClose(() =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          if (this.root) &#123;</span></span><br><span class="line"><span class="language-xml">            this.root.destroy()</span></span><br><span class="line"><span class="language-xml">            this.root = null</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;)</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      onCheck=&#123;async (item) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        const countryCode = item.flag.substring(5).toUpperCase()</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        this.doStartLoading()</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        const &#123; code &#125; = await (NetManager.httpService2(</span></span><br><span class="line"><span class="language-xml">          ReqAction.SetContact,</span></span><br><span class="line"><span class="language-xml">          JSON.stringify(&#123; country: countryCode &#125;)</span></span><br><span class="line"><span class="language-xml">        ) as Promise&lt;&#123; code: ErrorCode &#125;&gt;)</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        this.doStopLoading()</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        if (code === ErrorCode.OK) &#123;</span></span><br><span class="line"><span class="language-xml">          const userInfo = AppModel.instance.AuthState.userInfo</span></span><br><span class="line"><span class="language-xml">          userInfo.country = countryCode</span></span><br><span class="line"><span class="language-xml">          this.setState(&#123; countryCode &#125;)</span></span><br><span class="line"><span class="language-xml">          AppModel.instance.AuthState.setUserInfo(userInfo)</span></span><br><span class="line"><span class="language-xml">          this.doShowMsg(LANAGER_STR(&quot;common_save_succ&quot;))</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;&#125;</span></span><br><span class="line"><span class="language-xml">    /&gt;</span></span><br><span class="line">  ),</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">duration</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="attr">styles</span>: &#123;</span><br><span class="line">      <span class="attr">drawer</span>: &#123;</span><br><span class="line">        <span class="attr">backgroundColor</span>: <span class="title class_">AntQColors</span>.<span class="property">MAIN_WHITE</span>,</span><br><span class="line">        <span class="attr">borderTopLeftRadius</span>: <span class="number">8</span>,</span><br><span class="line">        <span class="attr">borderTopRightRadius</span>: <span class="number">8</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// open drawer</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">root</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">root</span> = <span class="keyword">new</span> <span class="title class_">RootSiblingsManager</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">this.CountryPickerDrawer</span> /&gt;</span></span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>HOC</tag>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Delete Service Worker on Safari</title>
    <url>/2025/03/10/Delete-Service-Worker-on-Safari/</url>
    <content><![CDATA[<h1 id="Delete-Service-Worker-on-Safari"><a href="#Delete-Service-Worker-on-Safari" class="headerlink" title="Delete Service Worker on Safari"></a>Delete Service Worker on Safari</h1><p>To delete a service worker on Safari, you can follow these steps:</p>
<ol>
<li>Open Safari Developer Console (Press Command + Option + C)</li>
<li>Copy and paste the following JavaScript code into the console:</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.<span class="property">serviceWorker</span>.<span class="title function_">getRegistrations</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">registrations</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> registration <span class="keyword">of</span> registrations) &#123;</span><br><span class="line">    registration.<span class="title function_">unregister</span>().<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Service Worker Unregistered:&quot;</span>, registration.<span class="property">scope</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>This code will:</p>
<ol>
<li>Get all registered service workers using <code>navigator.serviceWorker.getRegistrations()</code></li>
<li>Loop through each registration</li>
<li>Unregister each service worker using the <code>unregister()</code> method</li>
<li>Log a confirmation message with the scope of the unregistered service worker</li>
</ol>
<p>You can verify that the service worker has been successfully removed by:</p>
<ol>
<li>Opening Safari Developer Tools</li>
<li>Going to the Application tab</li>
<li>Checking the Service Workers section - it should now be empty</li>
</ol>
<p><strong>Note: After unregistering the service worker, you might need to close all tabs and restart Safari for the changes to take full effect.</strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Service Worker</tag>
        <tag>Debugging</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMAScript新增String方法</title>
    <url>/2020/07/24/ECMAScript%E6%96%B0%E5%A2%9EString%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="ES2017-新增"><a href="#ES2017-新增" class="headerlink" title="ES2017 新增"></a>ES2017 新增</h3><h5 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h5><p>字符串补全功能，接受两个参数，如果第二个参数为空，则默认使用空格补全。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// fill with the template</span></span><br><span class="line"><span class="string">&quot;12&quot;</span>.<span class="title function_">padStart</span>(<span class="number">3</span>, <span class="string">&quot;000&quot;</span>) <span class="comment">// &#x27;012&#x27;</span></span><br><span class="line"><span class="string">&quot;12&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">3</span>, <span class="string">&quot;000&quot;</span>) <span class="comment">// &#x27;120&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// fill with space</span></span><br><span class="line"><span class="string">&quot;12&quot;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>) <span class="comment">// &#x27;  12&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ES2019-新增"><a href="#ES2019-新增" class="headerlink" title="ES2019 新增"></a>ES2019 新增</h3><h5 id="trimStart-trimEnd"><a href="#trimStart-trimEnd" class="headerlink" title="trimStart(), trimEnd()"></a>trimStart(), trimEnd()</h5><p>与<code>String.trim()</code>的行为一致，不会修改原字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;    string    &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// str.trimLeft()</span></span><br><span class="line">str.<span class="title function_">trimStart</span>() <span class="comment">// &#x27;string    &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// str.trimRight()</span></span><br><span class="line">str.<span class="title function_">trimEnd</span>() <span class="comment">// &#x27;    string&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EIP-2535 钻石合约</title>
    <url>/2024/08/08/EIP-2535-%E9%92%BB%E7%9F%B3%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<h1 id="什么是-Diamond"><a href="#什么是-Diamond" class="headerlink" title="什么是 Diamond"></a>什么是 Diamond</h1><p>Diamond 指的是一种设计模式，称为 EIP-2535 Diamonds。这种模式用于构建可模块化和可升级的以太坊智能合约。</p>
<p><img src="/images/eip-diamond-1.jpg" alt="Diamond"></p>
<ul>
<li>模块化架构：Diamond 是一种创建单一、模块化合约（称为 Diamond）的方式，该合约将不同的功能委托给分离的、可互换的合约组件（称为 Facets）。这有助于更好地组织代码和分离关注点。</li>
<li>Facets：每个 Facet 包含特定的功能，并可以独立升级。例如，一个 Facet 可能处理用户管理，而另一个处理交易。</li>
<li>Diamond Storage：在 Diamond 模式中，合约的存储结构被设计成可以支持不同 Facets 的升级，而不影响整体合约的其他部分。</li>
</ul>
<p>对外部世界（如用户界面、其他智能合约和软件&#x2F;脚本）而言，Diamond 看起来是一个单一的智能合约，具有一个单一的以太坊地址。但在内部，它使用一组称为 Facets 的合约来处理其外部功能，这些 Facets 对外部是隐藏的。</p>
<span id="more"></span>

<p>当外部软件程序（如其他智能合约或用户界面）对 Diamond 发起函数调用时，Diamond 会检查是否有包含该函数的 Facet，如果存在，则使用该 Facet。</p>
<p>要理解 Diamonds，需要了解以下几点：</p>
<ul>
<li><strong>Diamond 是一个智能合约</strong>：其以太坊地址是外部软件与之交互的唯一地址。</li>
<li><strong>内部结构</strong>：Diamond 内部使用一组称为 Facets 的合约来处理外部函数。</li>
<li><strong>状态变量存储</strong>：所有的状态变量存储数据都保存在 Diamond 中，而不是在 Facets 中。</li>
<li><strong>数据访问</strong>：Facets 的外部函数可以直接读取和写入存储在 Diamond 中的数据。这使得 Facets 编写起来简单且节省 Gas。</li>
<li><strong>实现机制</strong>：Diamond 通常通过一个 fallback 函数实现，该函数使用 delegatecall 将外部函数调用路由到 Facets。</li>
<li><strong>外部函数</strong>：Diamond 本身通常没有任何外部函数——它使用 Facets 处理外部函数，这些函数读取&#x2F;写入 Diamond 的数据。</li>
</ul>
<p>EIP-2535 规范了添加、替换、移除函数和 Facets 的机制和合约接口，以及检查 Diamond 以了解其拥有的函数和 Facets 的方法，并记录升级。EIP-2535 使得可以编写能够与任何和所有 Diamonds 兼容或集成的软件。</p>
<p>以下是帮助可视化 Diamond 的几张图片。第一张图片展示了函数如何映射到持有函数代码的 Facets 上：</p>
<p><img src="/images/eip-diamond-2.png" alt="Diamond"></p>
<p>接下来的图片展示了所有状态变量数据都存储在 Diamond 代理合约中，而 Diamond 使用的代码来自 Facets。请注意，虽然 Facets 中的代码可以定义具有状态变量的结构体，但所有存储的值都保存在 Diamond 代理合约中，而不是在 Facets 中。该图片还显示了 Facets 可以在 Diamond 代理合约中拥有自己的数据，并且可以与其他 Facets 共享数据。这张图片只是一个示例。</p>
<p><img src="/images/eip-diamond-3.jpg" alt="Diamond"></p>
<h1 id="为-Diamond-组织-Facet"><a href="#为-Diamond-组织-Facet" class="headerlink" title="为 Diamond 组织 Facet"></a>为 Diamond 组织 Facet</h1><p>Facets 可以像文件系统一样进行组织。文件系统的常见组织方式如下：</p>
<ul>
<li><strong>相关和相似的数据放在同一个文件中</strong>：例如，将所有与用户管理相关的函数放在一个 Facet 中。</li>
<li><strong>相关和相似的文件放在同一个文件夹中</strong>：例如，将所有用户管理相关的 Facets 放在同一个 Facet 文件夹中。</li>
<li><strong>相关和相似的文件夹放在同一个父文件夹中</strong>：例如，将所有与用户管理和交易处理相关的 Facets 放在一个更大的父 Facet 文件夹中。</li>
</ul>
<p>这种组织方式有助于提高代码的模块化和可维护性，使得不同功能的 Facets 更加清晰和易于管理。</p>
<p>Diamond 的 Facets 也可以类似地进行组织：</p>
<ul>
<li><strong>相似和相关的函数放在同一个 Facet 中</strong>：例如，将所有用户管理相关的函数放在一个 Facet 中，以保持功能的集中性。</li>
<li><strong>相似和相关的 Facets 放在同一个文件夹中</strong>相似和相关的 Facets 放在同一个文件夹中：例如，将所有与用户管理相关的 Facets 放在一个特定的 Facet 文件夹中，这样可以更好地组织和管理。</li>
<li><strong>相似和相关的文件夹放在同一个父文件夹中</strong>：例如，将所有与用户管理和交易处理相关的 Facets 放在一个更大的父 Facet 文件夹中，便于整体结构的管理和扩展。</li>
</ul>
<p>例如，在实现 ERC721 代币时，可以将 ERC721 标准中的外部函数实现放在一个名为 <code>ERC721Facet</code> 的 Facet 中，而将自定义功能放在另一个 Facet 中。</p>
<p>即使 24KB 的最大合约限制被移除，我仍然会使用 EIP-2535 Diamonds，因为它提供了一种系统化的方式来组织、升级和扩展智能合约系统。</p>
<p>最初，EIP-2535 Diamonds 是为了解决 24KB 合约限制而创建的，但它的应用范围远不止于此。它提供了一个构建更大规模智能合约系统的框架，并且能够支持生产环境中不断增长的合约系统。</p>
<h1 id="确保数据准确"><a href="#确保数据准确" class="headerlink" title="确保数据准确"></a>确保数据准确</h1><p>Solidity 在合约中使用数字地址空间来存储数据。第一个状态变量存储在位置 0，下一个状态变量存储在位置 1，再下一个状态变量存储在位置 2，依此类推。</p>
<p>Diamond 的 Facets 共享相同的存储地址空间，因为它们具有相同的 Diamond，且 Facets 仅读取和写入 Diamond 中的状态变量，而不是它们自己。如果不了解这一点，你需要理解 delegatecall 的工作原理，因为所有 Facet 的外部函数都是通过 delegatecall 从 Diamond 调用的。</p>
<p>如果处理不当，这可能会引发问题。例如，假设一个 Diamond 具有两个 Facets：FacetA 和 FacetB。假设 FacetA 声明了状态变量 uint first; 和 bytes32 second;，而 FacetB 声明了状态变量 uint first; 和 string name;。</p>
<p>由于两个 Facets 都在位置 0 存储 uint first，因此它们都可以读取和写入这个变量而不会有问题。</p>
<p>但这两个 Facets 在位置 1 写入和读取的是不同的数据——‘bytes32 second’ 和 ‘string name’。它们会互相覆盖或混淆彼此的数据，因为它们在位置 1 解释和写入的数据不同。这就是为什么同一个 Diamond 的 Facets 需要以相同的顺序声明相同的状态变量，以确保它们读取和写入相同的位置。</p>
<p>要解决这个问题，需要有策略来确保 Facets 声明相同的状态变量，并保持相同的顺序。即使在进行升级时，只要有良好的策略，这通常没有问题。</p>
<h2 id="Inherited-Storage"><a href="#Inherited-Storage" class="headerlink" title="Inherited Storage"></a>Inherited Storage</h2><p>创建一个合约来声明所有 Facets 使用的状态变量，并让每个 Facet 继承这个合约（例如，命名为 Storage），是一种简单的策略。这种策略确实有效，并且在生产环境中已经成功使用。然而，它也有一些限制。</p>
<p>Inherited Storage 的限制：</p>
<ul>
<li>复用性问题： 由于状态变量是通过继承合约来管理的，这种方式可能会限制 Facets 的复用。如果一个 Facet 使用了 Inherited Storage，它可能无法与具有不同状态变量的其他 Diamond 进行重用。这使得在不同 Diamond 之间迁移或共享 Facet 变得困难。</li>
<li>命名冲突： 在大型 Diamond 中，拥有 100 个或更多状态变量时，很容易发生命名冲突。尤其是如果内部函数或局部变量与状态变量同名，就可能导致名称冲突。这种情况可能会使代码维护变得复杂。</li>
</ul>
<p>可能的解决方案：</p>
<ul>
<li>命名约定：使用代码命名约定来防止命名冲突。例如，为状态变量、内部函数和局部变量使用不同的前缀或命名规则，以减少命名冲突的风险。</li>
<li>模块化存储：考虑使用模块化存储策略，将状态变量分组到多个存储合约中，而不是将所有变量放在一个合约中。这种方式可以提高复用性，并减少命名冲突的风险。</li>
<li>更灵活的存储管理：探索其他存储管理策略，例如动态存储管理合约，通过配置和管理存储布局来提高 Facets 的复用性。</li>
</ul>
<p>通过这些改进措施，可以克服 Inherited Storage 的一些局限性，同时提高代码的复用性和维护性。</p>
<h2 id="Diamond-Storage"><a href="#Diamond-Storage" class="headerlink" title="Diamond Storage"></a>Diamond Storage</h2><p>不同 Diamond 的 Facets 实际上并不需要声明相同的状态变量或以相同的顺序存储状态变量，只要 Facets 存储数据的位置不同即可。</p>
<p>正如前面提到的，Solidity 自动将状态变量存储在从 0 开始并递增的存储位置上。然而，我们并不一定要使用 Solidity 的默认存储布局机制。我们可以指定在地址空间中存储数据的起始位置，因此可以为不同的 Facets 指定不同的存储位置，从而避免不同 Facets 中不同状态变量发生存储位置冲突。这就是 Diamond Storage 的工作原理。</p>
<p>我们可以通过对唯一字符串进行哈希来获取一个随机的存储位置，并在该位置存储一个结构体。该结构体可以包含我们想要的所有状态变量。唯一字符串可以充当特定功能的命名空间。</p>
<p>例如，我们可以实现一个 ERC721Facet。这个 Facet 可以在位置 keccak256(“com.myproject.erc721”); 存储一个名为 ERC721Storage 的结构体。这个结构体可以包含所有与 ERC721 相关的状态变量，这些变量是 ERC721Facet 读写的，并且不包含其他变量。这样做有几个优点：</p>
<ul>
<li>Facet 的复用性：ERC721Facet 可以仅部署一次，并可以与多个使用不同状态变量的 Diamond 配合使用。这种复用性使得开发和部署更加高效。</li>
<li>简洁性：ERC721Facet 不会被不相关的状态变量声明所 clutter，保持了代码的简洁性和可维护性。只包含它实际使用的状态变量，从而避免了混乱和潜在的命名冲突。</li>
</ul>
<p>通过这种方式，可以有效管理 Diamond 的状态变量，确保 Facets 的高效和清晰。</p>
<h2 id="AppStorage"><a href="#AppStorage" class="headerlink" title="AppStorage"></a>AppStorage</h2><p>AppStorage 是一种类似于 Inherited Storage 的机制，但它解决了名称冲突的问题，在实际应用中，这一点非常有用。AppStorage 的设计不仅避免了状态变量与内部函数或局部变量的名称冲突，还通过结构化的方式提高了代码的可读性。如果你注重代码的可读性，那么你会喜欢 AppStorage。</p>
<p>AppStorage 强制使用命名或访问约定，避免了状态变量与其他元素名称冲突的问题。</p>
<p>AppStorage 的工作原理如下：</p>
<ul>
<li>定义结构体：在 Solidity 文件中定义一个名为 AppStorage 的结构体。该结构体包含将在 Facets 之间共享的状态变量。</li>
<li>使用结构体：Facet 导入 AppStorage 结构体，并将 AppStorage internal s; 声明为 Facet 中的第一个也是唯一的状态变量。这样，Facet 中的所有状态变量都通过结构体进行访问。例如，使用 s.myFirstVariable、s.mySecondVariable 等来访问状态变量。</li>
</ul>
<figure class="highlight plaintext"><figcaption><span>AppStorage.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">// AppStorage.sol</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">contract AppStorage &#123;</span><br><span class="line">   struct Storage &#123;</span><br><span class="line">       uint256 myFirstVariable;</span><br><span class="line">       uint256 mySecondVariable;</span><br><span class="line">       // Add other state variables here</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><figcaption><span>MyFacet.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">// MyFacet.sol</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">import &quot;./AppStorage.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract MyFacet &#123;</span><br><span class="line">    AppStorage.Storage internal s;</span><br><span class="line"></span><br><span class="line">    function setFirstVariable(uint256 _value) external &#123;</span><br><span class="line">        s.myFirstVariable = _value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getFirstVariable() external view returns (uint256) &#123;</span><br><span class="line">        return s.myFirstVariable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Additional functions interacting with `s` here</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优势</strong>：</p>
<ul>
<li><strong>避免名称冲突</strong>：通过将所有状态变量放入一个结构体中，避免了与内部函数或局部变量的名称冲突。</li>
<li><strong>提高代码可读性</strong>：结构化的方式使得状态变量的管理更加清晰，使代码更容易阅读和维护。</li>
</ul>
<p>AppStorage 是一种有效的策略，用于管理和组织 Facets 中的状态变量，特别适合需要高代码可读性的场景。</p>
<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><ul>
<li>diamond: 合约本体，实际上是一个代理合约</li>
<li>facet: 业务合约</li>
<li>loupe: 也是一个 facet，用于查询 diamond 提供的 facet 以及 facet 提供的所有函数</li>
<li>diamondCut: 用于增加&#x2F;删除&#x2F;修改 diamond 上的 facet 的函数</li>
</ul>
<h2 id="Loupe"><a href="#Loupe" class="headerlink" title="Loupe"></a>Loupe</h2><figure class="highlight plaintext"><figcaption><span>IDiamondLoupe.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">/******************************************************************************\</span><br><span class="line">* Author: Nick Mudge &lt;nick@perfectabstractions.com&gt; (https://twitter.com/mudgen)</span><br><span class="line">* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535</span><br><span class="line">/******************************************************************************/</span><br><span class="line"></span><br><span class="line">// A loupe is a small magnifying glass used to look at diamonds.</span><br><span class="line">interface IDiamondLoupe &#123;</span><br><span class="line"></span><br><span class="line">    struct Facet &#123;</span><br><span class="line">        address facetAddress;</span><br><span class="line">        bytes4[] functionSelectors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 获取某个 diamond 的所有 facet</span><br><span class="line">    function facets() external view returns (Facet[] memory facets_);</span><br><span class="line"></span><br><span class="line">    /// 获取某个 facet 的所有函数选择器</span><br><span class="line">    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);</span><br><span class="line"></span><br><span class="line">    /// 获取某个 diamond 的所有 facet 地址</span><br><span class="line">    function facetAddresses() external view returns (address[] memory facetAddresses_);</span><br><span class="line"></span><br><span class="line">    /// 获取某个 diamond 的某个函数选择器对应的 facet 地址</span><br><span class="line">    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="DiamondCut"><a href="#DiamondCut" class="headerlink" title="DiamondCut"></a>DiamondCut</h2><figure class="highlight plaintext"><figcaption><span>IDiamondCut.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">/******************************************************************************\</span><br><span class="line">* Author: Nick Mudge &lt;nick@perfectabstractions.com&gt; (https://twitter.com/mudgen)</span><br><span class="line">* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535</span><br><span class="line">/******************************************************************************/</span><br><span class="line"></span><br><span class="line">interface IDiamondCut &#123;</span><br><span class="line">    enum FacetCutAction &#123;Add, Replace, Remove&#125;</span><br><span class="line">    // Add=0, Replace=1, Remove=2</span><br><span class="line"></span><br><span class="line">    struct FacetCut &#123;</span><br><span class="line">        address facetAddress;</span><br><span class="line">        FacetCutAction action;</span><br><span class="line">        bytes4[] functionSelectors;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /// 增加/替换/删除 facet</span><br><span class="line">    function diamondCut(</span><br><span class="line">        FacetCut[] calldata _diamondCut,</span><br><span class="line">        address _init,</span><br><span class="line">        bytes calldata _calldata</span><br><span class="line">    ) external;</span><br><span class="line"></span><br><span class="line">    /// 每次调用 DiamondCut 都需要触发该事件</span><br><span class="line">    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Diamond"><a href="#Diamond" class="headerlink" title="Diamond"></a>Diamond</h2><figure class="highlight plaintext"><figcaption><span>LibDiamond.sol</span></figcaption><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^0.8.0;</span><br><span class="line"></span><br><span class="line">/******************************************************************************\</span><br><span class="line">* Author: Nick Mudge &lt;nick@perfectabstractions.com&gt; (https://twitter.com/mudgen)</span><br><span class="line">* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535</span><br><span class="line">/******************************************************************************/</span><br><span class="line">import &#123; IDiamondCut &#125; from &quot;../interfaces/IDiamondCut.sol&quot;;</span><br><span class="line"></span><br><span class="line">// EIP2535 diamond 标准里 loupe 函数是必须的</span><br><span class="line"></span><br><span class="line">error InitializationFunctionReverted(address _initializationContractAddress, bytes _calldata);</span><br><span class="line"></span><br><span class="line">library LibDiamond &#123;</span><br><span class="line">    // 32位的 keccak 哈希值，用于作为 diamond 存储位置的字符串。</span><br><span class="line">    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(&quot;diamond.standard.diamond.storage&quot;);</span><br><span class="line"></span><br><span class="line">    struct FacetAddressAndPosition &#123;</span><br><span class="line">        address facetAddress;</span><br><span class="line">        uint96 functionSelectorPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct FacetFunctionSelectors &#123;</span><br><span class="line">        bytes4[] functionSelectors;</span><br><span class="line">        uint256 facetAddressPosition;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct DiamondStorage &#123;</span><br><span class="line">        // 函数选择器到 facet 地址和选择器在 facetFunctionSelectors.selectors 数组中的位置的映射</span><br><span class="line">        mapping(bytes4 =&gt; FacetAddressAndPosition) selectorToFacetAndPosition;</span><br><span class="line"></span><br><span class="line">        // facet 地址到 facet 函数选择器的映射</span><br><span class="line">        mapping(address =&gt; FacetFunctionSelectors) facetFunctionSelectors;</span><br><span class="line"></span><br><span class="line">        // facet 地址</span><br><span class="line">        address[] facetAddresses;</span><br><span class="line"></span><br><span class="line">        // 查询某个合约是否实现某个接口。用于实现 ERC-165。</span><br><span class="line">        mapping(bytes4 =&gt; bool) supportedInterfaces;</span><br><span class="line"></span><br><span class="line">        // 合约所有者</span><br><span class="line">        address contractOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function diamondStorage() internal pure returns (DiamondStorage storage ds) &#123;</span><br><span class="line">        bytes32 position = DIAMOND_STORAGE_POSITION;</span><br><span class="line">        // 将结构体存储槽分配给存储位置</span><br><span class="line">        assembly &#123;</span><br><span class="line">            ds.slot := position</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);</span><br><span class="line"></span><br><span class="line">    function setContractOwner(address _newOwner) internal &#123;</span><br><span class="line">        DiamondStorage storage ds = diamondStorage();</span><br><span class="line">        address previousOwner = ds.contractOwner;</span><br><span class="line">        ds.contractOwner = _newOwner;</span><br><span class="line">        emit OwnershipTransferred(previousOwner, _newOwner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function contractOwner() internal view returns (address contractOwner_) &#123;</span><br><span class="line">        contractOwner_ = diamondStorage().contractOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function enforceIsContractOwner() internal view &#123;</span><br><span class="line">        require(msg.sender == diamondStorage().contractOwner, &quot;LibDiamond: Must be contract owner&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);</span><br><span class="line"></span><br><span class="line">    // 内部函数版本的 diamondCut</span><br><span class="line">    function diamondCut(</span><br><span class="line">        IDiamondCut.FacetCut[] memory _diamondCut,</span><br><span class="line">        address _init,</span><br><span class="line">        bytes memory _calldata</span><br><span class="line">    ) internal &#123;</span><br><span class="line">        for (uint256 facetIndex; facetIndex &lt; _diamondCut.length; facetIndex++) &#123;</span><br><span class="line">            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;</span><br><span class="line">            if (action == IDiamondCut.FacetCutAction.Add) &#123;</span><br><span class="line">                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);</span><br><span class="line">            &#125; else if (action == IDiamondCut.FacetCutAction.Replace) &#123;</span><br><span class="line">                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);</span><br><span class="line">            &#125; else if (action == IDiamondCut.FacetCutAction.Remove) &#123;</span><br><span class="line">                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                revert(&quot;LibDiamondCut: Incorrect FacetCutAction&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        emit DiamondCut(_diamondCut, _init, _calldata);</span><br><span class="line">        initializeDiamondCut(_init, _calldata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal &#123;</span><br><span class="line">        require(_functionSelectors.length &gt; 0, &quot;LibDiamondCut: No selectors in facet to cut&quot;);</span><br><span class="line">        DiamondStorage storage ds = diamondStorage();</span><br><span class="line">        require(_facetAddress != address(0), &quot;LibDiamondCut: Add facet can&#x27;t be address(0)&quot;);</span><br><span class="line">        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);</span><br><span class="line">        // 如果 facet 地址不存在，则添加</span><br><span class="line">        if (selectorPosition == 0) &#123;</span><br><span class="line">            addFacet(ds, _facetAddress);</span><br><span class="line">        &#125;</span><br><span class="line">        for (uint256 selectorIndex; selectorIndex &lt; _functionSelectors.length; selectorIndex++) &#123;</span><br><span class="line">            bytes4 selector = _functionSelectors[selectorIndex];</span><br><span class="line">            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;</span><br><span class="line">            require(oldFacetAddress == address(0), &quot;LibDiamondCut: Can&#x27;t add function that already exists&quot;);</span><br><span class="line">            addFunction(ds, selector, selectorPosition, _facetAddress);</span><br><span class="line">            selectorPosition++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal &#123;</span><br><span class="line">        require(_functionSelectors.length &gt; 0, &quot;LibDiamondCut: No selectors in facet to cut&quot;);</span><br><span class="line">        DiamondStorage storage ds = diamondStorage();</span><br><span class="line">        require(_facetAddress != address(0), &quot;LibDiamondCut: Add facet can&#x27;t be address(0)&quot;);</span><br><span class="line">        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);</span><br><span class="line">        // 如果 facet 地址不存在，则添加</span><br><span class="line">        if (selectorPosition == 0) &#123;</span><br><span class="line">            addFacet(ds, _facetAddress);</span><br><span class="line">        &#125;</span><br><span class="line">        for (uint256 selectorIndex; selectorIndex &lt; _functionSelectors.length; selectorIndex++) &#123;</span><br><span class="line">            bytes4 selector = _functionSelectors[selectorIndex];</span><br><span class="line">            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;</span><br><span class="line">            require(oldFacetAddress != _facetAddress, &quot;LibDiamondCut: Can&#x27;t replace function with same function&quot;);</span><br><span class="line">            removeFunction(ds, oldFacetAddress, selector);</span><br><span class="line">            addFunction(ds, selector, selectorPosition, _facetAddress);</span><br><span class="line">            selectorPosition++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal &#123;</span><br><span class="line">        require(_functionSelectors.length &gt; 0, &quot;LibDiamondCut: No selectors in facet to cut&quot;);</span><br><span class="line">        DiamondStorage storage ds = diamondStorage();</span><br><span class="line">        // 如果 facet 地址不存在，则不做任何操作并返回</span><br><span class="line">        require(_facetAddress == address(0), &quot;LibDiamondCut: Remove facet address must be address(0)&quot;);</span><br><span class="line">        for (uint256 selectorIndex; selectorIndex &lt; _functionSelectors.length; selectorIndex++) &#123;</span><br><span class="line">            bytes4 selector = _functionSelectors[selectorIndex];</span><br><span class="line">            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;</span><br><span class="line">            removeFunction(ds, oldFacetAddress, selector);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function addFacet(DiamondStorage storage ds, address _facetAddress) internal &#123;</span><br><span class="line">        enforceHasContractCode(_facetAddress, &quot;LibDiamondCut: New facet has no code&quot;);</span><br><span class="line">        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;</span><br><span class="line">        ds.facetAddresses.push(_facetAddress);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal &#123;</span><br><span class="line">        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;</span><br><span class="line">        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);</span><br><span class="line">        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal &#123;</span><br><span class="line">        require(_facetAddress != address(0), &quot;LibDiamondCut: Can&#x27;t remove function that doesn&#x27;t exist&quot;);</span><br><span class="line">        // immutable function 指的是定义在 diamond 里的函数，不能被修改。</span><br><span class="line">        require(_facetAddress != address(this), &quot;LibDiamondCut: Can&#x27;t remove immutable function&quot;);</span><br><span class="line">        // 选择器位置前移，然后删除最后一个选择器</span><br><span class="line">        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;</span><br><span class="line">        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;</span><br><span class="line">        // 如果不相同，则替换 _selector 与最后一个选择器</span><br><span class="line">        if (selectorPosition != lastSelectorPosition) &#123;</span><br><span class="line">            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];</span><br><span class="line">            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;</span><br><span class="line">            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);</span><br><span class="line">        &#125;</span><br><span class="line">        // 删除最后一个选择器</span><br><span class="line">        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();</span><br><span class="line">        delete ds.selectorToFacetAndPosition[_selector];</span><br><span class="line"></span><br><span class="line">        // 如果没有选择器了，则删除 facet 地址</span><br><span class="line">        if (lastSelectorPosition == 0) &#123;</span><br><span class="line">            // replace facet address with last facet address and delete last facet address</span><br><span class="line">            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;</span><br><span class="line">            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;</span><br><span class="line">            if (facetAddressPosition != lastFacetAddressPosition) &#123;</span><br><span class="line">                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];</span><br><span class="line">                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;</span><br><span class="line">                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;</span><br><span class="line">            &#125;</span><br><span class="line">            ds.facetAddresses.pop();</span><br><span class="line">            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function initializeDiamondCut(address _init, bytes memory _calldata) internal &#123;</span><br><span class="line">        if (_init == address(0)) &#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        enforceHasContractCode(_init, &quot;LibDiamondCut: _init address has no code&quot;);</span><br><span class="line">        (bool success, bytes memory error) = _init.delegatecall(_calldata);</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            if (error.length &gt; 0) &#123;</span><br><span class="line">                // bubble up error</span><br><span class="line">                /// @solidity memory-safe-assembly</span><br><span class="line">                assembly &#123;</span><br><span class="line">                    let returndata_size := mload(error)</span><br><span class="line">                    revert(add(32, error), returndata_size)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                revert InitializationFunctionReverted(_init, _calldata);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view &#123;</span><br><span class="line">        uint256 contractSize;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            contractSize := extcodesize(_contract)</span><br><span class="line">        &#125;</span><br><span class="line">        require(contractSize &gt; 0, _errorMessage);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现方式：<a href="https://github.com/mudgen/Diamond">Diamond</a></p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Web3</tag>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>CNN: 比特币是过去十年最好投资</title>
    <url>/2019/12/20/CNN-%E6%AF%94%E7%89%B9%E5%B8%81%E6%98%AF%E8%BF%87%E5%8E%BB%E5%8D%81%E5%B9%B4%E6%9C%80%E5%A5%BD%E6%8A%95%E8%B5%84/</url>
    <content><![CDATA[<h1 id="The-best-investment-of-the-decade-turned-1-into-90-000"><a href="#The-best-investment-of-the-decade-turned-1-into-90-000" class="headerlink" title="The best investment of the decade turned $1 into $90,000"></a>The best investment of the decade turned $1 into $90,000</h1><p>The decade is almost over — and one incredibly volatile investment stood out from all the rest as the best of the 2010s. Want to guess what it was?</p>
<p style="font-size: 2em; text-align: center; font-weight: blod; color: red; text-shadow: 1px 1px 2px black;">Bitcoin</p>
<span id="more"></span>
According to a recent report by Bank of America Securities, if you invested $1 in bitcoin at the start of the decade, it would now be worth more than $90,000.

<p>A bitcoin is currently valued at about $7,000. While that’s still significantly below its peak price of just under $20,000 two years ago, it’s substantially higher than the fractions of a penny that one bitcoin cost at the beginning of the Twenty-Teens.</p>
<p>Bitcoin remains a highly speculative investment, but it has soared during the past decade as it emerged as the most-popular and widely accepted cryptocurrency.</p>
<p>More retailers are accepting bitcoin as a form of payment, and several investment firms and exchanges have launched futures trading for bitcoin, a move that helped legitimize it.</p>
<p>And Facebook’s planned launch of the Libra digital currency initiative has also further validated bitcoin and other crytpocurrencies in the minds of many investors.</p>
<p>The BofA report lists several other fun facts about what’s been a wild decade for the markets — one that has seen stocks recover from the depths of the Great Recession and hit new highs despite a trade war between the United States and China, attacks on the Federal Reserve by President Trump, Brexit concerns and a slowdown in Europe as well as continued malaise in Japan.</p>
<h1 id="Go-USA-But-hope-you-avoided-Myanmar-and-Greece"><a href="#Go-USA-But-hope-you-avoided-Myanmar-and-Greece" class="headerlink" title="Go USA! But hope you avoided Myanmar and Greece"></a>Go USA! But hope you avoided Myanmar and Greece</h1><p>Although bitcoin has been the star investment of the 2010s, anybody stuck with a spare kyat — the local currency of Myanmar — won’t be too happy.</p>
<p>Ethnic conflicts, violence and instability in the nation formerly known as Burma have left a dollar invested in a kyat at the beginning of the decade worth just 4 tenths of one US cent today.</p>
<p>Turning to stocks, Greece was not the word. The Mediterranean nation continued to struggle in the wake of its debt crisis. BofA investment strategists Michael Hartnett and Tommy Ricketts noted in the report that $1 dollar invested in the Greek equity market in 2010 is now worth only 7 cents.</p>
<p>The United States was the best stock market in the world, with $1 in American stocks now valued at about $3.46. That’s a gain of nearly 250%.</p>
<p>US bonds were also the best performers in fixed income. A 30-year Treasury that was worth $1 in 2010 is now valued at about $2.08. But Greece’s neighbor Turkey had the worst bond of the decade. A dollar in benchmark Turkish bonds at the beginning of 2010 is now worth only 61 cents.</p>
<p>And many bonds no longer generate any income for investors at all.</p>
<h1 id="Negative-interest-rates-have-been-good-for-gold-But-oil-has-languished"><a href="#Negative-interest-rates-have-been-good-for-gold-But-oil-has-languished" class="headerlink" title="Negative interest rates have been good for gold. But oil has languished"></a>Negative interest rates have been good for gold. But oil has languished</h1><p>Several central banks around the globe have slashed interest rates to below zero to try and jumpstart sluggish economies. As a result, BofA said that 2019 had $17 trillion’s worth of sovereign debt sporting a negative yield. In 2010, no bonds had negative yields.</p>
<p>Speaking of central banks, it may seem like US Fed chairs Ben Bernanke, Janet Yellen and Jerome Powell have moved interest rates a lot during the past decade. But they have nothing on Brazil. The Brazilian central bank was the most active — with 25 rate cuts and 24 rate hikes since 2010.</p>
<p>The Bank of Japan was the quietest central bank. It lowered rates once in the past ten years — to negative territory in 2016.</p>
<p>As interest rates have fallen, investors have flocked to gold, which was the top commodity of the 2010s. $1 of gold in 2010 is now worth $1.34. But crude oil was the worst commodity. A dollar’s worth of oil is now valued at just 74 cents.</p>
<p>The drop in oil prices, in part because of sluggish demand and more supply from more American shale producers, is a key reason why energy stocks were among the biggest dogs in the S&amp;P 500 during the past decade as well.</p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>News</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6 Class</title>
    <url>/2021/07/02/ES6-Class/</url>
    <content><![CDATA[<h3 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class factory</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">classFactory</span>(<span class="params">phone</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">class</span> &#123;</span><br><span class="line">    <span class="title function_">getName</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> phone</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> _187 = <span class="title function_">classFactory</span>(<span class="string">&quot;18720128815&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title function_">_187</span>().<span class="title function_">getName</span>())</span><br></pre></td></tr></table></figure>

<h3 id="Calculated-attribute-name"><a href="#Calculated-attribute-name" class="headerlink" title="Calculated attribute name"></a>Calculated attribute name</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  [<span class="string">&quot;say&quot;</span> + <span class="string">&quot;Hi&quot;</span>]() &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hi&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">User</span>()[<span class="string">&quot;sayHi&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="Class-field"><a href="#Class-field" class="headerlink" title="Class field"></a>Class field</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// class field</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  name = <span class="string">&quot;Edward&quot;</span> <span class="comment">// is not at the prototype</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> <span class="title class_">User</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(user.<span class="property">name</span>) <span class="comment">// Edward</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">User</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="Extends-—-How-the-super-run"><a href="#Extends-—-How-the-super-run" class="headerlink" title="Extends — How the super run"></a>Extends — How the <code>super</code> run</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> animal = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Animal&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; eat&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> rabbit = &#123;</span><br><span class="line">  <span class="attr">__proto__</span>: animal, <span class="comment">// extends animal</span></span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">eat</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> err = &#123;</span><br><span class="line">  <span class="attr">__proto__</span>: rabbit, <span class="comment">// extends rabbit</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;err obj&quot;</span>,</span><br><span class="line">  <span class="title function_">eat</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">eat</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// super.eat() -&gt; [[Rabbit.prototype]].eat</span></span><br><span class="line"><span class="comment">// -&gt; super.eat -&gt; [[Animal.prototype]].eat</span></span><br><span class="line"><span class="comment">// this -&gt; err</span></span><br><span class="line">err.<span class="title function_">eat</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rabbit</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>) <span class="comment">// class extends link</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Rabbit</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Animal</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// prototype extends link</span></span><br></pre></td></tr></table></figure>

<h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><p>change the basic class</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Edward&quot;</span>,</span><br><span class="line">  <span class="title function_">hello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`hi <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, this is <span class="subst">$&#123;name&#125;</span>`</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">defer</span> = <span class="keyword">function</span> (<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> f = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arg), ms)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">user.<span class="property">hello</span> = user.<span class="property">hello</span>.<span class="title function_">defer</span>(<span class="number">1000</span>)</span><br><span class="line">user.<span class="title function_">hello</span>(<span class="string">&quot;Ejklfj&quot;</span>) <span class="comment">// will delay 1000ms</span></span><br></pre></td></tr></table></figure>

<h3 id="Magic-of-the-instance-of"><a href="#Magic-of-the-instance-of" class="headerlink" title="Magic of the instance of"></a>Magic of the instance of</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="property">canEat</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">canEat</span>: <span class="literal">true</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj <span class="keyword">instanceof</span> <span class="title class_">Animal</span>) <span class="comment">// it will find from the [[Prototype]]</span></span><br></pre></td></tr></table></figure>

<h3 id="Static"><a href="#Static" class="headerlink" title="Static"></a>Static</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">staticMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === <span class="title class_">User</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Article</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">title, date</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">title</span> = title</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">date</span> = date</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">compare</span>(<span class="params">articleA, articleB</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> articleA.<span class="property">date</span> - articleB.<span class="property">date</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> articles = [</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Article</span>(<span class="string">&quot;HTML&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">1</span>, <span class="number">1</span>)),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Article</span>(<span class="string">&quot;Css&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2019</span>, <span class="number">0</span>, <span class="number">1</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">articles.<span class="title function_">sort</span>(<span class="title class_">Article</span>.<span class="property">compare</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(articles)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>EventUtil.js</title>
    <url>/2018/11/01/EventUtil-js/</url>
    <content><![CDATA[<h3 id="EventUtil"><a href="#EventUtil" class="headerlink" title="EventUtil"></a>EventUtil</h3><p>为了在不同的浏览器中处理相同的事件，需要编写一段可以兼容大部分浏览器的代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EventUtil</span> = &#123;</span><br><span class="line">  <span class="attr">addHandler</span>: <span class="keyword">function</span> (<span class="params">element, type, handler</span>) &#123;</span><br><span class="line">    <span class="comment">//添加事件</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">addEventListener</span>(type, handler, <span class="literal">false</span>) <span class="comment">//使用DOM2级方法添加事件</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">      <span class="comment">//使用IE方法添加事件</span></span><br><span class="line">      element.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">&quot;on&quot;</span> + type] = handler <span class="comment">//使用DOM0级方法添加事件</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">removeHandler</span>: <span class="keyword">function</span> (<span class="params">element, type, handler</span>) &#123;</span><br><span class="line">    <span class="comment">//取消事件</span></span><br><span class="line">    <span class="keyword">if</span> (element.<span class="property">removeEventListener</span>) &#123;</span><br><span class="line">      element.<span class="title function_">removeEventListener</span>(type, handler, <span class="literal">false</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.<span class="property">detachEvent</span>) &#123;</span><br><span class="line">      element.<span class="title function_">detachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      element[<span class="string">&quot;on&quot;</span> + type] = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getEvent</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//使用这个方法跨浏览器取得event对象</span></span><br><span class="line">    <span class="keyword">return</span> event ? event : <span class="variable language_">window</span>.<span class="property">event</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getTarget</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//返回事件的实际目标</span></span><br><span class="line">    <span class="keyword">return</span> event.<span class="property">target</span> || event.<span class="property">srcElement</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">preventDefault</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//阻止事件的默认行为</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">preventDefault</span>) &#123;</span><br><span class="line">      event.<span class="title function_">preventDefault</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.<span class="property">returnValue</span> = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">stopPropagation</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//立即停止事件在DOM中的传播</span></span><br><span class="line">    <span class="comment">//避免触发注册在document.body上面的事件处理程序</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">stopPropagation</span>) &#123;</span><br><span class="line">      event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      event.<span class="property">cancelBubble</span> = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getRelatedTarget</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//获取mouseover和mouseout相关元素</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">relatedTarget</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">relatedTarget</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">toElement</span>) &#123;</span><br><span class="line">      <span class="comment">//兼容IE8-</span></span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">toElement</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (event.<span class="property">formElement</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">formElement</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getButton</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//获取mousedown或mouseup按下或释放的按钮是鼠标中的哪一个</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">implementation</span>.<span class="title function_">hasFeature</span>(<span class="string">&quot;MouseEvents&quot;</span>, <span class="string">&quot;2.0&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">button</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">switch</span> (</span><br><span class="line">        event.<span class="property">button</span> <span class="comment">//将IE模型下的button属性映射为DOM模型下的button属性</span></span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">0</span> <span class="comment">//按下的是鼠标主按钮</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">2</span> <span class="comment">//按下的是中间的鼠标按钮</span></span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">          <span class="keyword">return</span> <span class="number">1</span> <span class="comment">//鼠标次按钮</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getWheelDelta</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//获取表示鼠标滚轮滚动方向的数值</span></span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">wheelDelta</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">wheelDelta</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> -event.<span class="property">detail</span> * <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">getCharCode</span>: <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="comment">//以跨浏览器取得相同的字符编码，需在keypress事件中使用</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> event.<span class="property">charCode</span> == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">charCode</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> event.<span class="property">keyCode</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Clash Service Linux Config</title>
    <url>/2020/12/19/Clash-Service-Linux-Config/</url>
    <content><![CDATA[<h3 id="config-clash-service"><a href="#config-clash-service" class="headerlink" title="config clash.service"></a>config clash.service</h3><p>file path: <code>/etc/systemd/system</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Clash service</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=edward</span><br><span class="line">ExecStart=/usr/bin/clash -d /home/edward/.config/clash &gt;&gt; /home/edward/.config/clash/clash.log</span><br><span class="line">Restart=on-failure</span><br><span class="line">RestartPreventExitStatus=23</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<ul>
<li>start: <code>systemctl start clash</code></li>
<li>stop: <code>systemctl stop clash</code></li>
<li>enable(start when system start): <code>systemctl enable clash</code></li>
<li>disable: <code>systemctl disable clash</code></li>
<li>status: <code>systemctl status clash</code></li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Clash</tag>
        <tag>Linux</tag>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>Fix ERR_OSSL_EVP_UNSUPPORTED In React Native</title>
    <url>/2024/10/18/Fix-ERR-OSSL-EVP-UNSUPPORTED-In-React-Native/</url>
    <content><![CDATA[<h1 id="Why-is-this-error-occurring"><a href="#Why-is-this-error-occurring" class="headerlink" title="Why is this error occurring?"></a>Why is this error occurring?</h1><p>The ERR_OSSL_EVP_UNSUPPORTED error in a React JS application typically arises due to an underlying issue with the version of Node.js and OpenSSL being used. This error is commonly encountered when certain cryptographic algorithms or keys are not supported by the OpenSSL version bundled with the Node.js installation.</p>
<h1 id="How-can-I-fix-this-error"><a href="#How-can-I-fix-this-error" class="headerlink" title="How can I fix this error?"></a>How can I fix this error?</h1><p>Node.js 17 has a new option called –openssl-legacy-provider. This option lets you go back to using the old way of doing things until you can update your code to work with the new rules.</p>
<h2 id="package-json-file"><a href="#package-json-file" class="headerlink" title="package.json file"></a>package.json file</h2><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node --openssl-legacy-provider index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="set-environment-variable"><a href="#set-environment-variable" class="headerlink" title="set environment variable"></a>set environment variable</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> NODE_OPTIONS=--openssl-legacy-provider</span><br></pre></td></tr></table></figure>

<h2 id="change-it-in-the-gradle-file"><a href="#change-it-in-the-gradle-file" class="headerlink" title="change it in the gradle file"></a>change it in the gradle file</h2><figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">project</span>.ext.react = [</span><br><span class="line">    nodeExecutableAndArgs: [<span class="string">&quot;node&quot;</span>, <span class="string">&quot;--openssl-legacy-provider&quot;</span>]</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="change-it-in-the-Xcode-build-settings"><a href="#change-it-in-the-Xcode-build-settings" class="headerlink" title="change it in the Xcode build settings"></a>change it in the Xcode build settings</h2><figure class="highlight plaintext"><figcaption><span>project.pbxproj</span></figcaption><table><tr><td class="code"><pre><span class="line">buildSettings = &#123;</span><br><span class="line">  NODE_OPTIONS = &quot;--openssl-legacy-provider&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="After-changes-try-running-the-application-again-Or-you-also-need-to-reinstall-the-dependencies"><a href="#After-changes-try-running-the-application-again-Or-you-also-need-to-reinstall-the-dependencies" class="headerlink" title="After changes, try running the application again. Or you also need to reinstall the dependencies."></a>After changes, try running the application again. Or you also need to reinstall the dependencies.</h1>]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 3.27.1 unwanted padding bug</title>
    <url>/2025/01/02/Flutter-3-27-1-unwanted-padding-bug/</url>
    <content><![CDATA[<p><strong>Fond some unwanted padding when there is no system intrusion.</strong></p>
<p>screenshot:</p>
<table>
<thead>
<tr>
<th align="center">SaveArea:auto</th>
<th align="center">SaveArea(bottom: false)</th>
<th align="center">SafeArea(bottom:false) with EdgeInserts.zero</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="/images/frontend/flutter_unwanted_padding_1.png" alt="flutter-3-27-1-unwanted-padding-bug-1"></td>
<td align="center"><img src="/images/frontend/flutter_unwanted_padding_2.png" alt="flutter-3-27-1-unwanted-padding-bug-2"></td>
<td align="center"><img src="/images/frontend/flutter_unwanted_padding_3.png" alt="flutter-3-27-1-unwanted-padding-bug-3"></td>
</tr>
</tbody></table>
<span id="more"></span>

<p>demo code:</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() &#123;</span><br><span class="line">  runApp(<span class="keyword">const</span> MyApp());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> MyApp(&#123;Key? key&#125;) : <span class="keyword">super</span>(key: key);</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">        title: <span class="string">&#x27;Flutter Demo&#x27;</span>,</span><br><span class="line">        theme: ThemeData(</span><br><span class="line">          primarySwatch: Colors.blue,</span><br><span class="line">        ),</span><br><span class="line">        home: DemopagePage());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DemopagePage</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  DemopagePage(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  Widget _buildView() &#123;</span><br><span class="line">    <span class="keyword">return</span> Column(</span><br><span class="line">      children: [</span><br><span class="line">        Container(</span><br><span class="line">          decoration:</span><br><span class="line">              BoxDecoration(border: Border.all(color: Colors.black, width: <span class="number">1</span>)),</span><br><span class="line">          child: Column(</span><br><span class="line">            crossAxisAlignment: CrossAxisAlignment.start,</span><br><span class="line">            children: [</span><br><span class="line">              <span class="keyword">const</span> Text(</span><br><span class="line">                <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">              ),</span><br><span class="line">              ListView.builder(</span><br><span class="line">                  shrinkWrap: <span class="keyword">true</span>,</span><br><span class="line">                  physics: <span class="keyword">const</span> NeverScrollableScrollPhysics(),</span><br><span class="line">                  itemCount: <span class="number">10</span>,</span><br><span class="line">                  itemBuilder: (context, index) &#123;</span><br><span class="line">                    <span class="keyword">final</span> title = <span class="string">&quot;Item <span class="subst">$index</span>&quot;</span>;</span><br><span class="line">                    <span class="keyword">return</span> Container(</span><br><span class="line">                      color: Colors.red,</span><br><span class="line">                      height: <span class="number">65</span>,</span><br><span class="line">                      child: Text(title),</span><br><span class="line">                    );</span><br><span class="line">                  &#125;),</span><br><span class="line">              Text(<span class="string">&quot;This is the end of list&quot;</span>)</span><br><span class="line">            ],</span><br><span class="line">          ),</span><br><span class="line">        ),</span><br><span class="line">      ],</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Scaffold(</span><br><span class="line">      appBar: AppBar(title: <span class="keyword">const</span> Text(<span class="string">&quot;demopage&quot;</span>)),</span><br><span class="line">      body: SafeArea(</span><br><span class="line">        bottom: <span class="keyword">false</span>,</span><br><span class="line">        child: _buildView(),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>focus on the <a href="https://github.com/flutter/flutter/issues/160817">issue</a></strong></p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter AppBar 的 scrolledUnderElevation 属性</title>
    <url>/2024/12/02/Flutter-AppBar-%E7%9A%84-scrolledUnderElevation-%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<p>在 Flutter 中，AppBar 是一个重要的组件，通常用于显示应用程序的标题、导航按钮、操作菜单等。随着用户界面设计的发展，滚动效果在移动应用中变得越来越常见。scrolledUnderElevation 属性正是为了解决当页面滚动时，AppBar 的阴影效果的控制需求。</p>
<p>比如你使用了某个滚动组件,然后发现了为什么滚动的时候我的 AppBar 变色了呢?<br>这就是原因: <code>scrolledUnderElevation</code> 属性。</p>
<h1 id="什么是-scrolledUnderElevation"><a href="#什么是-scrolledUnderElevation" class="headerlink" title="什么是 scrolledUnderElevation?"></a>什么是 <code>scrolledUnderElevation</code>?</h1><p>scrolledUnderElevation 是 Flutter 3.0 引入的 AppBar 属性之一。它用于设置当 AppBar 位于滚动内容顶部且内容向下滚动时的 阴影高度。简单来说，当页面向下滚动且 AppBar 覆盖部分内容时，该属性决定了 AppBar 的阴影深度。</p>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><p>在用户滚动列表或长内容时，我们通常希望 AppBar 在不同的滚动状态下显示不同的视觉效果。例如：</p>
<ul>
<li>初始状态（未滚动）： AppBar 通常是透明的或没有阴影。</li>
<li>滚动状态： 当用户滚动页面并向下查看内容时，AppBar 应该带有一定的阴影，以显示它在内容之上的层次感。</li>
</ul>
<p>这种设计可以改善用户体验，使界面更清晰且具有层次感。</p>
<span id="more"></span>

<h1 id="如何使用-scrolledUnderElevation"><a href="#如何使用-scrolledUnderElevation" class="headerlink" title="如何使用 scrolledUnderElevation?"></a>如何使用 <code>scrolledUnderElevation</code>?</h1><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> main() =&gt; runApp(MyApp());</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyApp</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> MaterialApp(</span><br><span class="line">      home: Scaffold(</span><br><span class="line">        appBar: AppBar(</span><br><span class="line">          title: Text(<span class="string">&#x27;scrolledUnderElevation 示例&#x27;</span>),</span><br><span class="line">          scrolledUnderElevation: <span class="number">8.0</span>, <span class="comment">// 设置滚动时的阴影高度</span></span><br><span class="line">        ),</span><br><span class="line">        body: ListView.builder(</span><br><span class="line">          itemCount: <span class="number">50</span>,</span><br><span class="line">          itemBuilder: (context, index) &#123;</span><br><span class="line">            <span class="keyword">return</span> ListTile(</span><br><span class="line">              title: Text(<span class="string">&#x27;Item <span class="subst">$index</span>&#x27;</span>),</span><br><span class="line">            );</span><br><span class="line">          &#125;,</span><br><span class="line">        ),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>效果:</p>
<ul>
<li>默认状态： AppBar 没有阴影。</li>
<li>滚动时： 当页面向下滚动，AppBar 覆盖内容时，会应用指定的阴影高度（此例中为 8.0）。</li>
</ul>
<h1 id="自定义效果"><a href="#自定义效果" class="headerlink" title="自定义效果"></a>自定义效果</h1><ul>
<li>无阴影（保持平面效果）：<code>scrolledUnderElevation: 0.0</code></li>
<li>较深阴影（强调层次）：<code>scrolledUnderElevation: 16.0</code></li>
</ul>
<h1 id="与其他属性结合使用"><a href="#与其他属性结合使用" class="headerlink" title="与其他属性结合使用"></a>与其他属性结合使用</h1><ul>
<li>滚动监听机制： scrolledUnderElevation 依赖于滚动状态。如果使用自定义滚动视图或复杂的嵌套滚动，需要确保正确使用 ScrollNotification。</li>
<li>平台一致性： 不同平台（iOS 和 Android）可能有不同的默认行为。调整 scrolledUnderElevation 可以优化跨平台用户体验。</li>
</ul>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6读取文件</title>
    <url>/2019/02/26/ES6%E8%AF%BB%E5%8F%96%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>** 需求：已知一个路径，读取文件内容并返回 **</p>
<ul>
<li>普通读取文件方式：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>)</span><br><span class="line">fs.<span class="title function_">readFile</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./1.txt&quot;</span>), <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<ul>
<li>封装函数：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFileByPath</span>(<span class="params">fpath, callback</span>) &#123;</span><br><span class="line">  fs.<span class="title function_">readFile</span>(fpath, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果报错，后面的代码无意义</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="title function_">callback</span>(err)</span><br><span class="line">    <span class="comment">// console.log(dataStr)</span></span><br><span class="line">    <span class="title function_">callback</span>(<span class="literal">null</span>, dataStr)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>调用函数：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getFileByPath</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./1.txt&quot;</span>), <span class="function">(<span class="params">err, dataStr</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(dataStr)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
</ul>
<p>** 新需求：顺序读取文件 **</p>
<ul>
<li><p>回调嵌套：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getFileByPath</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./1.txt&quot;</span>), <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">  <span class="title function_">getFileByPath</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./2.txt&quot;</span>), <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    <span class="title function_">getFileByPath</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./3.txt&quot;</span>), <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>用 Promise 改造：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFileByPath</span>(<span class="params">fpath</span>) &#123;</span><br><span class="line">  <span class="comment">// 改造 function</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(fpath, <span class="string">&quot;utf-8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err)</span><br><span class="line">      <span class="title function_">resolve</span>(data)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getFileByPath</span>(<span class="string">&quot;./1.txt&quot;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="comment">// 读取文件</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getFileByPath</span>(<span class="string">&quot;./2.txt&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getFileByPath</span>(<span class="string">&quot;./2.txt&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getFileByPath</span>(<span class="string">&quot;./3.txt&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">getFileByPath</span>(<span class="string">&quot;./3.txt&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">  .<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter anti-aliasing bug</title>
    <url>/2024/12/16/Flutter-anti-aliasing-bug/</url>
    <content><![CDATA[<h1 id="Flutter-anti-aliasing-抗锯齿-bug"><a href="#Flutter-anti-aliasing-抗锯齿-bug" class="headerlink" title="Flutter anti-aliasing(抗锯齿) bug"></a>Flutter anti-aliasing(抗锯齿) bug</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>项目里有一段弧形曲线, 我选择用 Row + Expanded + Container 堆叠的方式实现,但是出现了一些很奇怪的<code>hairline border</code>现象.</p>
<p><img src="/images/anti-aliasing-example.png" alt="Flutter anti-aliasing bug"></p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>每个 Wrap 之间没有进行像素对齐, 重复渲染的地方导致了混色(颜色加深), 形成了<code>hairline border</code> – <a href="https://github.com/flutter/flutter/issues/14288">issue</a>.</p>
<p>所以相同颜色,尽量避免分块去渲染,会导致抗锯齿效果不佳.</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>根据更具体的像素比,去渲染对应的大小. 但是这种方法只适用于 width 和 height 都是明确的情况下, 我们通过像素比去控制实际渲染的大小尽量贴近于整数.</li>
<li>直接使用 custom paint 进行整体绘制. 这种方法可以避免 Wrap 之间像素对齐, 也能保证整体的抗锯齿效果.</li>
</ol>
<p>我使用的是第二种方法, 效果如图:<br><img src="/images/anti-aliasing-done.png" alt="Flutter anti-aliasing solution"></p>
<span id="more"></span>

<p><strong>代码实现:</strong></p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CexDexPainter</span> <span class="keyword">extends</span> <span class="title">CustomPainter</span> </span>&#123;</span><br><span class="line">  CexDexPainter(</span><br><span class="line">      &#123;<span class="keyword">super</span>.repaint,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.leftToRight,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.leftColor,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.rightColor&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">bool</span> leftToRight;</span><br><span class="line">  <span class="keyword">final</span> Color leftColor;</span><br><span class="line">  <span class="keyword">final</span> Color rightColor;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="keyword">void</span> paint(Canvas canvas, Size size) &#123;</span><br><span class="line">    Paint paintLeft = Paint()..color = leftColor; <span class="comment">// 左边颜色</span></span><br><span class="line">    Paint paintRight = Paint()..color = rightColor; <span class="comment">// 右边颜色</span></span><br><span class="line">    <span class="keyword">final</span> square = <span class="number">8.</span>w;</span><br><span class="line">    <span class="keyword">final</span> center = <span class="number">4.</span>w;</span><br><span class="line"></span><br><span class="line">    Path leftPath = Path()</span><br><span class="line">      ..moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">      ..lineTo(size.width / <span class="number">2</span> - square - center / <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">      ..arcToPoint(</span><br><span class="line">        Offset(size.width / <span class="number">2</span> - center / <span class="number">2</span>, square),</span><br><span class="line">        radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">        clockwise: <span class="keyword">true</span>,</span><br><span class="line">      )</span><br><span class="line">      ..lineTo(size.width / <span class="number">2</span> + center / <span class="number">2</span>, size.height - square)</span><br><span class="line">      ..arcToPoint(</span><br><span class="line">        Offset(size.width / <span class="number">2</span> + square + center / <span class="number">2</span>, size.height),</span><br><span class="line">        radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">        clockwise: <span class="keyword">false</span>,</span><br><span class="line">      )</span><br><span class="line">      ..lineTo(<span class="number">0</span>, size.height)</span><br><span class="line">      ..close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!leftToRight) &#123;</span><br><span class="line">      leftPath = Path()</span><br><span class="line">        ..moveTo(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">        ..lineTo(size.width / <span class="number">2</span> + square + center / <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        ..arcToPoint(</span><br><span class="line">          Offset(size.width / <span class="number">2</span> + center / <span class="number">2</span>, square),</span><br><span class="line">          radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">          clockwise: <span class="keyword">false</span>,</span><br><span class="line">        )</span><br><span class="line">        ..lineTo(size.width / <span class="number">2</span> - center / <span class="number">2</span>, size.height - square)</span><br><span class="line">        ..arcToPoint(</span><br><span class="line">          Offset(size.width / <span class="number">2</span> - square - center / <span class="number">2</span>, size.height),</span><br><span class="line">          radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">          clockwise: <span class="keyword">true</span>,</span><br><span class="line">        )</span><br><span class="line">        ..lineTo(<span class="number">0</span>, size.height)</span><br><span class="line">        ..close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Path rightPath = Path()</span><br><span class="line">      ..moveTo(size.width / <span class="number">2</span> - square - center / <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">      ..arcToPoint(</span><br><span class="line">        Offset(size.width / <span class="number">2</span> - center / <span class="number">2</span>, square),</span><br><span class="line">        radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">        clockwise: <span class="keyword">true</span>,</span><br><span class="line">      )</span><br><span class="line">      ..lineTo(size.width / <span class="number">2</span> + center / <span class="number">2</span>, size.height - square)</span><br><span class="line">      ..arcToPoint(</span><br><span class="line">        Offset(size.width / <span class="number">2</span> + square + center / <span class="number">2</span>, size.height),</span><br><span class="line">        radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">        clockwise: <span class="keyword">false</span>,</span><br><span class="line">      )</span><br><span class="line">      ..lineTo(size.width, size.height)</span><br><span class="line">      ..lineTo(size.width, <span class="number">0</span>)</span><br><span class="line">      ..close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!leftToRight) &#123;</span><br><span class="line">      rightPath = Path()</span><br><span class="line">        ..moveTo(size.width / <span class="number">2</span> + square + center / <span class="number">2</span>, <span class="number">0</span>)</span><br><span class="line">        ..arcToPoint(</span><br><span class="line">          Offset(size.width / <span class="number">2</span> + center / <span class="number">2</span>, square),</span><br><span class="line">          radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">          clockwise: <span class="keyword">false</span>,</span><br><span class="line">        )</span><br><span class="line">        ..lineTo(size.width / <span class="number">2</span> - center / <span class="number">2</span>, size.height - square)</span><br><span class="line">        ..arcToPoint(</span><br><span class="line">          Offset(size.width / <span class="number">2</span> - square - center / <span class="number">2</span>, size.height),</span><br><span class="line">          radius: Radius.circular(<span class="number">8.</span>r),</span><br><span class="line">          clockwise: <span class="keyword">true</span>,</span><br><span class="line">        )</span><br><span class="line">        ..lineTo(size.width, size.height)</span><br><span class="line">        ..lineTo(size.width, <span class="number">0</span>)</span><br><span class="line">        ..close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    canvas.drawPath(leftPath, paintLeft);</span><br><span class="line">    canvas.drawPath(rightPath, paintRight);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  <span class="built_in">bool</span> shouldRepaint(<span class="keyword">covariant</span> CustomPainter oldDelegate) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
        <tag>Graphics</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter web only two fingers to scroll on iOS 18.2</title>
    <url>/2024/12/20/Flutter-web-only-two-fingers-to-scroll-on-iOS-18-2/</url>
    <content><![CDATA[<h1 id="Flutter-web-在-iOS-18-2-版本上只能用两指滑动滚动"><a href="#Flutter-web-在-iOS-18-2-版本上只能用两指滑动滚动" class="headerlink" title="Flutter web 在 iOS 18.2 版本上只能用两指滑动滚动"></a>Flutter web 在 iOS 18.2 版本上只能用两指滑动滚动</h1><p>issue 地址: <a href="https://github.com/flutter/flutter/issues/158299">[iOS 18.2][Web] Scrolling is broken in browsers (Safari, Chrome)</a></p>
<p>flutter 版本为 3.25.x, 低于 iOS 18.2 的设备上, 可以单指滚动</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>Safari 在 iOS 18.2 添加了 <code>getCoalescedEvents()</code>支持, 这个方法用于合并多个 touch 事件,有助于提高性能.<br>但是 api 是不完整的(与其他浏览器内核实现不符, 缺少了 pointerId 和 target 等返回值), 在 flutter 3.27.1 修改了 binding 部分的内容, 用于兼容: <a href="https://github.com/flutter/engine/pull/56719/files">[web] Work around wrong pointerId in coalesced events in iOS Safari 18.2</a></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>把 flutter 升级到 3.27.1 版本, 或者使用 <code>flutter channel dev</code> 切换到 dev 分支, 然后 <code>flutter upgrade</code> 升级到最新 beta 版本.<br>也可以将 pr 合并到本地 flutter engine, 直接构建 flutter web 项目.</p>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 语法</title>
    <url>/2021/01/27/Flutter-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="Null-aware-operators"><a href="#Null-aware-operators" class="headerlink" title="Null-aware operators"></a>Null-aware operators</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span> foo = <span class="string">&#x27;a string&#x27;</span>;</span><br><span class="line"><span class="built_in">String</span> bar; <span class="comment">// Unassigned objects are null by default.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Substitute an operator that makes &#x27;a string&#x27; be assigned to baz.</span></span><br><span class="line"><span class="built_in">String</span> baz = foo ?? bar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> updateSomeVars() &#123;</span><br><span class="line">  <span class="comment">// Substitute an operator that makes &#x27;a string&#x27; be assigned to bar.</span></span><br><span class="line">  bar ??= <span class="string">&#x27;a string&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Conditional-property-access"><a href="#Conditional-property-access" class="headerlink" title="Conditional property access"></a>Conditional property access</h3><p><code>myObject?.someProperty</code> equals to <code>(myObject != null) ? myObject.someProperty : null</code>.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="comment">// This method should return the uppercase version of `str`</span></span><br><span class="line"><span class="comment">// or null if `str` is null.</span></span><br><span class="line"><span class="built_in">String</span> upperCaseIt(<span class="built_in">String</span> str) &#123;</span><br><span class="line">  <span class="comment">// Try conditionally accessing the `toUpperCase` method here.</span></span><br><span class="line">  <span class="keyword">return</span> str?.toUpperCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Cascades"><a href="#Cascades" class="headerlink" title="Cascades"></a>Cascades</h3><p><code>myObject.someMethod()</code> will get the return value of the <code>someMethod()</code>, <code>myObject..someMethod()</code> will get the reference of the <code>myObject</code>.</p>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigObject</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> anInt = <span class="number">0</span>;</span><br><span class="line">  <span class="built_in">String</span> aString = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="built_in">List</span>&lt;<span class="built_in">double</span>&gt; aList = [];</span><br><span class="line">  <span class="built_in">bool</span> _done = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">void</span> allDone() &#123;</span><br><span class="line">    _done = <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BigObject fillBigObject(BigObject obj) &#123;</span><br><span class="line">  <span class="comment">// Create a single statement that will update and return obj:</span></span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">    ..anInt = <span class="number">1</span></span><br><span class="line">    ..aString = <span class="string">&quot;String!&quot;</span></span><br><span class="line">    ..aList = [<span class="number">3.0</span>]</span><br><span class="line">    ..allDone();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Optional-named-parameters"><a href="#Optional-named-parameters" class="headerlink" title="Optional named parameters"></a>Optional named parameters</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDataObject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> anInt;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> aString;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> aDouble;</span><br><span class="line"></span><br><span class="line">  MyDataObject(&#123;</span><br><span class="line">     <span class="keyword">this</span>.anInt = <span class="number">1</span>,</span><br><span class="line">     <span class="keyword">this</span>.aString = <span class="string">&#x27;Old!&#x27;</span>,</span><br><span class="line">     <span class="keyword">this</span>.aDouble = <span class="number">2.0</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Add your copyWith method here:</span></span><br><span class="line">  MyDataObject copyWith(&#123;<span class="built_in">int</span> newInt, <span class="built_in">String</span> newString, <span class="built_in">double</span> newDouble&#125;) &#123;</span><br><span class="line">    <span class="keyword">return</span> MyDataObject(anInt: newInt ?? <span class="keyword">this</span>.anInt,</span><br><span class="line">                        aString: newString ?? <span class="keyword">this</span>.aString,</span><br><span class="line">                        aDouble: newDouble ?? <span class="keyword">this</span>.aDouble</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Initializer-lists"><a href="#Initializer-lists" class="headerlink" title="Initializer lists"></a>Initializer lists</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FirstTwoLetters</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> letterOne;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">String</span> letterTwo;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a constructor with an initializer list here:</span></span><br><span class="line">  FirstTwoLetters(<span class="built_in">String</span> word)</span><br><span class="line">    : <span class="keyword">assert</span>(word.length &gt;= <span class="number">2</span>),</span><br><span class="line">      letterOne = word[<span class="number">0</span>],</span><br><span class="line">      letterTwo = word[<span class="number">1</span>] &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Named-constructors"><a href="#Named-constructors" class="headerlink" title="Named constructors"></a>Named constructors</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> red;</span><br><span class="line">  <span class="built_in">int</span> green;</span><br><span class="line">  <span class="built_in">int</span> blue;</span><br><span class="line"></span><br><span class="line">  Color(<span class="keyword">this</span>.red, <span class="keyword">this</span>.green, <span class="keyword">this</span>.blue);</span><br><span class="line"></span><br><span class="line">  Color.black() &#123;</span><br><span class="line">    red = <span class="number">0</span>;</span><br><span class="line">    green = <span class="number">0</span>;</span><br><span class="line">    blue = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Factory-constructors"><a href="#Factory-constructors" class="headerlink" title="Factory constructors"></a>Factory constructors</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerHolder</span> </span>&#123;</span><br><span class="line">  IntegerHolder();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create your factory constructor called &quot;fromList&quot; here.</span></span><br><span class="line">  <span class="keyword">factory</span> IntegerHolder.fromList(<span class="built_in">List</span>&lt;<span class="built_in">int</span>&gt; list) &#123;</span><br><span class="line">    <span class="keyword">if</span> (list.length == <span class="number">1</span>) <span class="keyword">return</span> IntegerSingle(list[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (list.length == <span class="number">2</span>) <span class="keyword">return</span> IntegerDouble(list[<span class="number">0</span>], list[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (list.length == <span class="number">3</span>) <span class="keyword">return</span> IntegerTriple(list[<span class="number">0</span>], list[<span class="number">1</span>], list[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerSingle</span> <span class="keyword">extends</span> <span class="title">IntegerHolder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> a;</span><br><span class="line">  IntegerSingle(<span class="keyword">this</span>.a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerDouble</span> <span class="keyword">extends</span> <span class="title">IntegerHolder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> a;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> b;</span><br><span class="line">  IntegerDouble(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntegerTriple</span> <span class="keyword">extends</span> <span class="title">IntegerHolder</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> a;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> b;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> c;</span><br><span class="line">  IntegerTriple(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Redirecting-constructors"><a href="#Redirecting-constructors" class="headerlink" title="Redirecting constructors"></a>Redirecting constructors</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Color</span> </span>&#123;</span><br><span class="line">  <span class="built_in">int</span> red;</span><br><span class="line">  <span class="built_in">int</span> green;</span><br><span class="line">  <span class="built_in">int</span> blue;</span><br><span class="line"></span><br><span class="line">  Color(<span class="keyword">this</span>.red, <span class="keyword">this</span>.green, <span class="keyword">this</span>.blue);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Create a named constructor called &quot;black&quot; here and redirect it</span></span><br><span class="line">  <span class="comment">// to call the existing constructor</span></span><br><span class="line">  Color.assign(<span class="built_in">int</span> red, <span class="built_in">int</span> green, <span class="built_in">int</span> blue): <span class="keyword">this</span>(red, green, blue);</span><br><span class="line">  Color.black(): <span class="keyword">this</span>.assign(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Const-constructors"><a href="#Const-constructors" class="headerlink" title="Const constructors"></a>Const constructors</h3><figure class="highlight dart"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Recipe</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; ingredients;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">int</span> calories;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">double</span> milligramsOfSodium;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> Recipe(<span class="keyword">this</span>.ingredients, <span class="keyword">this</span>.calories, <span class="keyword">this</span>.milligramsOfSodium);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Flutter 吸顶Scroll View</title>
    <url>/2024/11/19/Flutter-%E5%90%B8%E9%A1%B6Scroll-View/</url>
    <content><![CDATA[<h1 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下:"></a>效果如下:</h1><ul>
<li>分为三部分，上部，中部，下部。</li>
<li>上部为 header 部分，不吸顶。</li>
<li>中部吸顶。</li>
<li>下部为 SubPages 部分，可以左右滑动切换页面子页面。</li>
</ul>
<video width="360" height="640" controls>
  <source src="https://images-1255795341.cos.ap-guangzhou.myqcloud.com/%E5%BD%95%E5%B1%8F2024-11-15%2017.41.59.mov" type="video/mp4">
  Your browser does not support the video tag.
</video>

<span id="more"></span>

<figure class="highlight dart"><figcaption><span>home_scroll.view.dart</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeScrollView</span> <span class="keyword">extends</span> <span class="title">GetView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> Widget top;</span><br><span class="line">  <span class="keyword">final</span> Widget header;</span><br><span class="line">  <span class="keyword">final</span> <span class="built_in">List</span>&lt;Widget&gt; subPages;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> HomeScrollView(</span><br><span class="line">      &#123;<span class="keyword">super</span>.key,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.top,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.subPages,</span><br><span class="line">      <span class="keyword">required</span> <span class="keyword">this</span>.header&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Material(</span><br><span class="line">      child: DefaultTabController(</span><br><span class="line">          length: <span class="number">5</span>,</span><br><span class="line">          child: Column(</span><br><span class="line">            children: [</span><br><span class="line">              Expanded(</span><br><span class="line">                  child: NestedScrollView(</span><br><span class="line">                      headerSliverBuilder:</span><br><span class="line">                          (BuildContext context, <span class="built_in">bool</span> innerBoxIsScrolled) &#123;</span><br><span class="line">                        <span class="keyword">return</span> &lt;Widget&gt;[top, header];</span><br><span class="line">                      &#125;,</span><br><span class="line">                      body: TabBarView(</span><br><span class="line">                        physics: NeverScrollableScrollPhysics(),</span><br><span class="line">                        children: subPages,</span><br><span class="line">                      )))</span><br><span class="line">            ],</span><br><span class="line">          )),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight dart"><figcaption><span>home.view.dart</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:animated_toggle_switch/animated_toggle_switch.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:flutter_screenutil/flutter_screenutil.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:get/get.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:rflutter_alert/rflutter_alert.dart&#x27;</span> <span class="keyword">as</span> Alert;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/config/log_config.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/config/super_theme.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/controller/countdown.controller.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/page/home/views/home_scroll.view.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/page/home/views/ranking_list.view.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/page/home/widgets/menu_icon_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/page/home/widgets/ranking_header_widget.dart&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;package:uTrading/widget/u_text.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;home.controller.dart&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeView</span> <span class="keyword">extends</span> <span class="title">GetView</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeView(&#123;<span class="keyword">super</span>.key&#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    Get.put(CountdownController());</span><br><span class="line">    HomeController controller = Get.put(HomeController());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> headerSwitch = Padding(</span><br><span class="line">      padding: EdgeInsets.fromLTRB(<span class="number">16.</span>w, <span class="number">9.</span>h, <span class="number">16.</span>w, <span class="number">9.</span>h),</span><br><span class="line">      child: Center(</span><br><span class="line">        child: SizedBox(</span><br><span class="line">            height: <span class="number">32.</span>h,</span><br><span class="line">            width: <span class="number">200.</span>w,</span><br><span class="line">            child: Obx(</span><br><span class="line">              () =&gt; AnimatedToggleSwitch.size(</span><br><span class="line">                current: controller.appIsCEX.value,</span><br><span class="line">                values: <span class="keyword">const</span> [<span class="keyword">true</span>, <span class="keyword">false</span>],</span><br><span class="line">                iconOpacity: <span class="number">1</span>,</span><br><span class="line">                indicatorSize: Size.fromWidth(<span class="number">99.</span>w),</span><br><span class="line">                customIconBuilder: (context, local, global) =&gt; Text(</span><br><span class="line">                  local.value ? <span class="string">&#x27;CEX&#x27;</span> : <span class="string">&#x27;DEX&#x27;</span>,</span><br><span class="line">                  style: TextStyle(</span><br><span class="line">                      color: Color.lerp(Color(<span class="number">0xff999999</span>), Color(<span class="number">0xff333333</span>),</span><br><span class="line">                          local.animationValue),</span><br><span class="line">                      fontWeight: FontWeight.lerp(FontWeight.normal,</span><br><span class="line">                          FontWeight.bold, local.animationValue)),</span><br><span class="line">                ),</span><br><span class="line">                borderWidth: <span class="number">5</span>,</span><br><span class="line">                iconAnimationType: AnimationType.onHover,</span><br><span class="line">                style: ToggleStyle(</span><br><span class="line">                  indicatorColor: Color(<span class="number">0xffffc300</span>),</span><br><span class="line">                  borderColor: Colors.transparent,</span><br><span class="line">                  borderRadius: BorderRadius.circular(<span class="number">32.</span>r),</span><br><span class="line">                ),</span><br><span class="line">                selectedIconScale: <span class="number">1</span>,</span><br><span class="line">                onChanged: (value) =&gt; controller.toggleAppType(),</span><br><span class="line">              ),</span><br><span class="line">            )),</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> headerRightIcon = Positioned(</span><br><span class="line">      top: <span class="number">0</span>,</span><br><span class="line">      bottom: <span class="number">0</span>,</span><br><span class="line">      right: <span class="number">16.</span>w,</span><br><span class="line">      child: Center(</span><br><span class="line">          child: InkWell(</span><br><span class="line">        onTap: () &#123;&#125;,</span><br><span class="line">        child: Image.asset(<span class="string">&#x27;assets/images/announce_line_black.png&#x27;</span>,</span><br><span class="line">            width: <span class="number">20.</span>w, height: <span class="number">20.</span>w),</span><br><span class="line">      )),</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> HomeScrollView(</span><br><span class="line">        top: SliverToBoxAdapter(</span><br><span class="line">          child: Container(</span><br><span class="line">            decoration: BoxDecoration(</span><br><span class="line">                image: DecorationImage(</span><br><span class="line">                    fit: BoxFit.cover,</span><br><span class="line">                    image: AssetImage(<span class="string">&#x27;assets/images/home_top_bg.png&#x27;</span>))),</span><br><span class="line">            child: Column(</span><br><span class="line">              children: [</span><br><span class="line">                <span class="comment">// 刘海屏</span></span><br><span class="line">                SizedBox(height: MediaQuery.of(context).padding.top),</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 顶部区域</span></span><br><span class="line">                Stack(</span><br><span class="line">                  children: [</span><br><span class="line">                    headerSwitch,</span><br><span class="line">                    headerRightIcon,</span><br><span class="line">                  ],</span><br><span class="line">                ),</span><br><span class="line"></span><br><span class="line">                <span class="comment">// menu icons</span></span><br><span class="line">                HomeMenuWidget()</span><br><span class="line">              ],</span><br><span class="line">            ),</span><br><span class="line">          ),</span><br><span class="line">        ), <span class="comment">// 上部</span></span><br><span class="line">        header: RankingHeaderWidget(), <span class="comment">// 中部</span></span><br><span class="line">        subPages: [ <span class="comment">// 下部</span></span><br><span class="line">          RankingListWidget(),</span><br><span class="line">          RankingListWidget(),</span><br><span class="line">          RankingListWidget(),</span><br><span class="line">          RankingListWidget(),</span><br><span class="line">          RankingListWidget(),</span><br><span class="line">        ]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HomeMenuWidget</span> <span class="keyword">extends</span> <span class="title">StatelessWidget</span> </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> HomeMenuWidget(&#123;</span><br><span class="line">    <span class="keyword">super</span>.key,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@override</span></span><br><span class="line">  Widget build(BuildContext context) &#123;</span><br><span class="line">    <span class="keyword">return</span> Padding(</span><br><span class="line">      padding: EdgeInsets.fromLTRB(<span class="number">0</span>, <span class="number">16.</span>h, <span class="number">0</span>, <span class="number">16.</span>h),</span><br><span class="line">      child: Row(</span><br><span class="line">        mainAxisAlignment: MainAxisAlignment.spaceAround,</span><br><span class="line">        children: [</span><br><span class="line">          MenuIconWidget(</span><br><span class="line">              imgPath: <span class="string">&#x27;assets/images/my_profit.png&#x27;</span>,</span><br><span class="line">              title: <span class="string">&#x27;aa&#x27;</span>,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                ScaffoldMessenger.of(context)</span><br><span class="line">                    .showSnackBar(SnackBar(content: Text(<span class="string">&#x27;Click profile&#x27;</span>)));</span><br><span class="line">              &#125;),</span><br><span class="line">          MenuIconWidget(</span><br><span class="line">              imgPath: <span class="string">&#x27;assets/images/risk_control.png&#x27;</span>,</span><br><span class="line">              title: <span class="string">&#x27;bb&#x27;</span>,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                ScaffoldMessenger.of(context)</span><br><span class="line">                    .showSnackBar(SnackBar(content: Text(<span class="string">&#x27;Click profile&#x27;</span>)));</span><br><span class="line">              &#125;),</span><br><span class="line">          MenuIconWidget(</span><br><span class="line">              imgPath: <span class="string">&#x27;assets/images/api_binding.png&#x27;</span>,</span><br><span class="line">              title: <span class="string">&#x27;cc&#x27;</span>,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                ScaffoldMessenger.of(context)</span><br><span class="line">                    .showSnackBar(SnackBar(content: Text(<span class="string">&#x27;Click profile&#x27;</span>)));</span><br><span class="line">              &#125;),</span><br><span class="line">          MenuIconWidget(</span><br><span class="line">              imgPath: <span class="string">&#x27;assets/images/exchange_register.png&#x27;</span>,</span><br><span class="line">              title: <span class="string">&#x27;dd&#x27;</span>,</span><br><span class="line">              onPressed: () &#123;</span><br><span class="line">                ScaffoldMessenger.of(context)</span><br><span class="line">                    .showSnackBar(SnackBar(content: Text(<span class="string">&#x27;Click profile&#x27;</span>)));</span><br><span class="line">              &#125;),</span><br><span class="line">        ],</span><br><span class="line">      ),</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Dart</tag>
        <tag>Flutter</tag>
      </tags>
  </entry>
  <entry>
    <title>Generator</title>
    <url>/2018/09/01/Generator/</url>
    <content><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">testGenerator</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;world&quot;</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;done&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> test = <span class="title function_">testGenerator</span>()</span><br><span class="line">test.<span class="title function_">next</span>() <span class="comment">// &#123; value : &#x27;hello&#x27;, done : false &#125;</span></span><br><span class="line">test.<span class="title function_">next</span>() <span class="comment">// &#123; value : &#x27;world&#x27;, done : false &#125;</span></span><br><span class="line">test.<span class="title function_">next</span>() <span class="comment">// &#123; value : &#x27;done&#x27;, done : true &#125;</span></span><br><span class="line">test.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h3><p>Generator 的 next 方法运行逻辑如下：</p>
<ol>
<li>遇到 yield 语句就暂停执行后面的操作，并将紧跟在 yield 后的表达式的值作为的对象的 value 属性值</li>
<li>下一次调用 next 方法时在继续往下执行，直到遇到下一条 yield 语句</li>
<li>如果没有遇到新的 yield 语句，就一直运行到函数结束，知道运行到 return 为止，并将 return 语句后面的表达式作为返回对象的 value 属性值</li>
<li>如果该函数没有 return 语句，则返回对象的 value 属性值为 undefined</li>
</ol>
<p>yield 是惰性求值的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">123</span> + <span class="number">456</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上的代码只有在 next 将指针移到这一句时才求值。<br>Generator 函数可以不使用 yield 语句，此时就变成了一个暂缓执行的函数，只有在调用了 next 时才执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">f</span>()</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> generator.<span class="title function_">next</span>(), <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<p>展开数组嵌套：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [[<span class="number">1</span>, <span class="number">2</span>], <span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]</span><br><span class="line"><span class="keyword">var</span> flat = <span class="keyword">function</span>* (arr) &#123;</span><br><span class="line">  <span class="keyword">var</span> length = arr.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> item = arr[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* <span class="title function_">flat</span>(item)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">yield</span> item</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> f <span class="keyword">of</span> <span class="title function_">flat</span>(arr)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f) <span class="comment">// 1, 2, 3, 4, 5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="next-方法的参数"><a href="#next-方法的参数" class="headerlink" title="next 方法的参数"></a>next 方法的参数</h3><p>next 可以带有一个参数，该参数会被当做上一条 yield 语句的返回值，这样就可以在 Generator 函数运行的不同阶段从外部向内部注入不同的值，从而调整函数的行为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; <span class="literal">true</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> reset = <span class="keyword">yield</span> i</span><br><span class="line">    <span class="keyword">if</span> (reset) &#123;</span><br><span class="line">      i = -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> generator = <span class="title function_">f</span>()</span><br><span class="line">generator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 0, done : false &#125;</span></span><br><span class="line">generator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 1, done : false &#125;</span></span><br><span class="line">generator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 2, done : false &#125;</span></span><br><span class="line">generator.<span class="title function_">next</span>(<span class="literal">true</span>) <span class="comment">// &#123; value : 0, done : false &#125;</span></span><br><span class="line">generator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 1, done : false &#125;</span></span><br><span class="line">generator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 2, done : false &#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>V8 引擎直接忽略第一次使用 next 时的参数，只有第二次使用 next 开始的参数才是有效的</strong><br>向内部注入值的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">dataConsumer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`1. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`2. <span class="subst">$&#123;<span class="keyword">yield</span>&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;result&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> run = <span class="title function_">dataConsumer</span>()</span><br><span class="line">run.<span class="title function_">next</span>() <span class="comment">// &#x27;start&#x27;</span></span><br><span class="line">run.<span class="title function_">next</span>(<span class="string">&quot;first&quot;</span>) <span class="comment">// 1. first</span></span><br><span class="line">run.<span class="title function_">next</span>(<span class="string">&quot;haha&quot;</span>) <span class="comment">// 2. haha</span></span><br></pre></td></tr></table></figure>

<h3 id="Generator-prototype-throw"><a href="#Generator-prototype-throw" class="headerlink" title="Generator.prototype.throw()"></a>Generator.prototype.throw()</h3><p>throw 方法可以在函数体外抛出错误，然后在 Generator 函数体内捕获：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内部捕获&quot;</span>, e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i = <span class="title function_">g</span>()</span><br><span class="line">i.<span class="title function_">next</span>()</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  i.<span class="keyword">throw</span>(<span class="string">&quot;a&quot;</span>) <span class="comment">// 内部捕获 a</span></span><br><span class="line">  i.<span class="keyword">throw</span>(<span class="string">&quot;b&quot;</span>) <span class="comment">// 外部捕获 b</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;外部捕获&quot;</span>, e)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>throw 方法可以接受一个参数，该参数会被 catch 语句接收：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> g = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> i = <span class="title function_">g</span>()</span><br><span class="line">i.<span class="title function_">next</span>()</span><br><span class="line">i.<span class="keyword">throw</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;test&quot;</span>))</span><br><span class="line"><span class="comment">// Error: test</span></span><br></pre></td></tr></table></figure>

<p>如果 Generator 函数内部部署了 try…catch 代码块，那么遍历器的 throw 方法抛出的错误不影响下一次遍历，否则遍历直接终止。<br><strong>遍历器的 throw 与 throw 不同，后者只能被函数体外的 catch 捕获到</strong><br>throw 方法被捕获后会附带执行下一条 yield 表达式，即执行一次 next 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gen = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b&quot;</span>)</span><br><span class="line">  <span class="keyword">yield</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;c&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>()</span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#x27;a&#x27;</span></span><br><span class="line">g.<span class="keyword">throw</span>() <span class="comment">// &#x27;b&#x27;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Generator 函数体内抛出的错误也能被函数体外的 catch 捕获：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">  <span class="keyword">var</span> y = x.<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">yield</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">foo</span>()</span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value : 3, done : false &#125;</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  it.<span class="title function_">next</span>(<span class="number">32</span>)</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">//TypeError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦 Generator 执行过程中抛出错误，就不会再执行下去。如果此后再调用 next，将返回一个 value 属性等于 undefined，done 属性等于 true 的对象。</p>
<h3 id="Generator-prototype-return"><a href="#Generator-prototype-return" class="headerlink" title="Generator.prototype.return()"></a>Generator.prototype.return()</h3><p>返回给定的值，并终结 Generator 函数的遍历：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="title function_">gen</span>()</span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value : 1, done : false &#125;</span></span><br><span class="line">g.<span class="keyword">return</span>(<span class="string">&quot;foo&quot;</span>) <span class="comment">// &#123; value : &#x27;foo&#x27;, done : true &#125;</span></span><br><span class="line">g.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br></pre></td></tr></table></figure>

<p>如果 Generator 函数内部有 try…catch 代码块，那么 return 方法会推迟到 finally 代码块执行完成再执行。</p>
<h3 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h3><p>用于在一个 Generator 函数中执行另一个 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;x&quot;</span></span><br><span class="line">  <span class="keyword">yield</span>* <span class="title function_">foo</span>()</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;y&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;x&quot;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&quot;y&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用 yield*取出嵌套数组成员：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">iterTree</span>(<span class="params">tree</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(tree)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; tree.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">yield</span>* <span class="title function_">iterTree</span>(tree[i])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> tree</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> tree = [<span class="string">&quot;a&quot;</span>, [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>], [<span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>]]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="title function_">iterTree</span>(tree)) <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// a b c d e</span></span><br></pre></td></tr></table></figure>

<p>遍历完全二叉树：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Tree</span>(<span class="params">left, label, right</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">left</span> = left</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">label</span> = label</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">right</span> = right</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//中序遍历函数</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">inorder</span>(<span class="params">t</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (t) &#123;</span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">inorder</span>(t.<span class="property">left</span>)</span><br><span class="line">    <span class="keyword">yield</span> t.<span class="property">label</span></span><br><span class="line">    <span class="keyword">yield</span>* <span class="title function_">inorder</span>(t.<span class="property">right</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生成二叉树</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">make</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(<span class="literal">null</span>, array[<span class="number">0</span>], <span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tree</span>(<span class="title function_">make</span>(array[<span class="number">0</span>]), array[<span class="number">1</span>], <span class="title function_">make</span>(array[<span class="number">2</span>]))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tree = <span class="title function_">make</span>([[[<span class="string">&quot;a&quot;</span>], <span class="string">&quot;b&quot;</span>, [<span class="string">&quot;c&quot;</span>]], <span class="string">&quot;d&quot;</span>, [[<span class="string">&quot;e&quot;</span>], <span class="string">&quot;f&quot;</span>, [<span class="string">&quot;g&quot;</span>]]])</span><br><span class="line"><span class="keyword">var</span> result = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> node <span class="keyword">of</span> <span class="title function_">inorder</span>(tree)) &#123;</span><br><span class="line">  result.<span class="title function_">push</span>(node)</span><br><span class="line">&#125;</span><br><span class="line">result <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;, &#x27;f&#x27;, &#x27;g&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="作为对象属性的-Generator-函数"><a href="#作为对象属性的-Generator-函数" class="headerlink" title="作为对象属性的 Generator 函数"></a>作为对象属性的 Generator 函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  *<span class="title function_">myGeneratorMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价写法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">myGeneratorMethod</span>: <span class="keyword">function</span>* () &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generator-函数-this"><a href="#Generator-函数-this" class="headerlink" title="Generator 函数 this"></a>Generator 函数 this</h3><p>Generator 函数总是返回一个遍历器，ES6 规定这个遍历器是 Generator 函数的实例，它也继承了 Generator 函数的 prototype 对象上的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">g</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">g.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">hello</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">g</span>()</span><br><span class="line">obj <span class="keyword">instanceof</span> g <span class="comment">// true</span></span><br><span class="line">obj.<span class="title function_">hello</span>() <span class="comment">// &#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure>

<p>让 Generator 函数返回一个正常对象的实例，既可以使用 next 方法，又可以获得正常的 this：</p>
<ul>
<li>方法一：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> (<span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">yield</span> (<span class="variable language_">this</span>.<span class="property">c</span> = <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> f = F.<span class="title function_">call</span>(obj) <span class="comment">// obj 绑定this</span></span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : 2, done : false &#125;</span></span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : 3, done : false &#125;</span></span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br><span class="line">obj.<span class="property">a</span> <span class="comment">// 1</span></span><br><span class="line">obj.<span class="property">b</span> <span class="comment">// 2</span></span><br><span class="line">obj.<span class="property">c</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> (<span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">2</span>)</span><br><span class="line">  <span class="keyword">yield</span> (<span class="variable language_">this</span>.<span class="property">c</span> = <span class="number">3</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> gen.<span class="title function_">call</span>(gen.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : 2, done : false &#125;</span></span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : 3, done : false &#125;</span></span><br><span class="line">f.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br><span class="line">f.<span class="property">a</span> <span class="comment">// 1</span></span><br><span class="line">f.<span class="property">b</span> <span class="comment">// 2</span></span><br><span class="line">f.<span class="property">c</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

<h3 id="Generator-函数与状态机"><a href="#Generator-函数与状态机" class="headerlink" title="Generator 函数与状态机"></a>Generator 函数与状态机</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> clock = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tick&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Tock&quot;</span>)</span><br><span class="line">    <span class="keyword">yield</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">clock</span>()</span><br><span class="line">c.<span class="title function_">next</span>() <span class="comment">// Tick</span></span><br><span class="line">c.<span class="title function_">next</span>() <span class="comment">// Tock</span></span><br><span class="line">c.<span class="title function_">next</span>() <span class="comment">// Tick</span></span><br></pre></td></tr></table></figure>

<h3 id="异步操作的同步化表达"><a href="#异步操作的同步化表达" class="headerlink" title="异步操作的同步化表达"></a>异步操作的同步化表达</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">loadUI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">showLoadingScreen</span>()</span><br><span class="line">  <span class="keyword">yield</span> <span class="title function_">loadUIDataAsynchronously</span>()</span><br><span class="line">  <span class="title function_">hideLoadingScreen</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> loader = <span class="title function_">loadUI</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//卸载UI</span></span><br><span class="line">loader.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<p>用同步方式表达 Generator 部署 AJAX 操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="keyword">yield</span> <span class="title function_">request</span>(<span class="string">&quot;http://some.url&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> resp = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(resp.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="title function_">makeAjaxCall</span>(url, <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    it.<span class="title function_">next</span>(response)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">main</span>()</span><br><span class="line">it.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<h3 id="Async-Generator"><a href="#Async-Generator" class="headerlink" title="Async Generator"></a>Async Generator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  to = <span class="number">0</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span>,</span><br><span class="line"></span><br><span class="line">  <span class="keyword">async</span> *[<span class="title class_">Symbol</span>.<span class="property">asyncIterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="variable language_">this</span>.<span class="property">from</span>, to = <span class="variable language_">this</span>.<span class="property">to</span>; i &lt; to; i++) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> <span class="built_in">setTimeout</span>(resolve, <span class="number">1000</span>))</span><br><span class="line">      <span class="keyword">yield</span> i</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">;(<span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// for await of will call the [Symbol.asyncIterator]</span></span><br><span class="line">  <span class="keyword">for</span> <span class="keyword">await</span> (<span class="keyword">const</span> value <span class="keyword">of</span> range) <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5新标签(一)</title>
    <url>/2018/08/14/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE-%E4%B8%80/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--语义化标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>页面的头部<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>页面的底部<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>link2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span>用来划分区域<span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>用来在页面中表示一套结构完整且独立的内容部分（主题）<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aside</span>&gt;</span>和主题相关的附属信息<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span>用于对元素进行组合，一般用于图片或视屏<span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">figure</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">figcaption</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">figure</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">time</span>&gt;</span>9:00<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  明天</span><br><span class="line">  <span class="tag">&lt;<span class="name">time</span> <span class="attr">datatime</span>=<span class="string">&quot;2018-02-14&quot;</span>&gt;</span>情人节<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--用于描述文档或文档某个部分的细节--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">details</span> <span class="attr">open</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--open时默认打开--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">summary</span>&gt;</span>test<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--details元素的标题--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>testjfkdsjkfsjd<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义一段对话--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>老师<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>2 + 3 ?<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>学生<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>5<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dialog</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>定义文章或页面作者的详细联系信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mark</span>&gt;</span>需要标记的词或句子<span class="tag">&lt;/<span class="name">mark</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--keygen给表单添加一个公钥--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">  用户：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;usr_name&quot;</span> /&gt;</span> 公钥：</span><br><span class="line">  <span class="tag">&lt;<span class="name">keygen</span> <span class="attr">name</span>=<span class="string">&quot;security&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--定义进度条--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">progress</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span> <span class="attr">value</span>=<span class="string">&quot;76&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>76<span class="tag">&lt;/<span class="name">span</span>&gt;</span>%</span><br><span class="line">  <span class="comment">&lt;!--为了兼容--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">progress</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5新标签(二)</title>
    <url>/2018/08/14/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE-%E4%BA%8C/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--新的输入控件--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--email: 电子邮箱文本框，当输入的不是邮箱的时候，验证通不过。移动端的键盘会有变化--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--tel: 电话号码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;tel&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--url: 网页的url--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--search: 搜索引擎，chrom下会多个关闭按钮--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--number: 只能输入数字--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--color: 颜色选择器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--datetime: 显示日期--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--datetime-local: 显示完整日期，不含时区--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--time: 显示时间，不含时区--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--date: 显示日期--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--week: 显示周--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--month: 显示月--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--特定范围内的数值选择器 max、min、step、value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">step</span>=<span class="string">&quot;2&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;10&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP cookies</title>
    <url>/2019/05/27/HTTP-cookies/</url>
    <content><![CDATA[<h3 id="set-cookie"><a href="#set-cookie" class="headerlink" title="set-cookie"></a>set-cookie</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: value[; expires=date][; domain=domain][; path=path][; secure]</span><br></pre></td></tr></table></figure>

<p>每个选项都是用分号和空格来分开，每个选项都制定了 cookie 在什么情况下会发送给服务器</p>
<h3 id="过期时间选项"><a href="#过期时间选项" class="headerlink" title="过期时间选项"></a>过期时间选项</h3><ul>
<li>expires: 指定了 cookie 最长存储时间，过期后会被浏览器删除。值是一个 date ，格式为 WDY, <code>DD-mm-YYYY HH:MM:SS GMT</code>。</li>
<li>没有设置 expires 选项时，默认为当前会话，所设置的 cookie 在关闭浏览器时会被删除。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: name=Jack; expires=Tue, 28 May 2019 22:33:22 GMT</span><br></pre></td></tr></table></figure>

<h3 id="domain-选项"><a href="#domain-选项" class="headerlink" title="domain 选项"></a>domain 选项</h3><ul>
<li>domain: 指定了 cookie 将要被发给哪个域中。</li>
<li>默认情况下会被设置为当前域。</li>
<li>值必须是消息头主机的一部分，不合法的 domain 会直接被忽略。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: name=Jack; domain=baidu.com</span><br></pre></td></tr></table></figure>

<h3 id="path-选项"><a href="#path-选项" class="headerlink" title="path 选项"></a>path 选项</h3><ul>
<li>path: 指定了请求资源的 URL 中存在指定路径时，才会发送 cookie。</li>
<li>只有对 domain 匹配成功后才会开始匹配 path 部分。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: name=Jack; domain=baidu.com; path=/</span><br></pre></td></tr></table></figure>

<h3 id="secure-选项"><a href="#secure-选项" class="headerlink" title="secure 选项"></a>secure 选项</h3><ul>
<li>secure: 只是一个标记，当请求通过 SSL 或者 HTTPS 创建时，包含 secure 的 cookie 才会被发送至服务器。</li>
<li>默认情况下， HTTPS 上传输的 cookie 都会被自动加上 secure 选项。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: name=Jack; secure</span><br></pre></td></tr></table></figure>

<h3 id="HTTPOnly-选项"><a href="#HTTPOnly-选项" class="headerlink" title="HTTPOnly 选项"></a>HTTPOnly 选项</h3><ul>
<li>HttpOnly: 禁止浏览器通过 JavaScript 来获取 cookie ，防止 XSS 攻击。</li>
<li>这个属性也不能通过 JavaScript 来设置。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-cookie: name=Jack; HttpOnly</span><br></pre></td></tr></table></figure>

<h3 id="cookie-自动删除"><a href="#cookie-自动删除" class="headerlink" title="cookie 自动删除"></a>cookie 自动删除</h3><ol>
<li>会话结束。</li>
<li>超过过期时间。</li>
<li>cookie 数量达到限制，删除部分 cookie 以便为新创建的 cookie 腾出空间。</li>
</ol>
<h3 id="JavaScript-读取-cookie"><a href="#JavaScript-读取-cookie" class="headerlink" title="JavaScript 读取 cookie"></a>JavaScript 读取 cookie</h3><p>可以使用<code>document.cookie</code>来读取 cookie 的值。</p>
]]></content>
      <tags>
        <tag>Interview</tag>
        <tag>Network</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5新标签(三)</title>
    <url>/2018/08/14/HTML5%E6%96%B0%E6%A0%87%E7%AD%BE-%E4%B8%89/</url>
    <content><![CDATA[<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--placeholder: 输入框提示信息--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--autocomplete: 自动保存用户输入过的值，默认为on--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--pattern: 正则验证--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">    <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">placeholder</span>=<span class="string">&quot;请输入6-8个数字&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pattern</span>=<span class="string">&quot;\d&#123;6,8&#125;&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">name</span>=<span class="string">&quot;user&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">id</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  /&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--formaction: 定义提交地址--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">formaction</span>=<span class="string">&quot;http://www.baidu.com&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--autofocus: 自动焦点--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--required: 必填项--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">autofocus</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--datalist选项列表，与input元素配合使用，定义input的可能值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;varList&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;varList&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;javascript&quot;</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;html&quot;</span>&gt;</span>html<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;css&quot;</span>&gt;</span>css<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>JS 延迟加载</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--会在window.onload之前加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span> <span class="attr">defer</span>=<span class="string">&quot;defer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--异步加载--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;a.js&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;b.js&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;c.js&quot;</span> <span class="attr">async</span>=<span class="string">&quot;async&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="contextmenu"><a href="#contextmenu" class="headerlink" title="contextmenu"></a>contextmenu</h3><p>捕获右键菜单事件：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;myMenu&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> menu = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#myMenu&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;contextmenu&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">      menu.<span class="property">style</span>.<span class="property">left</span> = event.<span class="property">clientX</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      menu.<span class="property">style</span>.<span class="property">top</span> = event.<span class="property">clientY</span> + <span class="string">&quot;px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      menu.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&quot;visible&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">    <span class="string">&quot;click&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">      menu.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&quot;hidden&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="DOMContentLoaded"><a href="#DOMContentLoaded" class="headerlink" title="DOMContentLoaded"></a>DOMContentLoaded</h3><p>当初始的 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，而无需等待样式表、图像和子框架的完成加载。另一个不同的事件 load 应该仅用于检测一个完全加载的页面。 在使用 DOMContentLoaded 更加合适的情况下使用 load 是一个令人难以置信的流行的错误，所以要谨慎。注意：DOMContentLoaded 事件必须等待其所属 script 之前的样式表加载解析完成才会触发。<br>load 是在所有资源加载完成后才触发。</p>
<h3 id="readystatechange"><a href="#readystatechange" class="headerlink" title="readystatechange"></a>readystatechange</h3><p>当文档的 readyState 属性发生改变，readystatechange 事件会被触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&quot;complete&quot;</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替代 DOMContentLoaded</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">readyState</span> === <span class="string">&quot;interactive&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">initApplication</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="dragable"><a href="#dragable" class="headerlink" title="dragable"></a>dragable</h3><p>全局属性 draggable 是一个枚举类型的属性，用于标识元素是否允许使用 拖放操作 API 拖动。它的取值如下：</p>
<ul>
<li>true，表示元素可以被拖动</li>
<li>false，表示元素不可以被拖动</li>
</ul>
<p>如果该属性没有设值，则默认值 为 auto ，表示使用浏览器定义的默认行为。<br>这个属性是枚举类型，而不是 Boolean<br>默认情况下，只有已选中的文本、图片、链接可以拖动。对其它的元素来说，必须按拖动机制的顺序设置 ondragstart 事件才能正常工作:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">ondragstart</span>=<span class="string">&quot;event.dataTransfer.setData(&#x27;text/plain&#x27;, &#x27;This text may be dragged&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  This text <span class="tag">&lt;<span class="name">strong</span>&gt;</span>may<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> be dragged.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="Drag-Data"><a href="#Drag-Data" class="headerlink" title="Drag Data"></a>Drag Data</h4><p>每一个 drag events 都有一个 dataTransfer 属性，用于保存 drag data，dataTransfer 是一个 DataTransfer 对象。<br>使用 setData(type, value)来设置值。<br>例子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-id">#draggable</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background</span>: white;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.dragger-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dragger-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggable&quot;</span> <span class="attr">draggable</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Drag me<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dragger-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dragger-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dragger-container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> dragged</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;dragstart&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        dragged = event.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;dragover&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(</span></span><br><span class="line"><span class="language-javascript">      <span class="string">&quot;drop&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">className</span> == <span class="string">&quot;dragger-container&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          dragged.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(dragged)</span></span><br><span class="line"><span class="language-javascript">          event.<span class="property">target</span>.<span class="title function_">appendChild</span>(dragged)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="storage"><a href="#storage" class="headerlink" title="storage"></a>storage</h3><ul>
<li>sessionStorage: 关闭页面时会清空</li>
<li>localStorage: 关闭页面时不会清空</li>
</ul>
<p>两者 API 一致。</p>
<h3 id="requestAnimationFrame-callback"><a href="#requestAnimationFrame-callback" class="headerlink" title="requestAnimationFrame(callback)"></a>requestAnimationFrame(callback)</h3><p>表示在重绘前执行指定的回调函数，一个栗子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 50px; height: 50px; background-color: red; position: relative;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./test.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> root = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span></span><br><span class="line"><span class="keyword">let</span> left = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">requestAnimFrame = (<span class="function">() =&gt;</span></span><br><span class="line">  requestAnimationFrame ||</span><br><span class="line">  webkitRequestAnimationFrame ||</span><br><span class="line">  mozRequestAnimationFrame ||</span><br><span class="line">  (<span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">1000</span> / <span class="number">60</span>)</span><br><span class="line">  &#125;))()</span><br><span class="line">;(<span class="keyword">function</span> <span class="title function_">_animation</span>(<span class="params"></span>) &#123;</span><br><span class="line">  left == <span class="number">0</span> ? (flag = <span class="literal">true</span>) : left == <span class="number">100</span> ? (flag = <span class="literal">false</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">  flag ? (root.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;left++&#125;</span>px`</span>) : (root.<span class="property">style</span>.<span class="property">left</span> = <span class="string">`<span class="subst">$&#123;left--&#125;</span>px`</span>)</span><br><span class="line">  <span class="title function_">requestAnimFrame</span>(_animation)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>Haskell 命令行参数</title>
    <url>/2019/04/22/Haskell-%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> System.Environment</span><br><span class="line"><span class="keyword">import</span> System.Directory</span><br><span class="line"><span class="keyword">import</span> System.IO</span><br><span class="line"><span class="keyword">import</span> Data.List</span><br><span class="line"></span><br><span class="line"><span class="title">main</span> = <span class="keyword">do</span></span><br><span class="line">  (command:args) &lt;- getArgs                     <span class="comment">-- get the command</span></span><br><span class="line">  <span class="keyword">let</span> (<span class="type">Just</span> action) = lookup command dispatch   <span class="comment">-- find the command</span></span><br><span class="line">  action args                                   <span class="comment">-- do something</span></span><br><span class="line"></span><br><span class="line"><span class="title">add</span> :: [<span class="type">String</span>] -&gt; <span class="type">IO</span> ()</span><br><span class="line"><span class="title">add</span> [fileName, todoItem] = appendFile fileName (todoItem ++ <span class="string">&quot;\n&quot;</span>) <span class="comment">-- add the todoItem</span></span><br><span class="line"></span><br><span class="line"><span class="title">view</span> :: [<span class="type">String</span>] -&gt; <span class="type">IO</span> ()</span><br><span class="line"><span class="title">view</span> [fileName]     =  <span class="keyword">do</span>                                              <span class="comment">-- match the filename</span></span><br><span class="line">  contents          &lt;- readFile fileName                               <span class="comment">-- read the file</span></span><br><span class="line">  <span class="keyword">let</span> todoTasks     =  lines contents                                  <span class="comment">-- get the contents</span></span><br><span class="line">      numberedTasks =  zipWith (\n line -&gt; show n ++ <span class="string">&quot;: &quot;</span> ++ line) [<span class="number">0</span>..] todoTasks</span><br><span class="line">  putStrLn $ unlines numberedTasks                                     <span class="comment">-- show the items</span></span><br><span class="line"></span><br><span class="line"><span class="title">remove</span> :: [<span class="type">String</span>] -&gt; <span class="type">IO</span> ()</span><br><span class="line"><span class="title">remove</span> [fileName, numberString] = <span class="keyword">do</span>                              <span class="comment">-- get the filename and the line number</span></span><br><span class="line">  handle &lt;- openFile fileName <span class="type">ReadMode</span></span><br><span class="line">  (tempName, tempHandle) &lt;- openTempFile <span class="string">&quot;.&quot;</span> <span class="string">&quot;temp&quot;</span>               <span class="comment">-- create a temp file</span></span><br><span class="line">  contents &lt;- hGetContents handle                                 <span class="comment">-- get contents from the handle</span></span><br><span class="line">  <span class="keyword">let</span> number = read numberString                                  <span class="comment">-- read the String to Number</span></span><br><span class="line">      todoTasks = lines contents</span><br><span class="line">      newTodoTasks = delete (todoTasks !! number) todoTasks       <span class="comment">-- remove the line of the number</span></span><br><span class="line">  hPutStr tempHandle $ unlines newTodoTasks                       <span class="comment">-- putStr into the tempfile</span></span><br><span class="line">  hClose handle                                                   <span class="comment">-- close handles</span></span><br><span class="line">  hClose tempHandle</span><br><span class="line">  removeFile fileName</span><br><span class="line">  renameFile tempName fileName</span><br><span class="line"></span><br><span class="line"><span class="title">dispatch</span> :: [(<span class="type">String</span>, [<span class="type">String</span>] -&gt; <span class="type">IO</span> ())]</span><br><span class="line"><span class="title">dispatch</span> = [</span><br><span class="line">    (<span class="string">&quot;add&quot;</span>, add),</span><br><span class="line">    (<span class="string">&quot;view&quot;</span>, view),</span><br><span class="line">    (<span class="string">&quot;remove&quot;</span>, remove)</span><br><span class="line">  ]</span><br><span class="line"></span><br><span class="line"><span class="comment">-- runhaskell arags-test.hs view newData.txt</span></span><br><span class="line"><span class="comment">-- runhaskell args-test.hs add newData.txt &quot;Say Hello&quot;</span></span><br><span class="line"><span class="comment">-- runhaskell args-test.hs remove newData.txt 4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Haskell</tag>
      </tags>
  </entry>
  <entry>
    <title>Ignore Flutter android GPU debug log</title>
    <url>/2024/12/02/Ignore-Flutter-android-GPU-debug-log/</url>
    <content><![CDATA[<p>在使用 Android dev 开发 flutter 应用时,控制台会输出 GPU debug 日志:</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[+1001 ms] D/EGL_emulation( 9434): app_time_stats: avg=1001.31ms min=1001.31ms max=1001.31ms count=1</span><br><span class="line">[+1989 ms] D/EGL_emulation( 9434): app_time_stats: avg=994.95ms min=992.16ms max=997.75ms count=2</span><br><span class="line">[+1996 ms] D/EGL_emulation( 9434): app_time_stats: avg=998.40ms min=994.74ms max=1002.06ms count=2</span><br><span class="line">[+2005 ms] D/EGL_emulation( 9434): app_time_stats: avg=1002.85ms min=990.68ms max=1015.03ms count=2</span><br><span class="line">[+1983 ms] D/EGL_emulation( 9434): app_time_stats: avg=991.95ms min=987.00ms max=996.89ms count=2</span><br><span class="line">[+1016 ms] D/EGL_emulation( 9434): app_time_stats: avg=1015.37ms min=1015.37ms max=1015.37ms count=1</span><br><span class="line">[+1002 ms] D/EGL_emulation( 9434): app_time_stats: avg=1002.23ms min=1002.23ms max=1002.23ms count=1</span><br><span class="line">[+1002 ms] D/EGL_emulation( 9434): app_time_stats: avg=1003.33ms min=1003.33ms max=1003.33ms count=1</span><br><span class="line">[+1008 ms] D/EGL_emulation( 9434): app_time_stats: avg=1005.76ms min=1005.76ms max=1005.76ms count=1</span><br><span class="line">[+1997 ms] D/EGL_emulation( 9434): app_time_stats: avg=999.30ms min=994.23ms max=1004.37ms count=2</span><br><span class="line">[+1998 ms] D/EGL_emulation( 9434): app_time_stats: avg=998.66ms min=998.60ms max=998.71ms count=2</span><br><span class="line">[+2000 ms] D/EGL_emulation( 9434): app_time_stats: avg=1000.03ms min=998.15ms max=1001.91ms count=2</span><br><span class="line">[+1998 ms] D/EGL_emulation( 9434): app_time_stats: avg=999.53ms min=999.27ms max=999.79ms count=2</span><br><span class="line">[+1990 ms] D/EGL_emulation( 9434): app_time_stats: avg=995.32ms min=993.38ms max=997.25ms count=2</span><br><span class="line">[+1001 ms] D/EGL_emulation( 9434): app_time_stats: avg=1001.47ms min=1001.47ms max=1001.47ms count=1</span><br><span class="line">[+1001 ms] D/EGL_emulation( 9434): app_time_stats: avg=1001.27ms min=1001.27ms max=1001.27ms count=1</span><br><span class="line">[+1004 ms] D/EGL_emulation( 9434): app_time_stats: avg=1004.90ms min=1004.90ms max=1004.90ms count=1</span><br><span class="line">[+1005 ms] D/EGL_emulation( 9434): app_time_stats: avg=1005.88ms min=1005.88ms max=1005.88ms count=1</span><br><span class="line">[+1979 ms] D/EGL_emulation( 9434): app_time_stats: avg=989.67ms min=979.52ms max=999.82ms count=2</span><br></pre></td></tr></table></figure>

<p>这些日志并不影响应用的运行,但是会占用控制台的空间,可以通过以下方式忽略掉:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flutter run --dart-define=ENV=dev --verbose | grep -v &quot;EGL_emulation&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Flutter</category>
      </categories>
      <tags>
        <tag>Flutter</tag>
        <tag>Debugging</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Higher Order Components</title>
    <url>/2020/08/11/Higher-Order-Components/</url>
    <content><![CDATA[<h3 id="使用-HOC-进行代码复用"><a href="#使用-HOC-进行代码复用" class="headerlink" title="使用 HOC 进行代码复用"></a>使用 HOC 进行代码复用</h3><p>假设存在下面两个组件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonCounter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; step &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: pre.<span class="property">count</span> + step,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.increase&#125;</span>&gt;</span>click &#123;count&#125; times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ButtonCounter</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonCounter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; step &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">count</span>: pre.<span class="property">count</span> + step,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onMouseLeave</span>=<span class="string">&#123;this.increase&#125;</span>&gt;</span>click &#123;count&#125; times<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">ButtonCounter</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-HOC-进行改造"><a href="#使用-HOC-进行改造" class="headerlink" title="使用 HOC 进行改造"></a>使用 HOC 进行改造</h3><p>HOC 通过传入的组件，返回一个新的组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withCounter</span> = (<span class="params">OriginalComponent</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">newComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">OriginalComponent</span> /&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withCounter</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="将-counter-中的方法放到-HOC-中"><a href="#将-counter-中的方法放到-HOC-中" class="headerlink" title="将 counter 中的方法放到 HOC 中"></a>将 counter 中的方法放到 HOC 中</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">withCounter</span> = (<span class="params">OriginalComponent, step</span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 将step从props中抽离出来</span></span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">newComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">      <span class="variable language_">super</span>(props)</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">        <span class="attr">count</span>: <span class="number">0</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    increase = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(<span class="function">(<span class="params">pre</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">count</span>: pre.<span class="property">count</span> + step,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> &#123; count &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">OriginalComponent</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">increase</span>=<span class="string">&#123;this.increase&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">count</span>=<span class="string">&#123;count&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;<span class="attr">...this.props</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        /&gt;</span></span></span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newComponent</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> withCounter</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> withCounter <span class="keyword">from</span> <span class="string">&quot;../util/withCounter&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ButtonCounter</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; increase, count &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;increase&#125;</span>&gt;</span>click &#123;count&#125; times<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">withCounter</span>(<span class="title class_">ButtonCounter</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>React</tag>
        <tag>HOC</tag>
      </tags>
  </entry>
  <entry>
    <title>Iterator</title>
    <url>/2018/08/31/Iterator/</url>
    <content><![CDATA[<h3 id="Iterator-概念"><a href="#Iterator-概念" class="headerlink" title="Iterator 概念"></a>Iterator 概念</h3><p>Iterator 是一种接口，为各种不同的数据结构提供统一的访问机制。任何数据结构，只要部署 Iterator 接口，就可以完成遍历操作。<br>Iterator 的主要作用：为数据结构提供统一的、简便的访问接口；使得数据结构的成员能够按照某种次序排列；供 for…of 消费。<br>遍历过程如下：</p>
<ol>
<li>创建一个指针对象，指向当前数据结构的起始位置。</li>
<li>第一次调用指针对象的 next 方法，将指针指向数据结构的第一个成员。</li>
<li>第二次调用 next 方法，指向第二个成员。</li>
<li>不断调用 next 方法，直到指针指向数据结构的结束位置。</li>
</ol>
<p>每次调用 next 方法都会返回数据结构当前成员的信息，返回一个包含 value 的 done 两个属性的对象。value 属性是当前成员的值，done 属性是一个布尔值，表示遍历是否结束。<br>模拟 next 方法返回值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = <span class="title function_">makeIterator</span>([<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>])</span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value : &#x27;a&#x27;, done : false &#125;</span></span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value : &#x27;b&#x27;, done : false &#125;</span></span><br><span class="line">it.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeIterator</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> nextIndex = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> nextIndex &lt; array.<span class="property">length</span></span><br><span class="line">        ? &#123; <span class="attr">value</span>: array[nextIndex++], <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">        : &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历器与所遍历的数据结构实际上是分开的，完全可以写出没有对应数据结构的遍历器对象，或者用遍历器对象模拟出数据结构。无限运行的遍历器对象的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> it = <span class="title function_">idMaker</span>()</span><br><span class="line">it.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// 0</span></span><br><span class="line">it.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// 1</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">idMaker</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: index++, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="默认-Iterator-接口"><a href="#默认-Iterator-接口" class="headerlink" title="默认 Iterator 接口"></a>默认 Iterator 接口</h3><p>类部署 Iterator 接口：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RangeIterator</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">start, stop</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = start</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stop</span> = stop</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="variable language_">this</span>.<span class="property">value</span></span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="variable language_">this</span>.<span class="property">stop</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">value</span>++</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: value, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">range</span>(<span class="params">start, stop</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RangeIterator</span>(start, stop)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> value <span class="keyword">of</span> <span class="title function_">range</span>(<span class="number">0</span>, <span class="number">3</span>)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 0, 1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现指针结构：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> iterator = &#123; <span class="attr">next</span>: next &#125;</span><br><span class="line">  <span class="keyword">var</span> current = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (current) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = current.<span class="property">value</span> <span class="comment">// 获取当前值</span></span><br><span class="line">      current = current.<span class="property">next</span> <span class="comment">// 指向下一个实例</span></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">value</span>: value, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> iterator</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="number">2</span>)</span><br><span class="line"><span class="keyword">var</span> three = <span class="keyword">new</span> <span class="title class_">Obj</span>(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">one.<span class="property">next</span> = two</span><br><span class="line">two.<span class="property">next</span> = three</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">of</span> one) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 1, 2, 3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为对象添加 Iterator 接口：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">data</span>: [<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">const</span> self = <span class="variable language_">this</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; self.<span class="property">data</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">value</span>: self.<span class="property">data</span>[index++],</span><br><span class="line">            <span class="attr">done</span>: <span class="literal">false</span>,</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="literal">undefined</span>, <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>类似数组对象调用数组的 Symbol.iterator 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> iterable = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>[<span class="title class_">Symbol</span>.<span class="property">iterator</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> iterable) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>普通对象部署数组的 Symbol.iterator 方法并无效果。<br><strong>如果 Symbol.iterator 方法对应的不是遍历器生成对象（即会返回一个遍历器对象），解释引擎将会报错。</strong></p>
<h3 id="调用-Iterator-的场合"><a href="#调用-Iterator-的场合" class="headerlink" title="调用 Iterator 的场合"></a>调用 Iterator 的场合</h3><ul>
<li>解构赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>().<span class="title function_">add</span>(<span class="string">&#x27;a&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;b&#x27;</span>).<span class="title function_">add</span>(<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> [x, y] = set <span class="comment">// x = a, y = b</span></span><br><span class="line"><span class="keyword">let</span> [first, ...rest] = set <span class="comment">// first = &#x27;a&#x27;, rest = [&#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>拓展运算符</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">;[...str] <span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">;[<span class="string">&#x27;a&#x27;</span>, ...arr, <span class="string">&#x27;d&#x27;</span>] <span class="comment">// [&#x27;a&#x27;, b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>yield*<br>yield*后面跟着是一个可遍历的结构，它会调用该结构的遍历器接口。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> generator = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span>* [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">generator</span>()</span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 1, done : false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 2, done : false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 3, done : false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 4, done : false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : 5, done : false &#125;</span></span><br><span class="line">iterator.<span class="title function_">next</span>() <span class="comment">// &#123; value : undefined, done : true &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="字符串的-Iterator-接口"><a href="#字符串的-Iterator-接口" class="headerlink" title="字符串的 Iterator 接口"></a>字符串的 Iterator 接口</h3><p>覆盖原生的 Symbol.iterator 方法达到修改遍历器行为的目的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line">;[...str] <span class="comment">// [&#x27;h&#x27;, &#x27;i&#x27;]</span></span><br><span class="line">str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_first</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_first</span> = <span class="literal">false</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">value</span>: <span class="string">&#x27;bye&#x27;</span>, <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">_first</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">;[...str] <span class="comment">// [&#x27;bye&#x27;]</span></span><br><span class="line">str <span class="comment">//&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Iterator-接口与-Generator-函数"><a href="#Iterator-接口与-Generator-函数" class="headerlink" title="Iterator 接口与 Generator 函数"></a>Iterator 接口与 Generator 函数</h3><p>Symbol.iterator 方法的最简单实现还是使用 Generator 函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myIterable = &#123;&#125;</span><br><span class="line">myIterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">;[...myIterable] <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="comment">//或下面的写法</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> obj) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="return-、throw"><a href="#return-、throw" class="headerlink" title="return()、throw()"></a>return()、throw()</h3><p>return 使用的场合是，如果 for…of 循环提前退出（error、continue、break)，会调用 return 方法。如果一个对象在完成遍历以前需要清理或释放资源，就可以部署 return 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">readLinesSync</span>(<span class="params">file</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">return</span>() &#123;</span><br><span class="line">      file.<span class="title function_">close</span>()</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> line <span class="keyword">of</span> <span class="title function_">readLinesSync</span>(fileName)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(line)</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>return 必须返回一个对象，这是 Generator 规定的</strong></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>数组原生具备 Iterator 接口：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>].<span class="title function_">bind</span>(arr)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> arr) <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> obj) <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line"><span class="comment">//完全相同的结果</span></span><br></pre></td></tr></table></figure>

<p>for…of 可以代替 forEach 方法，for…in 获取对象的键名，for…of 获取对象的键值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">in</span> arr) <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 0 1 2 3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> a <span class="keyword">of</span> arr) <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27; &#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>

<p>for…of 只返回具有数字索引的属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">arr.<span class="property">foo</span> = <span class="string">&#x27;fun&#x27;</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">in</span> arr) <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 0 1 2 foo</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i <span class="keyword">of</span> arr) <span class="variable language_">console</span>.<span class="title function_">log</span>(i) <span class="comment">// 3 4 5</span></span><br></pre></td></tr></table></figure>

<h3 id="Set-和-Map-结构"><a href="#Set-和-Map-结构" class="headerlink" title="Set 和 Map 结构"></a>Set 和 Map 结构</h3><p>Set 和 Map 结构原生具有 Iterator 接口，可以直接使用 for…of。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> engines = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;bbb&#x27;</span>, <span class="string">&#x27;ccc&#x27;</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> e <span class="keyword">of</span> engines) <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">// aaa bbb ccc</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> es = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">es.<span class="title function_">set</span>(<span class="string">&#x27;edition&#x27;</span>, <span class="number">6</span>)</span><br><span class="line">es.<span class="title function_">set</span>(<span class="string">&#x27;committee&#x27;</span>, <span class="string">&#x27;TC39&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> [name, value] <span class="keyword">of</span> es) <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&#x27; : &#x27;</span> + value)</span><br><span class="line"><span class="comment">// edition : 6</span></span><br><span class="line"><span class="comment">// committee : TC39</span></span><br></pre></td></tr></table></figure>

<h3 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h3><ul>
<li>entries()返回一个遍历器对象，用于遍历[键名，键值]组成的数组</li>
<li>keys()返回一个遍历器对象，用于遍历所有键名</li>
<li>values()返回一个遍历器对象，用于遍历所有键值</li>
</ul>
<h3 id="类似数组对象"><a href="#类似数组对象" class="headerlink" title="类似数组对象"></a>类似数组对象</h3><p>用 Array.from()方法转为数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123; <span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">1</span>: <span class="string">&#x27;b&#x27;</span> &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)) <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">// &#x27;a&#x27; &#x27;b&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="普通对象"><a href="#普通对象" class="headerlink" title="普通对象"></a>普通对象</h3><p>for…in 仍可用于遍历键名，但是 for…of 不能使用，一种解决方法是使用 Object.keys()生成一个键名数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(object)) <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;:&#x27;</span> + object[key])</span><br></pre></td></tr></table></figure>

<p>另一个方法是使用 Generator 函数将对象重新包装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">entries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> <span class="title function_">entries</span>(obj)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(key + <span class="string">&#x27;-&gt;&#x27;</span> + value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for…in 的不足：</p>
<ol>
<li>数组的键名是数字，但是 for…in 循环是以字符串作为键名，’0’、’1’等</li>
<li>for…in 循环不仅会遍历数字键名，还会遍历手动添加的其他键，甚至包括原型链上的键</li>
<li>某些情况下，for…in 会以任意顺序遍历键名</li>
</ol>
<h3 id="Update-on-6-22-2021"><a href="#Update-on-6-22-2021" class="headerlink" title="Update on 6&#x2F;22&#x2F;2021"></a>Update on 6&#x2F;22&#x2F;2021</h3><h4 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> range = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">current</span>: <span class="variable language_">this</span>.<span class="property">from</span>,</span><br><span class="line">      <span class="attr">last</span>: <span class="variable language_">this</span>.<span class="property">to</span>,</span><br><span class="line"></span><br><span class="line">      <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> &lt;= <span class="variable language_">this</span>.<span class="property">last</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++ &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;second range&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> range) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Another-Range"><a href="#Another-Range" class="headerlink" title="Another Range"></a>Another Range</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> anotherRange = &#123;</span><br><span class="line">  <span class="attr">from</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">to</span>: <span class="number">5</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="variable language_">this</span>.<span class="property">from</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">next</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">current</span> &lt;= <span class="variable language_">this</span>.<span class="property">to</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">current</span>++ &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> anotherRange) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;another range&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> anotherRange) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Get-Iterator"><a href="#Get-Iterator" class="headerlink" title="Get Iterator"></a>Get Iterator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = str[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = iterator.<span class="title function_">next</span>()</span><br><span class="line">  <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5表单验证反馈</title>
    <url>/2018/08/14/HTML5%E8%A1%A8%E5%8D%95%E9%AA%8C%E8%AF%81%E5%8F%8D%E9%A6%88/</url>
    <content><![CDATA[<h3 id="validity-对象"><a href="#validity-对象" class="headerlink" title="validity 对象"></a>validity 对象</h3><p>通过 validity 对象，通过下面的 valid 可以查看验证是否通过，如果八种验证都通过返回 true，有一种失败则返回 false</p>
<ul>
<li>oText.addEventListener(‘invalid’, fn, false);</li>
<li>ev.preventDefault()</li>
<li>valueMissing: 输入值为空时</li>
<li>typeMismatch: 控件值与预期类型不匹配</li>
<li>patterMismatch: 输入值不满足 pattern 正则</li>
<li>tooLong: 超过 maxLength 最大限制</li>
<li>rangeUnderflow: 验证的 range 最小值</li>
<li>rangeOverflow: 验证的 range 最大值</li>
<li>setMismatch: 验证 range 的当前值是否符合 min、max、step 的规则</li>
<li>customError: 不符合自定义验证–setCustomValidity()设置自定义验证</li>
</ul>
<span id="more"></span>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oText = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;text&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  oText.<span class="title function_">addEventListener</span>(<span class="string">&quot;invalid&quot;</span>, fn, <span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">validity</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">validity</span>.<span class="property">valid</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>JSDoc remark</title>
    <url>/2021/07/13/JSDoc-remark/</url>
    <content><![CDATA[<h3 id="Class-in-ES2015"><a href="#Class-in-ES2015" class="headerlink" title="Class in ES2015"></a>Class in ES2015</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing a point.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create a point.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span> - The x value.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">y</span> - The y value.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the x value.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; The x value.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getX</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Convert a string containing two comma-separated number into a point.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">str</span> - The string containing two comma-separated number.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Point</span>&#125; A point object.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">fromStringStr</span>(<span class="params">str</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Class representing a point.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@extends</span> <span class="variable">Point</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dot</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Create a dot.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">x</span> - The x value.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">y</span> - The y value.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">width</span> - The width of the dot.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, width</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(x, y)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Get the width of the dot.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; The dot&#x27;s width.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">getWidth</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="abstract"><a href="#abstract" class="headerlink" title="@abstract"></a>@abstract</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Foo.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if is solid.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@abstract</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isSolid</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Must be implemented by suclass.&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Bar.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@arguments</span> <span class="variable">Foo</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Bar</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Check if is solid.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">boolean</span>&#125; Always return false.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Bar</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">isSolid</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="assets"><a href="#assets" class="headerlink" title="@assets"></a>@assets</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@assets</span> <span class="variable">private</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">let</span> foo = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@assets</span> <span class="variable">protected</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="string">&quot;1&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@assets</span> <span class="variable">package</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">barz</span> = <span class="string">&quot;2&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@assets</span> <span class="variable">public</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@type</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">barm</span> = <span class="string">&quot;3&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="author"><a href="#author" class="headerlink" title="@author"></a>@author</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Edward &lt;wang.huiyang<span class="doctag">@outlook</span>.com&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyClass</span>(<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="callback"><a href="#callback" class="headerlink" title="@callback"></a>@callback</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Send a request.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">requestCallback</span>&#125; <span class="variable">cb</span> - The callback than handles the response.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">send</span> = <span class="keyword">function</span> (<span class="params">cb</span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Callback</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@callback</span> <span class="variable">requestCallback</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">responseCode</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">responseMessage</span></span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>

<h3 id="event"><a href="#event" class="headerlink" title="@event"></a>@event</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Do some test.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@fires</span> Foo#test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">test</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Foo test.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@event</span> Foo#test</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@type</span> &#123;<span class="type">object</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@property</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">isPass</span> - Check if is pass.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON新方法</title>
    <url>/2018/08/15/JSON%E6%96%B0%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h3><p>eval 可以解析任何字符串变成 JS：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;function testFunction() &#123;console.log(&#x27;test&#x27;);&#125;&quot;</span></span><br><span class="line"><span class="built_in">eval</span>(str)</span><br><span class="line"><span class="title function_">testFunction</span>() <span class="comment">//&#x27;test&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON-parse"><a href="#JSON-parse" class="headerlink" title="JSON.parse()"></a>JSON.parse()</h3><p>JSON.parse 只能解析 JSON 形式的字符串变成 JS，安全性比 eval 高一些。<br><strong>字符串中的属性要严格加上引号</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&#123; &quot;name&quot; : &quot;hello&quot; &#125;&#x27;</span></span><br><span class="line"><span class="keyword">let</span> json = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str)</span><br><span class="line">json.<span class="property">name</span> <span class="comment">//&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p>JSON.stringify 将 JSON 转换成字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(json)</span><br><span class="line">str <span class="comment">//&#123;&quot;name&quot;:&quot;hello&quot;&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="复制对象出现的问题"><a href="#复制对象出现的问题" class="headerlink" title="复制对象出现的问题"></a>复制对象出现的问题</h3><p>由于&#x3D;赋值，会有引用的问题，新对象属性改变可能会影响到源对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = a</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&quot;hi&quot;</span></span><br><span class="line">a.<span class="property">name</span> <span class="comment">//&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可以用 JSON 的新方法解决：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;hello&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a))</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&quot;ni&quot;</span></span><br><span class="line">a.<span class="property">name</span> <span class="comment">//&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="JS-历史管理"><a href="#JS-历史管理" class="headerlink" title="JS 历史管理"></a>JS 历史管理</h3><p>触发历史管理的方法：</p>
<ul>
<li>通过跳转页面</li>
<li>hash</li>
<li>pushState</li>
</ul>
<h3 id="Update-at-2021-6-24"><a href="#Update-at-2021-6-24" class="headerlink" title="Update at 2021&#x2F;6&#x2F;24"></a>Update at 2021&#x2F;6&#x2F;24</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> room = &#123; <span class="attr">number</span>: <span class="number">23</span> &#125;</span><br><span class="line"><span class="keyword">let</span> meetup = &#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&quot;Conference&quot;</span>,</span><br><span class="line">  <span class="attr">participants</span>: [&#123; <span class="attr">name</span>: <span class="string">&quot;John&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;Alice&quot;</span> &#125;],</span><br><span class="line">  <span class="attr">place</span>: room,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">room.<span class="property">occupiedBy</span> = meetup <span class="comment">// circular reference</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(</span><br><span class="line">    meetup,</span><br><span class="line">    <span class="function">(<span class="params">key, value</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> key === <span class="string">&quot;occupiedBy&quot;</span> ? <span class="literal">undefined</span> : value</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="number">2</span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> toJson = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="title function_">toJSON</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(toJson))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript6</category>
      </categories>
      <tags>
        <tag>ECMAScript6</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux基本命令</title>
    <url>/2019/04/23/Linux%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h3 id="Linux-常用命令"><a href="#Linux-常用命令" class="headerlink" title="Linux 常用命令"></a>Linux 常用命令</h3><ul>
<li>man: an interface to the on-line reference manuals</li>
<li>su [options] [username]: change user ID or become superuser</li>
<li>useradd [options] LOGIN: create a new user or update default new user information</li>
<li>userdel [options] LOGIN: delete a user account and related files</li>
<li>passwd [options] [LOGIN]: change user password</li>
<li>ps [options]: report a snapshot of the current process.</li>
<li>kill [options] <pid> […]: send a signal to a process</li>
<li>fdisk [options] device: manipulate disk partition table</li>
<li>mount: mount a filesystem</li>
<li>chown [OPTION] … [OWNER]:[GROUP]] FILE …: change file owner and group</li>
<li>chgrp [OPTION] … GROUP FILE …: change group ownership</li>
<li>chmod [OPTION] … MODE[,MODE] … FILE …: change file mode bits</li>
<li>grep [OPTION] PATTERN [FILE…]: print lines matching a pattern</li>
<li>find [-H] [-L] [-P] [-D debugopts] [-Olevel] [starting-point…] [expression]: search for files in a directory hierarchy</li>
<li>ln: make links between files</li>
<li>gzip, gunzip, zcat: compress or expand files</li>
<li>tar: an archiving utility</li>
<li>diff [OPTION] … FILES: compare files line by line</li>
<li>patch -pnum &lt; patchfile: apply a diff file to an original</li>
<li>ifconfig: configure a network interface</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux多线程 作业</title>
    <url>/2019/05/20/Linux%E5%A4%9A%E7%BA%BF%E7%A8%8B-%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><p>父进程创建 3 个进程，父进程等待子进程 2 运行完成之后，自行退出；其中子进程 1 运行系统命令“cp &#x2F;bin&#x2F;ls &#x2F;tmp”；等待 2 秒后退出；子进程 2 使用标准 I&#x2F;O 函数打开文件 src_file，向其内写入“this is process 2\n”，之后等待 5 秒后退出；子进程 3 处理为守护进程，每隔 5 秒向日志文件&#x2F;var&#x2F;log&#x2F;messages 写入“this is process 3\n”</p>
<h3 id="提交形式"><a href="#提交形式" class="headerlink" title="提交形式"></a>提交形式</h3><ol>
<li>代码</li>
<li>运行结果截图</li>
</ol>
<span id="more"></span>

<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pid_t</span> child, child1, child2, daemon;</span><br><span class="line">  <span class="type">int</span> i, fd, sid;</span><br><span class="line">  <span class="type">char</span>* message1 = <span class="string">&quot;this is a process 2.\n&quot;</span>;</span><br><span class="line">  <span class="type">char</span>* message2 = <span class="string">&quot;this is a process 3.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  child1 = fork();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (child1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Child1 fork error.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child1 == <span class="number">0</span>) &#123; <span class="comment">// child1 thread</span></span><br><span class="line">    <span class="keyword">if</span> (execlp(<span class="string">&quot;cp&quot;</span>, <span class="string">&quot;cp&quot;</span>, <span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;/tmp&quot;</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Child1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// father thread</span></span><br><span class="line"></span><br><span class="line">    child2 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child2 == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Child2 fork error.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child2 == <span class="number">0</span>) &#123; <span class="comment">// child2 thread</span></span><br><span class="line">      <span class="keyword">if</span> ((fd = open(<span class="string">&quot;./src_file&quot;</span>, O_CREAT|O_WRONLY|O_APPEND, <span class="number">0600</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open file error.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      write(fd, message1, <span class="built_in">strlen</span>(message1) + <span class="number">1</span>);</span><br><span class="line">      sleep(<span class="number">5</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      child = waitpid(child1, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">      <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child1 is running.\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (child == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      child = waitpid(child2, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">      <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;child2 is running.\n&quot;</span>);</span><br><span class="line">         sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (child == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    daemon = fork(); <span class="comment">// fork daemon</span></span><br><span class="line"></span><br><span class="line">    openlog(<span class="string">&quot;test_syslog&quot;</span>, LOG_PID, LOG_DAEMON); <span class="comment">// open syslog</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (daemon &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Daemon fork error.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (daemon &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// father thread exit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sid = setsid()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      syslog(LOG_ERR, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;setsid&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sid = chdir(<span class="string">&quot;/&quot;</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      syslog(LOG_ERR, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;chdir&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start make daemon thread</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; getdtablesize(); i++) &#123;</span><br><span class="line">      close(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">// start run daemon thread</span></span><br><span class="line">      <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/var/log/message&quot;</span>, O_CREAT|O_WRONLY|O_APPEND, <span class="number">0600</span>)) &lt; <span class="number">0</span>) &#123; <span class="comment">// get the fildes</span></span><br><span class="line">        syslog(LOG_ERR, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      write(fd, message2, <span class="built_in">strlen</span>(message2) + <span class="number">1</span>);</span><br><span class="line">      close(fd);</span><br><span class="line">      sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closelog();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Multithreading</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux文件及文件系统</title>
    <url>/2019/04/22/Linux%E6%96%87%E4%BB%B6%E5%8F%8A%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><ul>
<li>普通文件</li>
<li>目录文件</li>
<li>链接文件：类似 Windows 的快捷方式，分软链接和硬链接</li>
<li>设备文件：一般在&#x2F;dev 目录下，一种是块设备文件，一种是字符设备文件</li>
</ul>
<h3 id="文件属性"><a href="#文件属性" class="headerlink" title="文件属性"></a>文件属性</h3><p><code>-rwxrwxrwx</code></p>
<ul>
<li>r: read</li>
<li>w: write</li>
<li>x: execute</li>
</ul>
<p>第一个字符：</p>
<ul>
<li>- : 普通文件</li>
<li>d : 目录文件</li>
<li>l : 链接文件</li>
<li>c : 字符设备</li>
<li>b : 块设备</li>
<li>p : 命名管道，如 FIFO</li>
<li>f : 堆栈文件，如 LIFO</li>
<li>s : 套接字</li>
</ul>
<p>之后的三个三位字符组：</p>
<ol>
<li>第一组代表文件拥有者(u)对该文件的权限</li>
<li>第二组代表文件用户组(g)对该文件的权限</li>
<li>第三组代表系统其它用户(o)对该文件的权限</li>
</ol>
<h3 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h3><ul>
<li>ext2 &amp; ext3：ext3 是 ext2 的升级版本</li>
<li>swap：交换分区使用</li>
<li>vfat：DOS 中的系统（FAT12、FAT16 和 FAT32 等）</li>
<li>NFS：网络文件系统</li>
<li>ISO9660：光盘文件系统</li>
</ul>
<span id="more"></span>

<h3 id="Red-Hat-目录结构"><a href="#Red-Hat-目录结构" class="headerlink" title="Red Hat 目录结构"></a>Red Hat 目录结构</h3><ul>
<li>&#x2F;bin: Linux 常用操作命令的执行文件（mv、ls、mkdir），有时与&#x2F;usr&#x2F;bin 一样，放置一般用户执行文件</li>
<li>&#x2F;boot: 操作系统启动时所用到的程序，如&#x2F;boot&#x2F;grub</li>
<li>&#x2F;dev: Linux 系统中使用的外部设备，逻辑地址</li>
<li>&#x2F;etc: 系统管理时用到的配置文件和子目录（网络配置文件、文件系统、设备配置信息、设置用户信息等）</li>
<li>&#x2F;etc&#x2F;rc.d: Linux 启用和关闭时用到的脚本文件</li>
<li>&#x2F;etc&#x2F;rc.d&#x2F;init: Linux 服务默认启动的脚本（可能用到&#x2F;etc&#x2F;xinetd.d 下的内容）</li>
<li>&#x2F;home: Linux 默认的用户工作目录</li>
<li>&#x2F;lib: 系统动态链接共享库</li>
<li>&#x2F;lost+found: 系统遗失的片段存放在此目录</li>
<li>&#x2F;media: 光驱和软驱的挂载点</li>
<li>&#x2F;misc: 从 DOS 下安装的 tools</li>
<li>&#x2F;mnt: 光驱、软驱、硬盘的挂载点。也可挂载临时文件</li>
<li>&#x2F;proc: 系统核心与执行程序的信息</li>
<li>&#x2F;root: su 用户登录的主目录</li>
<li>&#x2F;sbin: su 用户常用的系统管理程序</li>
<li>&#x2F;tmp: 临时文件</li>
<li>&#x2F;usr: 类似 Windows 的 Program Files</li>
<li>&#x2F;usr&#x2F;bin: 系统用户使用的程序</li>
<li>&#x2F;usr&#x2F;sbin: su 用户使用的管理程序和守护程序</li>
<li>&#x2F;usr&#x2F;src: 内核源码默认放置目录</li>
<li>&#x2F;srv: 存放服务启动后需要提取的数据</li>
<li>&#x2F;var: 服务日志信息</li>
</ul>
<!-- more -->

<h3 id="Linux-C-编程"><a href="#Linux-C-编程" class="headerlink" title="Linux C 编程"></a>Linux C 编程</h3><p>exec 函数组：执行后，如果出错才会返回-1，否则会取代进程。<br>多进程例子:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pid_t</span> child, child1, child2, daemon;</span><br><span class="line">  <span class="type">int</span> i, fd, sid;</span><br><span class="line">  <span class="type">char</span>* message1 = <span class="string">&quot;this is a process 2.\n&quot;</span>;</span><br><span class="line">  <span class="type">char</span>* message2 = <span class="string">&quot;this is a process 3.\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">  child1 = fork();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (child1 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Child1 fork error.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child1 == <span class="number">0</span>) &#123; <span class="comment">// child1 thread</span></span><br><span class="line">    <span class="keyword">if</span> (execlp(<span class="string">&quot;cp&quot;</span>, <span class="string">&quot;cp&quot;</span>, <span class="string">&quot;/bin/ls&quot;</span>, <span class="string">&quot;/tmp&quot;</span>, <span class="literal">NULL</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Child1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    sleep(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// father thread</span></span><br><span class="line"></span><br><span class="line">    child2 = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (child2 == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Child2 fork error.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (child2 == <span class="number">0</span>) &#123; <span class="comment">// child2 thread</span></span><br><span class="line">      <span class="keyword">if</span> ((fd = open(<span class="string">&quot;./src_file&quot;</span>, O_CREAT|O_WRONLY|O_APPEND, <span class="number">0600</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Open file error.\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      write(fd, message1, <span class="built_in">strlen</span>(message1) + <span class="number">1</span>);</span><br><span class="line">      sleep(<span class="number">5</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      child = waitpid(child1, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">      <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;child1 is running.\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (child == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      child = waitpid(child2, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">      <span class="keyword">if</span> (child == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;child2 is running.\n&quot;</span>);</span><br><span class="line">         sleep(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (child == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    daemon = fork(); <span class="comment">// fork daemon</span></span><br><span class="line"></span><br><span class="line">    openlog(<span class="string">&quot;test_syslog&quot;</span>, LOG_PID, LOG_DAEMON); <span class="comment">// open syslog</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (daemon &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Daemon fork error.\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (daemon &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// father thread exit</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sid = setsid()) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      syslog(LOG_ERR, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;setsid&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((sid = chdir(<span class="string">&quot;/&quot;</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      syslog(LOG_ERR, <span class="string">&quot;%s\n&quot;</span>, <span class="string">&quot;chdir&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// start make daemon thread</span></span><br><span class="line">    umask(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; getdtablesize(); i++) &#123;</span><br><span class="line">      close(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">// start run daemon thread</span></span><br><span class="line">      <span class="keyword">if</span> ((fd = open(<span class="string">&quot;/var/log/message&quot;</span>, O_CREAT|O_WRONLY|O_APPEND, <span class="number">0600</span>)) &lt; <span class="number">0</span>) &#123; <span class="comment">// get the fildes</span></span><br><span class="line">        syslog(LOG_ERR, <span class="string">&quot;open&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      write(fd, message2, <span class="built_in">strlen</span>(message2) + <span class="number">1</span>);</span><br><span class="line">      close(fd);</span><br><span class="line">      sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closelog();</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux通信机制 作业</title>
    <url>/2019/05/26/Linux%E9%80%9A%E4%BF%A1%E6%9C%BA%E5%88%B6-%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h3 id="要求"><a href="#要求" class="headerlink" title="要求"></a>要求</h3><ol>
<li>程序 1 从串口读取信息，然后发到消息队列中。使用 2 个终端运行程序 1，创建出 2 个可从串口读取数据的进程，串口可以使用 Windows 中的虚拟串口，使用串口助手输入信息。</li>
<li>程序 2 从消息队列中读取消息，然后在屏幕上将消息内容显示出来。</li>
</ol>
<h3 id="提交形式"><a href="#提交形式" class="headerlink" title="提交形式"></a>提交形式</h3><ol>
<li>代码</li>
<li>运行结果截图、串口助手截图</li>
</ol>
<span id="more"></span>

<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 512</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">message</span> &#123;</span></span><br><span class="line">  <span class="type">long</span> msg_type;</span><br><span class="line">  <span class="type">char</span> msg_text[BUFFER_SIZE];</span><br><span class="line">&#125; message;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> qid;</span><br><span class="line">  <span class="type">key_t</span> key;</span><br><span class="line">  message msg;</span><br><span class="line"></span><br><span class="line">  key = ftok(<span class="string">&quot;.&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  qid = msgget(key, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(msg.msg_text, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    msgrcv(qid, (<span class="type">void</span>*)&amp;msg, BUFFER_SIZE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, msg.msg_text);</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  msgctl(qid, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">int</span> qid, fd;</span><br><span class="line">  <span class="type">key_t</span> key;</span><br><span class="line">  message msg;</span><br><span class="line">  <span class="type">char</span> buff[BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line">  key = ftok(<span class="string">&quot;.&quot;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (key == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;ftok error&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  qid =  msgget(key, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">  <span class="keyword">if</span> (qid == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;msgget error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fd = open(<span class="string">&quot;/dev/ttyS1&quot;</span>, O_RDWR);</span><br><span class="line">  <span class="keyword">if</span> (fd == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;open error.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  read(fd, buff, BUFFER_SIZE);</span><br><span class="line">  <span class="built_in">strncpy</span>(msg.msg_text, buff, <span class="built_in">strlen</span>(buff));</span><br><span class="line">  msg.msg_type = getpid();</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> size = msgsnd(qid, &amp;msg, <span class="built_in">strlen</span>(msg.msg_text), <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">if</span> (size &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;message posted.&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>IPC</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux进程通信 作业</title>
    <url>/2019/05/20/Linux%E8%BF%9B%E7%A8%8B%E9%80%9A%E4%BF%A1-%E4%BD%9C%E4%B8%9A/</url>
    <content><![CDATA[<h2 id="有名管道"><a href="#有名管道" class="headerlink" title="有名管道"></a>有名管道</h2><ol>
<li>父进程创建一个有名管道，然后创建 1 个子进程，父进程阻塞的方式等待有名管道的信息，当读取到信息之后，在屏幕上打印出来；当从有名管道中读取到“QUIT”之后，父进程终止。</li>
<li>子进程 1 使用定时器，每 5 秒钟向有名管道输入“this is process 1”；当收到信号 SIGQUIT 时，向有名管道输出“QUIT”，并在屏幕上输出“process 1 exit”之后，进程终止。</li>
</ol>
<h3 id="提交形式"><a href="#提交形式" class="headerlink" title="提交形式"></a>提交形式</h3><ol>
<li>代码</li>
<li>运行结果截图</li>
</ol>
<span id="more"></span>

<h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIFO <span class="string">&quot;/tmp/fifo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_BUFFER_SIZE PIPE_BUF</span></span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid, pr;</span><br><span class="line"><span class="type">char</span> buff[MAX_BUFFER_SIZE];</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">child_func</span><span class="params">(<span class="type">int</span> sign_no)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (sign_no == SIGALRM) &#123;</span><br><span class="line">    <span class="type">int</span> fdChild = open(FIFO, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (fdChild == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Open fifo file error\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sscanf</span>(<span class="string">&quot;this is progress 1\n&quot;</span>, <span class="string">&quot;%[^\n]&quot;</span>, buff);</span><br><span class="line">    write(fdChild, buff, MAX_BUFFER_SIZE);</span><br><span class="line">    close(fdChild);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sign_no == SIGQUIT) &#123;</span><br><span class="line">    <span class="type">int</span> fdChild = open(FIFO, O_WRONLY);</span><br><span class="line">    <span class="keyword">if</span> (fdChild == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Open fifo file error\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">sscanf</span>(<span class="string">&quot;QUIT\n&quot;</span>, <span class="string">&quot;%[^\n]&quot;</span>, buff);</span><br><span class="line">    write(fdChild, buff, MAX_BUFFER_SIZE);</span><br><span class="line">    close(fdChild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;process 1 exit.\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  pid = fork();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (pid &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Fork error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (pid == <span class="number">0</span>) &#123; <span class="comment">// child thread</span></span><br><span class="line">    signal(SIGALRM, child_func); <span class="comment">// handle SIG_ALARM</span></span><br><span class="line">    signal(SIGQUIT, child_func); <span class="comment">// handle SIGQUIT</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      alarm(<span class="number">5</span>); <span class="comment">// ALARM SIGN</span></span><br><span class="line">      sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">// parent thread</span></span><br><span class="line">    <span class="keyword">if</span> (access(FIFO, F_OK) == <span class="number">-1</span>) &#123; <span class="comment">// if unexist then create</span></span><br><span class="line">      <span class="keyword">if</span> ((mkfifo(FIFO, <span class="number">0666</span>) &lt; <span class="number">0</span>) &amp;&amp; errno != EEXIST) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Cannot create fifo file\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fdParent = open(FIFO, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span> (fdParent == <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;Open fifo file error\n&quot;</span>);</span><br><span class="line">      <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      signal(SIGQUIT, child_func); <span class="comment">// handle the SIGQUIT from parent thread</span></span><br><span class="line">      pr = waitpid(pid, <span class="literal">NULL</span>, WNOHANG);</span><br><span class="line">      <span class="built_in">memset</span>(buff, <span class="number">0</span>, <span class="keyword">sizeof</span>(buff)); <span class="comment">// reset the buff</span></span><br><span class="line"></span><br><span class="line">      read(fdParent, buff, MAX_BUFFER_SIZE); <span class="comment">// read buff</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;&quot;</span>, buff) == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">strcmp</span>(<span class="string">&quot;QUIT&quot;</span>, buff) == <span class="number">0</span>) <span class="built_in">exit</span>(<span class="number">0</span>); <span class="comment">// if buff equals &quot;QUIT&quot; then quit</span></span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, buff);</span><br><span class="line">      sleep(<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (pr == <span class="number">0</span>);</span><br><span class="line">    close(fdParent);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="信号量机制"><a href="#信号量机制" class="headerlink" title="信号量机制"></a>信号量机制</h2><ol>
<li>一个海底隧道中只有一个车道，规定同一个方向的可以连续过隧道；某方向有列车过隧道时，另一个方向的列车就要等待，现在东岸和西岸都有列车要过隧道，如果把每个过隧道的列车看作一个进程，为保证安全，使用信号量机制实现正确管理。</li>
<li>使用屏幕输出信息，来表示列车通行情况。</li>
</ol>
<h3 id="提交形式-1"><a href="#提交形式-1" class="headerlink" title="提交形式"></a>提交形式</h3><ol>
<li>代码</li>
<li>运行结果截图</li>
</ol>
<h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">pid_t</span> A;</span><br><span class="line">  <span class="type">int</span> sem_id;</span><br><span class="line"></span><br><span class="line">  sem_id = semget(ftok(<span class="string">&quot;.&quot;</span>, <span class="string">&#x27;a&#x27;</span>), <span class="number">1</span>, <span class="number">0666</span> | IPC_CREAT);</span><br><span class="line">  init_sem(sem_id, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">  A = fork();</span><br><span class="line">  <span class="keyword">if</span> (A == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;Fork error\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (A == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      sem_p(sem_id);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;A -&gt; B\n&quot;</span>);</span><br><span class="line">      sem_v(sem_id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">      sem_p(sem_id);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;B -&gt; A\n&quot;</span>);</span><br><span class="line">      sem_v(sem_id);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  del_sem(sem_id);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> val;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span>* <span class="title">buf</span>;</span></span><br><span class="line">  <span class="type">unsigned</span> <span class="type">short</span>* <span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sem_com.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init_sem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> init_value)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">sem_union</span>;</span></span><br><span class="line">  sem_union.val = init_value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, SETVAL, sem_union) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;Initialize semaphore&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">del_sem</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">sem_union</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (semctl(sem_id, <span class="number">0</span>, IPC_RMID, sem_union) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;Delete semaphore&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_p</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">  sem_b.sem_num = <span class="number">0</span>;</span><br><span class="line">  sem_b.sem_op = <span class="number">-1</span>;</span><br><span class="line">  sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">  <span class="keyword">if</span> (semop(sem_id, &amp;sem_b, <span class="number">1</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;P operation&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sem_v</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sem_b</span>;</span></span><br><span class="line">  sem_b.sem_num = <span class="number">0</span>;</span><br><span class="line">  sem_b.sem_op = <span class="number">1</span>;</span><br><span class="line">  sem_b.sem_flg = SEM_UNDO;</span><br><span class="line">  <span class="keyword">if</span> (semop(sem_id, &amp;sem_b, <span class="number">1</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">    perror(<span class="string">&quot;V operation&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>MIUI android真机无线调试</title>
    <url>/2024/05/11/MIUI-android%E7%9C%9F%E6%9C%BA%E6%97%A0%E7%BA%BF%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<h3 id="为什么需要无线调试"><a href="#为什么需要无线调试" class="headerlink" title="为什么需要无线调试"></a>为什么需要无线调试</h3><p><strong>方便</strong><br>无线调试可以让你在手机上进行调试，而不用连接电脑，可以节省时间。</p>
<p>这几天尝试使用无限调试，但是总是会有 bug，adb 死机，手机重启，导致调试失败。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 使用 adb 6未数字码方式 连接手机</span></span><br><span class="line">adb pair 192.168.1.100</span><br></pre></td></tr></table></figure>

<p><strong>在 Mac 下，我的手机只能成功连接一次，后续就再也连不上了</strong></p>
<p>无奈，只能使用 Android Studios 调试。</p>
<ol>
<li>使用 Android Studios 插件：ADB WI-FI</li>
<li>USB 连接手机</li>
<li>打开 ADB WI-FI 面板</li>
<li>自动连接</li>
</ol>
<p>这种方式目前比较稳定，可以成功连接手机，并且可以进行调试，并且每次启动都可以重新成功连接。</p>
<h2 id="Update-at-2025-年-03-月-10-日-16-33-15"><a href="#Update-at-2025-年-03-月-10-日-16-33-15" class="headerlink" title="Update at 2025 年 03 月 10 日 16:33:15"></a>Update at 2025 年 03 月 10 日 16:33:15</h2><p>pair 成功后, 在无线 adb 里面开启, 然后直接<code>adb connect 192.168.1.100:5555</code>即可连接。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Debugging</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Map</title>
    <url>/2018/08/20/Map/</url>
    <content><![CDATA[<p>ES6 提供了 Map 数据结构，它类似对象，也是键值对的集合，但是‘键’的范围不限于字符串，各种类型的值（包括对象）都可以当做键。Map 结构是一种更完善的 Hash 结构实现。如果需要‘键值对’的数据结构，Map 比 Object 更合适。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"><span class="keyword">const</span> o = &#123; <span class="attr">p</span>: <span class="string">&quot;hello&quot;</span> &#125;</span><br><span class="line">m.<span class="title function_">set</span>(o, <span class="string">&quot;content&quot;</span>)</span><br><span class="line">m.<span class="title function_">get</span>(o) <span class="comment">//&#x27;content&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Map 也可以接受一个数组作为参数，该数组的成员是一个表示键值对的数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;test&quot;</span>],</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">map.<span class="property">size</span> <span class="comment">//2</span></span><br><span class="line">map.<span class="title function_">has</span>(<span class="string">&quot;name&quot;</span>) <span class="comment">//true</span></span><br><span class="line">map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>) <span class="comment">//&#x27;张三&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Map 构造函数接受数组作为参数，实际上执行的是下面的算法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> item = [</span><br><span class="line">  [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>],</span><br><span class="line">  [<span class="string">&quot;title&quot;</span>, <span class="string">&quot;test&quot;</span>],</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">item.<span class="title function_">forEach</span>(<span class="function">(<span class="params">[key, valule]</span>) =&gt;</span> map.<span class="title function_">set</span>(key, value))</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="同名问题"><a href="#同名问题" class="headerlink" title="同名问题"></a>同名问题</h3><p>Map 的键实际上是和内存地址绑定的，只要内存地址不一样，就视为两个键。如果 Map 的键是一个简单类型的值（数字、字符串、布尔值），则只要两个值严格相等，Map 就视其为一个键，包括-0 和 0。另外，虽然 NaN 不严格等于自身，但 Map 将其视为同一个键。</p>
<h3 id="实例的属性和操作方法"><a href="#实例的属性和操作方法" class="headerlink" title="实例的属性和操作方法"></a>实例的属性和操作方法</h3><ul>
<li>size 属性<br>size 属性返回 Map 结构的成员总数。</li>
<li>set(key, value)<br>set 方法设置 key 所对应的键值，返回整个 Map 结构。如果 key 已经有值，则键值更新，否则新生成键值。</li>
<li>get(key)<br>get 方法读取 key 对应的键值，如果找不到 key，返回 undefined。</li>
<li>has(key)<br>has 方法返回一个布尔值，表示某个键是否在 Map 数据结构中。</li>
<li>delete(key)<br>delete 方法删除某个键，返回 true。如果删除失败，返回 false。</li>
<li>clear()<br>clear 方法清除所有成员，没有返回值。</li>
</ul>
<h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回所有成员的遍历器</li>
<li>forEach()：遍历 Map 的所有成员</li>
</ul>
<p><strong>Map 的遍历顺序就是插入顺序</strong></p>
<h3 id="Map-与其他数据结构相互转换"><a href="#Map-与其他数据结构相互转换" class="headerlink" title="Map 与其他数据结构相互转换"></a>Map 与其他数据结构相互转换</h3><ul>
<li>Map 转为数组<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myMap = <span class="keyword">new</span> <span class="title class_">Map</span>().<span class="title function_">set</span>(<span class="literal">true</span>, <span class="number">1</span>).<span class="title function_">set</span>(<span class="literal">false</span>, <span class="number">2</span>).<span class="title function_">set</span>(&#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;, [<span class="string">&quot;abc&quot;</span>])</span><br><span class="line">;[...myMap] <span class="comment">//[[true, 1], [false, 2], [&#123;foo:1&#125;, [&#x27;abc&#x27;]]]</span></span><br></pre></td></tr></table></figure></li>
<li>数组转为 Map<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">  [<span class="literal">true</span>, <span class="number">1</span>],</span><br><span class="line">  [&#123; <span class="attr">foo</span>: <span class="number">3</span> &#125;, [<span class="string">&quot;abc&quot;</span>]],</span><br><span class="line">])</span><br></pre></td></tr></table></figure></li>
<li>Map 转为对象<br>如果 Map 的所有键都是字符串，则可以转为对象。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToObj</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> strMap) &#123;</span><br><span class="line">    obj[k] = v</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>对象转为 Map<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objToStrMap</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> strMap = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> k <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    strMap.<span class="title function_">set</span>(k.<span class="property">obj</span>[k])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> strMap</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Map 转为 JSON</li>
</ul>
<ol>
<li>Map 的键名都是字符串：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">strMapToJson</span>(<span class="params">strMap</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="title function_">strMapToObj</span>(strMap))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>键名有非字符串<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mapToArrayJson</span>(<span class="params">map</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>([...map])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>JSON 转为 Map</li>
</ul>
<ol>
<li>正常情况下所有键名都是字符串<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToStrMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">objToStrMap</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>JSON 就是一个数组的情况<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">jsonToMap</span>(<span class="params">jsonStr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(jsonStr))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="WeakMap"><a href="#WeakMap" class="headerlink" title="WeakMap"></a>WeakMap</h3><ul>
<li>只接受对象作为键名（null 除外）</li>
<li>WeakMap 中的对象都是弱引用，如果其他对象都不再引用该对象，那么 GC 会自动回收该对象所占的内存，不考虑该对象是否在 WeakMap 中</li>
<li>没有 size 属性，没有 clear 方法</li>
</ul>
<p><strong>WeakMap 的专用场景就是它的键所对应的对象可能会在将来消失的场景，有助于防止内存泄露</strong></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 无法通过 path 打开 code 记</title>
    <url>/2022/07/27/Mac-%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87-path-%E6%89%93%E5%BC%80-code-%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>许久未使用<code>mac</code>，然后发现在<code>terminal</code>里使用<code>code &lt;name&gt;</code>的时候，报错了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/local/bin/code: line 6: /usr/bin/python: No such file or directory</span><br><span class="line">/usr/local/bin/code: line 10: ./MacOS/Electron: No such file or directory</span><br></pre></td></tr></table></figure>

<p>后面才发现，系统里只有<code>python3</code>，没有<code>python</code>，遂在<code>/Applications/Visual\ Studio\ Code.app/Contents/Resources/app/bin/code</code>中将<code>python</code>修改为<code>python3</code>得以解决。</p>
]]></content>
      <tags>
        <tag>Debugging</tag>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>Maybe</title>
    <url>/2019/03/29/Maybe/</url>
    <content><![CDATA[<h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><p>Let’s create a normal container first.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// use the of to create the container</span></span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Container</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Container</span>.<span class="title function_">of</span>(<span class="number">2</span>) <span class="comment">// Container &#123; _value: 2 &#125;</span></span><br><span class="line"><span class="title class_">Container</span>.<span class="title function_">of</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;) <span class="comment">// Container &#123; _value: &#123; name: &#x27;jack&#x27; &#125; &#125;</span></span><br></pre></td></tr></table></figure>

<p>But we should not directly manipulate the data in the container. We need a function to do this.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Container.prototype.map :: (a -&gt; b) -&gt; Container a -&gt; Container b</span></span><br><span class="line"><span class="title class_">Container</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">map</span> = <span class="keyword">function</span> (<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Container</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> six = <span class="title class_">Container</span>.<span class="title function_">of</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * <span class="number">3</span>) <span class="comment">// Container &#123; _value: 6 &#125;</span></span><br><span class="line">six.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x.<span class="title function_">toString</span>()).<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> <span class="string">&quot;number: &quot;</span> + x + <span class="string">&quot;!&quot;</span>) <span class="comment">// Container &#123; _value: &#x27;number: 6!&#x27; &#125;</span></span><br></pre></td></tr></table></figure>

<p>After passing the values in the Container to the map function, we can let them manipulate it; after the operation is completed, in order to prevent accidents, put them back into the Container they belong to. The result is that we can call the map <strong>continuously</strong>, running any function we want to run.<br>And the <strong>Functor</strong> is a container type that implements the map function and adheres to certain rules.</p>
<h3 id="Maybe"><a href="#Maybe" class="headerlink" title="Maybe"></a>Maybe</h3><p>In Haskell, the Maybe type is defined as follow:</p>
<figure class="highlight haskell"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">data</span> <span class="type">Maybe</span> a = <span class="type">Just</span> a | <span class="type">Nothing</span></span></span><br></pre></td></tr></table></figure>

<p>Maybe will check if its value is empty before calling the passed function. So let’s create a simple one.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Maybe</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Maybe</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">isNothing</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_value</span> === <span class="literal">null</span> || <span class="variable language_">this</span>.<span class="property">_value</span> === <span class="literal">undefined</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// map :: (a -&gt; b) -&gt; Maybe a -&gt; Maybe b</span></span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">isNothing</span>() ? <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="literal">null</span>) : <span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Maybe</span>.<span class="title function_">of</span>(<span class="string">&quot;hello world&quot;</span>).<span class="title function_">map</span>(<span class="title function_">match</span>(<span class="regexp">/o/gi</span>)) <span class="comment">// Maybe &#123; _value: [ &#x27;o&#x27;, &#x27;o&#x27; ] &#125;</span></span><br><span class="line"><span class="title class_">Maybe</span>.<span class="title function_">of</span>(&#123; <span class="attr">name</span>: <span class="string">&quot;jack&quot;</span> &#125;)</span><br><span class="line">  .<span class="title function_">map</span>($.<span class="title function_">prop</span>(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">  .<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">10</span>) <span class="comment">// Maybe &#123; _value: null &#125;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Error-handling"><a href="#Error-handling" class="headerlink" title="Error handling"></a>Error handling</h3><p>There is a class called Either in scala that represents the value of one of two possible types. Instances of Either are either an instance of Left or Right.<br>Now we need to create the Left and the Right.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Left</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Left</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// do nothing</span></span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Right</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_value</span> = x</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">of</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Right</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">map</span>(<span class="params">f</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Right</span>.<span class="title function_">of</span>(<span class="title function_">f</span>(<span class="variable language_">this</span>.<span class="property">_value</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Left</span>.<span class="title function_">of</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">2</span>) <span class="comment">// Left &#123; _value: 2 &#125;</span></span><br><span class="line"><span class="title class_">Right</span>.<span class="title function_">of</span>(<span class="number">2</span>).<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x + <span class="number">2</span>) <span class="comment">//Right &#123; _value: 4 &#125;</span></span><br></pre></td></tr></table></figure>

<p>Use it:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// getChange :: a -&gt; b -&gt; Either(String, Number)</span></span><br><span class="line"><span class="keyword">let</span> getChange = <span class="title function_">curry</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (a &lt; b) <span class="keyword">return</span> <span class="title class_">Left</span>.<span class="title function_">of</span>(<span class="string">&quot;You need to give more money.&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Right</span>.<span class="title function_">of</span>(a - b)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">getChange</span>(<span class="number">10</span>, <span class="number">8</span>) <span class="comment">// Right &#123; _value: &#x27;Get the change: 2&#x27; &#125;</span></span><br><span class="line"><span class="title function_">getChange</span>(<span class="number">10</span>, <span class="number">15</span>) <span class="comment">// Left &#123; _value: &#x27;You need to give more money.&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// eigher :: (a -&gt; c) -&gt; (b -&gt; c) -&gt; Either a b -&gt; c</span></span><br><span class="line"><span class="keyword">var</span> either = <span class="title function_">curry</span>(<span class="function">(<span class="params">f, g, e</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (e.<span class="property">constructor</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Left</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">f</span>(e.<span class="property">_value</span>)</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Right</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">g</span>(e.<span class="property">_value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// faild :: a -&gt; a</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">faild</span> = (<span class="params">x</span>) =&gt; x</span><br><span class="line"><span class="comment">// success :: a -&gt; b</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">success</span> = (<span class="params">x</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;get change: &quot;</span> + x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// foo :: a -&gt; a -&gt; c</span></span><br><span class="line"><span class="keyword">var</span> foo = $.<span class="title function_">compose</span>(<span class="title function_">either</span>(faild, success), getChange)</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// You need to give more money.</span></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">4</span>, <span class="number">2</span>) <span class="comment">// get change: 2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Math的扩展</title>
    <url>/2018/08/11/Math%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="Math-trunc"><a href="#Math-trunc" class="headerlink" title="Math.trunc()"></a>Math.trunc()</h3><p>Math.trunc 用于除去一个数的小数部分。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">111.22</span>) <span class="comment">//111</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="string">&quot;123.456&quot;</span>) <span class="comment">//123</span></span><br><span class="line"><span class="comment">//对空和无法截取整数的值，返回 NaN</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="title class_">NaN</span>) <span class="comment">//NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">trunc</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">trunc</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="title class_">Math</span>.<span class="title function_">ceil</span>(x) : <span class="title class_">Math</span>.<span class="title function_">floor</span>(x)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Math-sign"><a href="#Math-sign" class="headerlink" title="Math.sign()"></a>Math.sign()</h3><p>Math.sign 用于判断一个数到底是正数、负数、还是零。</p>
<ul>
<li>参数为正数，返回+1</li>
<li>参数为负数，返回-1</li>
<li>参数为 0，返回 0</li>
<li>参数为-0，返回-0</li>
<li>其他值，返回 NaN</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">sign</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">sign</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    x = +x <span class="comment">//convert to a number</span></span><br><span class="line">    <span class="keyword">if</span> (x === <span class="number">0</span> || <span class="built_in">isNaN</span>(x)) &#123;</span><br><span class="line">      <span class="keyword">return</span> x</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x &gt; <span class="number">0</span> ? <span class="number">1</span> : -<span class="number">1</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-cbrt"><a href="#Math-cbrt" class="headerlink" title="Math.cbrt()"></a>Math.cbrt()</h3><p>Math.cbrt 用于计算一个数的立方根，对于非数值，内部也是先使用 Number 方法转换为数值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">cbrt</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">cbrt</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> y = <span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="title class_">Math</span>.<span class="title function_">abs</span>(x), <span class="number">1</span> / <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? -y : y</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-clz32"><a href="#Math-clz32" class="headerlink" title="Math.clz32()"></a>Math.clz32()</h3><p>Math.clz32 返回一个数的 32 位无符号整数形式有多少个前导 0.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">clz32</span>(<span class="number">0</span>) <span class="comment">//32</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">clz32</span>(<span class="number">1</span>) <span class="comment">//31</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">clz32</span>(<span class="number">0b01000000000000000000000000000000</span>) <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">clz32</span>(<span class="number">1</span> &lt;&lt; <span class="number">1</span>) <span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<p><strong>对于小数，Math.clz32()只考虑整数部分</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">clz32</span>(<span class="number">3.9</span>) <span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<h3 id="Math-imul"><a href="#Math-imul" class="headerlink" title="Math.imul()"></a>Math.imul()</h3><p>Math.imul 返回两个数以 32 位带符号整数形式相乘的结果，返回的也是一个 32 位带符号整数。<br><strong>对于很大数的乘法，低位数值往往是不精确的，Math.imul()方法可以正确的返回低位数值。</strong></p>
<h3 id="Math-fround"><a href="#Math-fround" class="headerlink" title="Math.fround()"></a>Math.fround()</h3><p>Math.fround 方法返回一个数的单精度浮点数形式。<br><strong>对于整数来说，Math.fround()方法的返回结果不会有任何不同，区别主要在于那些无法用 64 个二进制位精确表示的小数。这时，Math.fround()方法会返回最接近这个小数的单精度浮点数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">fround</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">fround</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Float32Array</span>([x])[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-hypot"><a href="#Math-hypot" class="headerlink" title="Math.hypot()"></a>Math.hypot()</h3><p>Math.hypot 方法返回所有参数的平方和的平方根。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Math</span>.<span class="title function_">hypot</span>(<span class="number">3</span>, <span class="number">4</span>) <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<h3 id="Math-expm1"><a href="#Math-expm1" class="headerlink" title="Math.expm1()"></a>Math.expm1()</h3><p>Math.expm1(x)返回$e^x-1$， 即 Math.exp(x) - 1;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">expm1</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">expm1</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">exp</span>(x) - <span class="number">1</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-log1p"><a href="#Math-log1p" class="headerlink" title="Math.log1p()"></a>Math.log1p()</h3><p>Math.log1p(x)返回$ln(1+x)$，即 Math.log(1 + x)。如果 x 小于-1，则返回 NaN。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">log1p</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">log1p</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">log</span>(<span class="number">1</span> + x)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-log10"><a href="#Math-log10" class="headerlink" title="Math.log10()"></a>Math.log10()</h3><p>Math.log10(x)返回$log_{10}(x)$，如果 x 小于 0，返回 NaN。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">log10</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">log10</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">log</span>(x) / <span class="title class_">Math</span>.<span class="property">LN10</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Math-log2"><a href="#Math-log2" class="headerlink" title="Math.log2()"></a>Math.log2()</h3><p>Math.log2(x)返回$log_2(x)$，如果 x 小于 0，返回 NaN。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码模拟</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">log2</span> =</span><br><span class="line">  <span class="title class_">Math</span>.<span class="property">log2</span> ||</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">log</span>(x) / <span class="title class_">Math</span>.<span class="property">LN2</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<h3 id="双曲函数方法"><a href="#双曲函数方法" class="headerlink" title="双曲函数方法"></a>双曲函数方法</h3><p>ES6 新增了六个双曲函数方法</p>
<ul>
<li>Math.sinh(x) 返回 $sinh\ x&#x3D;\frac{e^x-e^{-x}}{2}$</li>
<li>Math.cosh(x) 返回 $cosh\ x&#x3D;\frac{e^x+e^{-x}}{2}$</li>
<li>Math.tanh(x) 返回 $tanh\ x&#x3D;\frac{sinh\ x}{cosh\ x}&#x3D;\frac{e^x-e^{-x}}{e^x+e^{-x}}$</li>
<li>Math.asinh(x) 返回 $arsinh\ x&#x3D;ln(x+\sqrt[\ ]{x^2+1})$</li>
<li>Math.acosh(x) 返回 $arsinh\ x&#x3D;ln(x+\sqrt[\ ]{x^2-1})$</li>
<li>Math.atanh(x) 返回 $artanh\ x&#x3D;\frac{1}{2}ln\frac{1+x}{1-x}$</li>
</ul>
<h3 id="Math-sign-1"><a href="#Math-sign-1" class="headerlink" title="Math.sign()"></a>Math.sign()</h3><p>Math.sign 用来判断一个数的正负，如果参数是-0，会返回-0。</p>
<h3 id="指数运算符"><a href="#指数运算符" class="headerlink" title="指数运算符**"></a>指数运算符**</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> ** <span class="number">2</span> <span class="comment">//4</span></span><br><span class="line"><span class="number">3</span> ** <span class="number">3</span> <span class="comment">//27</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1.5</span></span><br><span class="line">a **= <span class="number">3</span> <span class="comment">//a = a _ a _ a;</span></span><br></pre></td></tr></table></figure>

<p>**在 V8 引擎中，指数运算符与 Math.pow 的实现不相同，对于特别大的运算结果，两者会有差异**</p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Mix-ins</title>
    <url>/2021/01/04/Mix-ins/</url>
    <content><![CDATA[<h3 id="Mix-ins"><a href="#Mix-ins" class="headerlink" title="Mix-ins"></a>Mix-ins</h3><blockquote>
<p>Abstract subclasses or mix-ins are templates for classes. An ECMAScript class can only have a single superclass, so multiple inheritance from tooling classes, for example, is not possible. The functionality must be provided by the superclass.</p>
</blockquote>
<p>eg:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">calculatorMixin</span> = (<span class="params">Base</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="title function_">calc</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomizerMixin</span> = (<span class="params">Base</span>) =&gt;</span><br><span class="line">  <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Base</span> &#123;</span><br><span class="line">    <span class="title function_">remdomize</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// do something</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">calculatorMixin</span>(<span class="title function_">randomizerMixin</span>(<span class="title class_">Foo</span>)) &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">new</span> <span class="title class_">Bar</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">calc</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">remdomize</span>) <span class="comment">// also a function.</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Number的扩展</title>
    <url>/2018/08/11/Number%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="进制表示"><a href="#进制表示" class="headerlink" title="进制表示"></a>进制表示</h3><p>0b(0B)表示二进制，0o(0O)表示八进制</p>
<h3 id="Number-isFinite-、Number-isNaN"><a href="#Number-isFinite-、Number-isNaN" class="headerlink" title="Number.isFinite()、Number.isNaN()"></a>Number.isFinite()、Number.isNaN()</h3><p>Number.isFinite 用来检查一个数值是否为有限的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">NaN</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(-<span class="title class_">Infinity</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&quot;15&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="string">&quot;foo&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="literal">true</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>ES5 部署 Number.isFinite()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> global_isFinite = <span class="variable language_">global</span>.<span class="property">isFinite</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Number</span>, <span class="string">&quot;isFinite&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">isFinite</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="title function_">global_isFinite</span>(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(<span class="variable language_">this</span>)</span><br></pre></td></tr></table></figure>

<p>Number.isNaN 用来检查一个值是否为 NaN。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="title class_">NaN</span>) <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;15&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">9</span> / <span class="title class_">NaN</span>) <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;true&quot;</span> / <span class="number">0</span>) <span class="comment">//true</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="string">&quot;true&quot;</span> / <span class="string">&quot;true&quot;</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>ES5 部署 Number.isNaN()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> global_isNaN = <span class="variable language_">global</span>.<span class="property">isNaN</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Number</span>, <span class="string">&quot;isNaN&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">isNaN</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="title function_">global_isNaN</span>(value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(<span class="variable language_">this</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Number-parseInt-、Number-parseFloat"><a href="#Number-parseInt-、Number-parseFloat" class="headerlink" title="Number.parseInt()、Number.parseFloat()"></a>Number.parseInt()、Number.parseFloat()</h3><p>ES6 将全局方法 parseInt 和 parseFloat 移植到了 Number 对象上面，行为完全不变。</p>
<h3 id="Number-isInteger"><a href="#Number-isInteger" class="headerlink" title="Number.isInteger()"></a>Number.isInteger()</h3><p>Number.isInteger 判断一个值是否为整数。在 JavaScript 内部，整数和浮点数是相同的储存方法，所以 3 和 3.0 视为同一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="string">&quot;15&quot;</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="literal">true</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p>ES5 部署 Number.isInteger()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params"><span class="variable language_">global</span></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> floor = <span class="title class_">Math</span>.<span class="property">floor</span>,</span><br><span class="line">    <span class="built_in">isFinite</span> = <span class="variable language_">global</span>.<span class="property">isFinite</span></span><br><span class="line"></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Number</span>, <span class="string">&quot;isInteger&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="keyword">function</span> <span class="title function_">isInteger</span>(<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        <span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span> &amp;&amp; <span class="built_in">isFinite</span>(value) &amp;&amp; <span class="title function_">floor</span>(value) == value</span><br><span class="line">      )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">configurable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)(<span class="variable language_">this</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Number-EPSILON"><a href="#Number-EPSILON" class="headerlink" title="Number.EPSILON"></a>Number.EPSILON</h3><p>ES6 在 Number 对象上面新增一个极小的常量–<strong>Number.EPSILON</strong>。<br>浮点数计算是不精确的，但是如果这个误差可以小于 Number.EPSILON，就可以认为得到了正确的结果。</p>
<h3 id="Number-isSafeInteger"><a href="#Number-isSafeInteger" class="headerlink" title="Number.isSafeInteger()"></a>Number.isSafeInteger()</h3><p>JavaScript 能够准确表示的整数范围在$-2^{53}$到$2^{53}$之间（不含两个端点），超过这个范围就无法精确表示。<br>ES6 引入了 <strong>Number.MAX_SAFE_INTEGER</strong> 和 <strong>Number.MIN_SAFE_INTEGER</strong> 两个常量来表示这个范围的上下限</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Polymorphism in Typescript</title>
    <url>/2025/03/10/Polymorphism-in-Typescript/</url>
    <content><![CDATA[<h1 id="Subtype-Polymorphism"><a href="#Subtype-Polymorphism" class="headerlink" title="Subtype Polymorphism"></a>Subtype Polymorphism</h1><p>通过类继承和方法重写，子类可以提供与父类方法相同的接口，但实现不同的行为。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Some generic animal sound&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Woof!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">makeSound</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Meow!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">makeAnimalSound</span>(<span class="params">animal: Animal</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  animal.<span class="title function_">makeSound</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> <span class="title class_">Cat</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">makeAnimalSound</span>(dog) <span class="comment">// Woof!</span></span><br><span class="line"><span class="title function_">makeAnimalSound</span>(cat) <span class="comment">// Meow!</span></span><br></pre></td></tr></table></figure>

<p>key points:</p>
<ul>
<li>类型兼容性：TypeScript 的类型系统允许子类实例赋值给父类类型的变量（向上转型）。</li>
<li>运行时行为：实际执行的方法取决于对象的运行时类型，而不是声明时的类型。</li>
</ul>
<span id="more"></span>

<h1 id="Interface-Polymorphism"><a href="#Interface-Polymorphism" class="headerlink" title="Interface Polymorphism"></a>Interface Polymorphism</h1><p>在 TypeScript 中，接口定义了一组行为的契约，任何实现该接口的类或对象都必须遵循这个契约。通过接口，可以实现多态。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">getArea</span>(): <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Circle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> radius: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable language_">this</span>.<span class="property">radius</span> * <span class="variable language_">this</span>.<span class="property">radius</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rectangle</span> <span class="keyword">implements</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> width: <span class="built_in">number</span>, <span class="keyword">private</span> height: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getArea</span>(): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">width</span> * <span class="variable language_">this</span>.<span class="property">height</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">calculateArea</span>(<span class="params">shape: Shape</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> shape.<span class="title function_">getArea</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> <span class="title class_">Circle</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">const</span> rectangle = <span class="keyword">new</span> <span class="title class_">Rectangle</span>(<span class="number">4</span>, <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculateArea</span>(circle)) <span class="comment">// 78.54...</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">calculateArea</span>(rectangle)) <span class="comment">// 24</span></span><br></pre></td></tr></table></figure>

<p>key points:</p>
<ul>
<li>接口契约：多态性通过接口定义的统一行为实现。</li>
<li>类型安全：TypeScript 确保所有实现接口的对象都符合契约。</li>
</ul>
<h1 id="Parametric-Polymorphism"><a href="#Parametric-Polymorphism" class="headerlink" title="Parametric Polymorphism"></a>Parametric Polymorphism</h1><p>泛型（Generics）是 TypeScript 中实现多态的另一种方式，也称为 参数多态（Parametric Polymorphism）。泛型允许函数、类或接口在定义时不指定具体类型，而在使用时根据传入的类型动态确定。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> identity&lt;T&gt;(<span class="attr">value</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">number</span>&gt;(<span class="number">42</span>)) <span class="comment">// 42</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(identity&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;Hello&quot;</span>)) <span class="comment">// Hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Box</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> content: T</span>) &#123;&#125;</span><br><span class="line">  <span class="title function_">getContent</span>(): T &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">content</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> numberBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">number</span>&gt;(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">const</span> stringBox = <span class="keyword">new</span> <span class="title class_">Box</span>&lt;<span class="built_in">string</span>&gt;(<span class="string">&quot;World&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numberBox.<span class="title function_">getContent</span>()) <span class="comment">// 123</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stringBox.<span class="title function_">getContent</span>()) <span class="comment">// World</span></span><br></pre></td></tr></table></figure>

<p>key points:</p>
<ul>
<li>类型参数：泛型通过类型参数（T）实现多态。</li>
<li>类型安全：TypeScript 在编译时确保类型一致性。</li>
<li>代码复用：泛型提高了代码的复用性和灵活性。</li>
</ul>
<h1 id="Ad-hoc-Polymorphism"><a href="#Ad-hoc-Polymorphism" class="headerlink" title="Ad-hoc Polymorphism"></a>Ad-hoc Polymorphism</h1><p>函数重载（Function Overloading）是 TypeScript 中另一种形式的多态，也称为 特定多态（Ad-hoc Polymorphism）。它允许同一个函数名根据参数类型或数量提供不同的实现。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">string</span>, b: <span class="built_in">string</span></span>): <span class="built_in">string</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">any</span>, b: <span class="built_in">any</span></span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="string">&quot;Hello, &quot;</span>, <span class="string">&quot;World&quot;</span>)) <span class="comment">// Hello, World</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
        <tag>OOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise a+</title>
    <url>/2021/10/08/Promise-a/</url>
    <content><![CDATA[<h3 id="Promise-A-规范"><a href="#Promise-A-规范" class="headerlink" title="Promise A+ 规范"></a>Promise A+ 规范</h3><ol>
<li><code>promise</code>：是一个拥有<code>then</code>方法的对象或函数，其行为符合本规范。</li>
<li><code>thenable</code>：是一个定义了<code>then</code>方法的对象或函数。这个主要是用来兼容一些老的<code>Promise</code>实现，只要一个<code>Promise</code>实现是<code>thenable</code>，也就是拥有<code>then</code>方法的，就可以跟<code>Promises/A+</code><br>兼容。</li>
<li><code>value</code>：指<code>reslove</code>出来的值，可以是任何合法的 JS 值(包括 <code>undefined</code> , <code>thenable</code> 和 <code>promise等</code>)</li>
<li><code>exception</code>：异常，在<code>Promise</code>里面用<code>throw</code>抛出来的值</li>
<li><code>reason</code>：拒绝原因，是<code>reject</code>里面传的参数，表示<code>reject</code>的原因</li>
</ol>
<h3 id="Promise-Status"><a href="#Promise-Status" class="headerlink" title="Promise Status"></a>Promise Status</h3><ol>
<li><code>pending</code>: 一个<code>promise</code>在<code>resolve</code>或者<code>reject</code>前就处于这个状态。</li>
<li><code>fulfilled</code>: 一个<code>promise</code>被<code>resolve</code>后就处于<code>fulfilled</code>状态，这个状态不能再改变，而且必须拥有一个不可变的值(<code>value</code>)。</li>
<li><code>rejected</code>: 一个<code>promise</code>被<code>reject</code>后就处于<code>rejected</code>状态，这个状态也不能再改变，而且必须拥有一个不可变的拒绝原因(<code>reason</code>)。</li>
</ol>
<h3 id="thenable"><a href="#thenable" class="headerlink" title="thenable"></a>thenable</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promsie.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>

<h4 id="Optional-parameters"><a href="#Optional-parameters" class="headerlink" title="Optional parameters"></a>Optional parameters</h4><ol>
<li>如果 <code>onFulfilled</code> 不是函数，其必须被忽略</li>
<li>如果 <code>onRejected</code> 不是函数，其必须被忽略</li>
</ol>
<h4 id="onFulfilled"><a href="#onFulfilled" class="headerlink" title="onFulfilled"></a>onFulfilled</h4><p>如果 <code>onFulfilled</code> 是函数：</p>
<ol>
<li>当 <code>promise</code> 执行结束后其必须被调用，其第一个参数为 <code>promise</code> 的终值<code>value</code></li>
<li>在 <code>promise</code> 执行结束前其不可被调用</li>
<li>其调用次数不可超过一次</li>
</ol>
<h4 id="onRejected"><a href="#onRejected" class="headerlink" title="onRejected"></a>onRejected</h4><p>如果 <code>onRejected</code> 是函数：</p>
<ol>
<li>当 <code>promise</code> 被拒绝执行后其必须被调用，其第一个参数为 <code>promise</code> 的据因<code>reason</code></li>
<li>在 <code>promise</code> 被拒绝执行前其不可被调用</li>
<li>其调用次数不可超过一次</li>
</ol>
<h3 id="then"><a href="#then" class="headerlink" title="then"></a>then</h3><p><code>then</code> 方法可以被同一个 <code>promise</code> 调用多次</p>
<ol>
<li>当 <code>promise</code> 成功执行时，所有 <code>onFulfilled</code> 需按照其注册顺序依次回调</li>
<li>当 <code>promise</code> 被拒绝执行时，所有的 <code>onRejected</code> 需按照其注册顺序依次回调</li>
</ol>
<h4 id="Return"><a href="#Return" class="headerlink" title="Return"></a>Return</h4><p><strong><code>then</code> 方法必须返回一个 <code>promise</code> 对象。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise2 = promise1.<span class="title function_">then</span>(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>

<ol>
<li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 返回一个值 <code>x</code> ，则运行 <code>Promise</code> 解决过程：<code>[[Resolve]](promise2, x)</code></li>
<li>如果 <code>onFulfilled</code> 或者 <code>onRejected</code> 抛出一个异常 <code>e</code> ，则 <code>promise2</code> 必须拒绝执行，并返回拒因 <code>e</code></li>
<li>如果 <code>onFulfilled</code> 不是函数且 <code>promise1</code> 成功执行， <code>promise2</code> 必须成功执行并返回相同的值</li>
<li>如果 <code>onRejected</code> 不是函数且 <code>promise1</code> 拒绝执行， <code>promise2</code> 必须拒绝执行并返回相同的据因</li>
</ol>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable constant_">PENDING</span> = <span class="string">&quot;pending&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">FULFILLED</span> = <span class="string">&quot;fulfilled&quot;</span></span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">REJECTED</span> = <span class="string">&quot;rejected&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Promise</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">status</span> = <span class="variable constant_">PENDING</span> <span class="comment">// initial status</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">value</span> = <span class="literal">null</span> <span class="comment">// initial value</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">reason</span> = <span class="literal">null</span> <span class="comment">// initial reason</span></span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onFulfilledCallbacks</span> = []</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">onRejectedCallbacks</span> = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">resolve</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      _this.<span class="property">status</span> = <span class="variable constant_">FULFILLED</span></span><br><span class="line">      _this.<span class="property">value</span> = value</span><br><span class="line"></span><br><span class="line">      _this.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="title function_">i</span>(_this.<span class="property">value</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">reject</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">      _this.<span class="property">status</span> = <span class="variable constant_">REJECTED</span></span><br><span class="line">      _this.<span class="property">reason</span> = reason</span><br><span class="line"></span><br><span class="line">      _this.<span class="property">onRejectedCallbacks</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> <span class="title function_">i</span>(_this.<span class="property">reason</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title function_">fn</span>(resolve, reject)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolvePromise</span>(<span class="params">promise, x, resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (promise === x) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;The promise and the return value are the same&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    x.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">      <span class="title function_">resolvePromise</span>(promise, y, resolve, reject)</span><br><span class="line">    &#125;, reject)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x === <span class="string">&quot;object&quot;</span> || <span class="keyword">typeof</span> x === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> then = x.<span class="property">then</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">reject</span>(e)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> called = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        then.<span class="title function_">call</span>(</span><br><span class="line">          x,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">y</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise, y, resolve, reject)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">r</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line">            called = <span class="literal">true</span></span><br><span class="line">            <span class="title function_">reject</span>(r)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="keyword">if</span> (called) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="title function_">reject</span>(e)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(x)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">then</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> checkOnFulfilled = onFulfilled</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    checkOnFulfilled = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> checkOnRejected = onRejected</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    checkOnRejected = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> _this = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">FULFILLED</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果前面的 promise 抛出异常，后面的必须拒绝执行</span></span><br><span class="line">    <span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(_this.<span class="property">value</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="title function_">checkOnFulfilled</span>(_this.<span class="property">value</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">REJECTED</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(_this.<span class="property">reason</span>)</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> x = <span class="title function_">checkOnRejected</span>(_this.<span class="property">reason</span>)</span><br><span class="line">            <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(e)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="variable constant_">PENDING</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">      _this.<span class="property">onFulfilledCallbacks</span>.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">              <span class="title function_">resolve</span>(_this.<span class="property">value</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> x = <span class="title function_">checkOnFulfilled</span>(_this.<span class="property">value</span>)</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      _this.<span class="property">onRejectedCallbacks</span>.<span class="title function_">push</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">              <span class="title function_">reject</span>(_this.<span class="property">reason</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">var</span> x = <span class="title function_">checkOnRejected</span>(_this.<span class="property">reason</span>)</span><br><span class="line">              <span class="title function_">resolvePromise</span>(promise2, x, resolve, reject)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> promise2</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">resolve</span> = <span class="keyword">function</span> (<span class="params">parameter</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (parameter <span class="keyword">instanceof</span> <span class="title class_">Promise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> parameter</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(parameter)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">reject</span> = <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(reason)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">all</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">var</span> len = promises.<span class="property">length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    promises.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">promise, index</span>) &#123;</span><br><span class="line">      <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promise).<span class="title function_">then</span>(</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">          count++</span><br><span class="line">          result[index] = value</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">            <span class="title function_">resolve</span>(result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">          <span class="title function_">reject</span>(reason)</span><br><span class="line">        &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">race</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = promises.<span class="property">length</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (length === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">resolve</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promises[i]).<span class="title function_">then</span>(</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">resolve</span>(value)</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">reject</span>(reason)</span><br><span class="line">          &#125;</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">catch</span> = <span class="keyword">function</span> (<span class="params">onRejected</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">then</span>(<span class="literal">null</span>, onRejected)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>()).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">fn</span>()).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> error</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">allSettled</span> = <span class="keyword">function</span> (<span class="params">promises</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> len = promises.<span class="property">length</span></span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (len === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(result)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        ;(<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> current = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(promises[i])</span><br><span class="line"></span><br><span class="line">          current.<span class="title function_">then</span>(</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">              count++</span><br><span class="line">              result[i] = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;fulfilled&quot;</span>,</span><br><span class="line">                value,</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">resolve</span>(result)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">              count++</span><br><span class="line">              result[i] = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&quot;rejected&quot;</span>,</span><br><span class="line">                reason,</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              <span class="keyword">if</span> (count === len) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">resolve</span>(result)</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          )</span><br><span class="line">        &#125;)(i)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for promises-aplus-tests test</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="property">deferred</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;</span><br><span class="line">  result.<span class="property">promise</span> = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    result.<span class="property">resolve</span> = resolve</span><br><span class="line">    result.<span class="property">reject</span> = reject</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">Promise</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Promise</title>
    <url>/2018/08/31/Promise/</url>
    <content><![CDATA[<h3 id="Promise-的特点"><a href="#Promise-的特点" class="headerlink" title="Promise 的特点"></a>Promise 的特点</h3><ol>
<li>对象的状态不受外界影响。Promise 对象代表一个异步操作，有三种状态：Pending（进行中）、Fulfilled（已成功）、Rejected（已失败）。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li>
<li>一旦状态改变就不会再变，任何时候得到的都是这个结果。Promise 对象的状态改变只有两个可能：从 Pending 变为 Fulfilled，从 Pending 变为 Rejected。只要这两种情况发生，这时就成为 resolve。就算改变已经发生，再对 Promise 对象添加回调函数，也会立即得到这个结果。与 Event 完全不同，Event 一旦错过再监听是得不到结果的。</li>
</ol>
<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/*异步操作成功*/</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>resolve 函数的作用是，将 Promise 对象的状态从 Pending 变为 Resolved，在异步操作成功时调用，并将异步操作的结果作为参数传递出去。reject 函数的作用是，将 Promise 对象的状态从 Pending 变为 Rejected，将报出的错误传递出去。<br>Promise 实例生成后，可以用 then 方法分别制定 Resolve 状态和 Rejected 状态的回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.<span class="title function_">then</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="comment">//success</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">//failure</span></span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>then 方法可以接受两个回调函数作为参数。第一个回调函数是 Promise 对象的状态变为 Resolved 时调用，第二个回调是 Promise 对象的状态变为 Rejected 时调用。其中，第二个参数是可选的，不一定要提供。这两个函数都接受 Promise 对象传出的值作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">timeout</span>(<span class="params">ms</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(resolve, ms, <span class="string">&#x27;done&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">timeout</span>(<span class="number">100</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//&#x27;done&#x27;</span></span><br></pre></td></tr></table></figure>

<p>过了 ms 后，Promise 实例的状态变为 Resolved，触发 then 方法绑定的回调函数。<br>Promise 新建后就会立即执行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Promise&#x27;</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Resolve&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Promise</span></span><br><span class="line"><span class="comment">//hi</span></span><br><span class="line"><span class="comment">//Resolve</span></span><br></pre></td></tr></table></figure>

<p>then 方法指定的回调函数将在当前脚本所有同步任务执行完成后才会执行，所以 Resolve 最后输出。<br>异步加载图片：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadImageAsync</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    image.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(image)</span><br><span class="line">    &#125;</span><br><span class="line">    image.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Could not load image at &#x27;</span> + url))</span><br><span class="line">    &#125;</span><br><span class="line">    image.<span class="property">src</span> = url</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Promise 实现 AJAX：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> getJSON = <span class="keyword">function</span> (<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> client = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    client.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url)</span><br><span class="line">    client.<span class="property">onreadystatechange</span> = handler</span><br><span class="line">    client.<span class="property">responseType</span> = <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    client.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>)</span><br><span class="line">    client.<span class="title function_">send</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handler</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">readyState</span> !== <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="variable language_">this</span>.<span class="property">response</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="variable language_">this</span>.<span class="property">statusText</span>))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> promise</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>).<span class="title function_">then</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">json</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Contents: &#x27;</span> + json)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;出错了&#x27;</span>, error)</span><br><span class="line">  &#125;,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="以-Promise-对象作为-resolve-的参数"><a href="#以-Promise-对象作为-resolve-的参数" class="headerlink" title="以 Promise 对象作为 resolve 的参数"></a>以 Promise 对象作为 resolve 的参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="title function_">resolve</span>(p1)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>此时 p1 的状态决定了 p2 的状态。如果 p1 的状态是 Pending，那么 p2 的回调就会等待 p1 的改变；如果 p1 的状态已经是 Resolved 或者 Rejected，那么 p2 的回调函数就会立即执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;fail&#x27;</span>)), <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">resolve</span>(p1), <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line">p2.<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br></pre></td></tr></table></figure>

<p>p1 三秒后变为 Rejected，p2 在一秒后变为 Resolved，由于 p2 返回的是另一个 Promise，所以 p2 的状态无效，由 p1 的状态决定 p2 的状态。后面的 then 语句都变成针对 p2 的，再过两秒，p1 变为 Rejected，触发 catch 指定的回调函数。<br><strong>调用 resolve 或 reject 并不会结束 Promise 函数的执行</strong><br>因为立即 resolve 的 Promise 是在本轮事件循环的末尾执行，总是晚于本轮循环的同步任务。所以最好在前面加上 return 语句。</p>
<h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p>是.then(null, rejection)的别名，用于指定发生错误时的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">getJSON</span>(<span class="string">&#x27;/posts.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">posts</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">//处理getJSON和前一个回调函数运行时发生的错误</span></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val)).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected:&#x27;</span>, err),</span><br><span class="line">)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fulfilled:&#x27;</span>, val)).<span class="title function_">then</span>(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;rejected&#x27;</span>, err),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="title function_">reject</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>比较可知 reject 方法的作用等同于抛出错误。<br><strong>如果 Promise 状态已经变成 Resolved，再抛出错误是无效的</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;ok&#x27;</span>)</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">  &#125;) <span class="comment">//&#x27;ok&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Promise 对象的错误具有冒泡性质，会一直向后传递，直到被捕获为止。一般来说，应用 Promise 的 catch 方法。<br>与传统的 try&#x2F;catch 不同的是，如果没有使用 catch 方法指定错误处理的回调函数，Promise 对象抛出的错误不会传递到外层代码，不会有任何反应。需要注意的是，catch 返回的还是一个 Promise 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someAsyncThing = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>) <span class="comment">//ReferenceError</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">someAsyncThing</span>()</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error:&#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//Error: ReferenceErro x is not defined</span></span><br><span class="line"><span class="comment">//carry on</span></span><br></pre></td></tr></table></figure>

<p>如果没有报错，会跳过 catch 方法。catch 方法中还能抛出错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someAsyncThing = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(x + <span class="number">2</span>) <span class="comment">//ReferenceError</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">someAsyncThing</span>()</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">someOtherAsyncThing</span>()</span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">    y + <span class="number">2</span> <span class="comment">//ReferenceError</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;carry on&#x27;</span>, error)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">//x in not defined</span></span><br><span class="line"><span class="comment">//carry on y is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h3><p>将多个 Promise 对象包装成一个新的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">all</span>(p1, p2, p3)</span><br></pre></td></tr></table></figure>

<p>p 的状态由 p1、p2、p3 决定：</p>
<ol>
<li>只有 p1、p2、p3 的状态都变成 fulfilled，p 的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给 p 的回调函数。</li>
<li>只要 p1、p2、p3 有一个被 Rejected，p 的状态就变为 Rejected，此时第一个被 Rejected 的实例的返回值会传递给 p 的回调函数。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> databasePromise = <span class="title function_">connectDatabase</span>()</span><br><span class="line"><span class="keyword">const</span> booksPromise = databasePromise.<span class="title function_">then</span>(findAllBooks)</span><br><span class="line"><span class="keyword">const</span> userPromise = databasePromise.<span class="title function_">then</span>(getCurrentUser)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([booksPromise, userPromise]).<span class="title function_">then</span>(<span class="function">(<span class="params">[books, user]</span>) =&gt;</span></span><br><span class="line">  <span class="title function_">pickTopRecommentations</span>(books, user),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>只有 booksPromise 和 userPromise 结果都返回，才会触发 pickTopRecommentations 回调函数。<br><strong>如果作为参数的 Promise 实例自身定义了 catch 方法，那么它被 rejected 时并不会触发 Promise.all 的 catch 方法</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> result)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> result)</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br><span class="line"><span class="comment">//[&#x27;hello&#x27;, Error: test]</span></span><br></pre></td></tr></table></figure>

<p>如果 p2 没有自己的 catch 方法，就会调用 Promise.all 的 catch 方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> result)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;test&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> result)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2])</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(result))</span><br><span class="line">  .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(e))</span><br><span class="line"><span class="comment">//Error: test</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race"></a>Promise.race</h3><p>将多个 Promise 实例包装成一个新的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3])</span><br></pre></td></tr></table></figure>

<p>只要 p1、p2、p3 有一个实例率先改变状态，p 的状态就跟着改变。那个率先改变的实例的返回值就传给 p 的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="title class_">Promise</span>.<span class="title function_">race</span>([</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">&#x27;/resource-that-may-take-a-while&#x27;</span>),</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;request timeout&#x27;</span>)), <span class="number">5000</span>)</span><br><span class="line">  &#125;),</span><br><span class="line">])</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(response))</span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(error))</span><br><span class="line"><span class="comment">//五秒内fetch无法返回变量，p的状态就变为Rejected，从而触发catch方法的回调函数</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve"></a>Promise.resolve</h3><ul>
<li>参数是一个 Promise 实例，不做任何修改，返回这个实例</li>
<li>参数是一个 thenable 对象，将这个对象转为 Promise 对象，然后立即执行 thenable 对象的 then 方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">42</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(thenable)</span><br><span class="line">p1.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//42</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数根本不是具有 then 方法的对象或者不是对象，返回一个新的 Promise 对象，状态为 Resolved</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不带有任何参数，直接返回一个 Resolved 状态的对象</li>
<li>Promise.reject 返回一个状态为 Rejected 的 Promise 对象</li>
</ul>
<p><strong>立即 resolve 的 Promise 对象是在本轮事件循环结束时，而不是在下次事件循环开始时</strong></p>
<h3 id="done"><a href="#done" class="headerlink" title="done"></a>done</h3><p>只要最后一个方法抛出错误，都有可能无法捕捉到，为此可以配置一个 done 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">asyncFunc</span>().<span class="title function_">then</span>(f1).<span class="title function_">catch</span>(r1).<span class="title function_">then</span>(f2).<span class="title function_">done</span>()</span><br></pre></td></tr></table></figure>

<p>实现的代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">done</span> = <span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">then</span>(onFulfilled, onRejected).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> reason</span><br><span class="line">    &#125;, <span class="number">0</span>) <span class="comment">//抛出一个全局错误</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>与 done 最大的区别在于，接受一个普通的回调函数作为参数，该函数不管怎样都执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">server</span><br><span class="line">  .<span class="title function_">listen</span>(<span class="number">0</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// run test</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .<span class="title function_">finally</span>(server.<span class="property">stop</span>)</span><br></pre></td></tr></table></figure>

<p>实现代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Promise</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">finally</span> = <span class="keyword">function</span> (<span class="params">callback</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> P = <span class="variable language_">this</span>.<span class="property">constructor</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">then</span>(</span><br><span class="line">    <span class="function">(<span class="params">value</span>) =&gt;</span> P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> value),</span><br><span class="line">    <span class="function">(<span class="params">reason</span>) =&gt;</span></span><br><span class="line">      P.<span class="title function_">resolve</span>(<span class="title function_">callback</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> reason</span><br><span class="line">      &#125;),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>eg: 加载图片</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> preloadImage = <span class="keyword">function</span> (<span class="params">path</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>()</span><br><span class="line">    image.<span class="property">onload</span> = resolve</span><br><span class="line">    image.<span class="property">onerror</span> = reject</span><br><span class="line">    image.<span class="property">src</span> = path</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generator-函数与-Promise-结合"><a href="#Generator-函数与-Promise-结合" class="headerlink" title="Generator 函数与 Promise 结合"></a>Generator 函数与 Promise 结合</h3><p>使用 Generator 函数管理流程，遇到异步操作时通常返回一个 Promise 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getFoo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> g = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> foo = <span class="keyword">yield</span> <span class="title function_">getFoo</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo)</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">run</span>(<span class="params">generator</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> it = <span class="title function_">generator</span>()</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">go</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (result.<span class="property">done</span>) <span class="keyword">return</span> result.<span class="property">value</span></span><br><span class="line">    <span class="keyword">return</span> result.<span class="property">value</span>.<span class="title function_">then</span>(</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">go</span>(it.<span class="title function_">next</span>(value))</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">go</span>(it.<span class="keyword">throw</span>(error))</span><br><span class="line">      &#125;,</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">go</span>(it.<span class="title function_">next</span>())</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">run</span>(g) <span class="comment">// 用run处理Promise对象，并调用下一个next方法</span></span><br></pre></td></tr></table></figure>

<h3 id="Promise-chaining"><a href="#Promise-chaining" class="headerlink" title="Promise chaining"></a>Promise chaining</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loadJSON</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(url).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> response.<span class="title function_">json</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loadUser</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">fetch</span>(<span class="string">`https://api.github.com/users/<span class="subst">$&#123;name&#125;</span>`</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span></span><br><span class="line">    response.<span class="title function_">json</span>(),</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showAvatar</span>(<span class="params">user</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>)</span><br><span class="line">    img.<span class="property">src</span> = user.<span class="property">avatar_url</span></span><br><span class="line">    img.<span class="property">className</span> = <span class="string">&#x27;example-img&#x27;</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(img)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      img.<span class="title function_">remove</span>()</span><br><span class="line">      <span class="title function_">resolve</span>(loadUser) <span class="comment">// here can resolve another promise</span></span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">loadJSON</span>(<span class="string">&#x27;test.json&#x27;</span>)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> <span class="title function_">loadUser</span>(user.<span class="property">name</span>))</span><br><span class="line">  .<span class="title function_">then</span>(showAvatar)</span><br><span class="line">  .<span class="title function_">then</span>(<span class="function">(<span class="params">user</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`github user: <span class="subst">$&#123;user&#125;</span>`</span>))</span><br><span class="line"><span class="comment">// ... and so on</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Proxy</title>
    <url>/2018/08/20/Proxy/</url>
    <content><![CDATA[<p>Proxy 用于修改某些操作的默认行为，等同与在语言层面做出修改，属于一种 meta programming。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`getting <span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`setting <span class="subst">$&#123;key&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">obj.<span class="property">count</span> = <span class="number">1</span></span><br><span class="line"><span class="comment">//setting count</span></span><br><span class="line">obj.<span class="property">count</span></span><br><span class="line"><span class="comment">//getting count</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>ES6 提供 Proxy 构造函数，用于生成 Proxy 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure>

<p>将 Proxy 对象设置到 object.proxy 属性，从而可以在 object 对象上调用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">proxy</span>: <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler) &#125;</span><br></pre></td></tr></table></figure>

<p>Proxy 实例也可以作为其他对象的原型对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, handler</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proxy)</span><br><span class="line">obj.<span class="property">time</span> <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>同一个 Proxy 可以设置多个拦截属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, name</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name === <span class="string">&quot;prototype&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params">target, thisBinding, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> args[<span class="number">0</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">construct</span>: <span class="keyword">function</span> (<span class="params">target, args</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">1</span>] &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> fproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;, handler)</span><br><span class="line"></span><br><span class="line"><span class="title function_">fproxy</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//1</span></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">fproxy</span>(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//2</span></span><br><span class="line">fproxy.<span class="property"><span class="keyword">prototype</span></span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span> <span class="comment">//true</span></span><br><span class="line">fproxy.<span class="property">foo</span> <span class="comment">//&#x27;hello, foo&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Proxy-方法"><a href="#Proxy-方法" class="headerlink" title="Proxy 方法"></a>Proxy 方法</h3><ul>
<li>get(target, propKey, receiver)<br>拦截对象的属性读取，如 proxy.foo 和 proxy[‘foo’]。最后一个参数是可选的。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(person, &#123;</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, property</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (property <span class="keyword">in</span> target) &#123;</span><br><span class="line">      <span class="keyword">return</span> target[property]</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReferenceError</span>(<span class="string">&#x27;Property &quot;&#x27;</span> + property + <span class="string">&#x27;&quot; does not exist.&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">//张三</span></span><br><span class="line">proxy.<span class="property">age</span> <span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure>
get 方法可以继承：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = <span class="keyword">new</span> <span class="title class_">Proxy</span>(</span><br><span class="line">  &#123;&#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propertyKey, receiver</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;get &quot;</span> + propertyKey)</span><br><span class="line">      <span class="keyword">return</span> target[propertyKey]</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(proto)</span><br><span class="line">obj.<span class="property">aaa</span> <span class="comment">//get aaa</span></span><br></pre></td></tr></table></figure>
使用 get 实现负数索引：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">...elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="title class_">Number</span>(propKey)</span><br><span class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        propKey = <span class="title class_">String</span>(target.<span class="property">length</span> + index)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> target = []</span><br><span class="line">  target.<span class="title function_">push</span>(...elements)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">createArray</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">//&#x27;c&#x27;</span></span><br></pre></td></tr></table></figure>
将 get 转为执行某个函数，实现属性的链式操作：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pipe = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> funcStack = [];</span><br><span class="line"><span class="keyword">var</span> oproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">get : <span class="keyword">function</span> (<span class="params">pipeObject, fnName</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (fnName === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> funcStack.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">val, fn</span>) &#123; <span class="comment">//reduce 接受一个函数作为累加器，从左到右缩减，最终计算为一个值</span></span><br><span class="line"><span class="keyword">return</span> <span class="title function_">fn</span>(val);</span><br><span class="line">&#125;, value);</span><br><span class="line">&#125;</span><br><span class="line">funcStack.<span class="title function_">push</span>(<span class="variable language_">window</span>[fnName]);</span><br><span class="line"><span class="keyword">return</span> oproxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> oproxy;</span><br><span class="line">&#125;</span><br><span class="line">&#125;());</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">double</span> = n =&gt; n _ <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">pow</span> = n =&gt; n _ n;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">reverseInt</span> = n =&gt; n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>) | <span class="number">0</span>;</span><br><span class="line"><span class="title function_">pipe</span>(<span class="number">3</span>).<span class="property">double</span>.<span class="property">pow</span>.<span class="property">reverseInt</span>.<span class="property">get</span>; <span class="comment">//63</span></span><br></pre></td></tr></table></figure></li>
<li>set(target, propKey, value, receiver)<br>拦截对象的属性设置，如 proxy.foo &#x3D; 1，返回一个布尔值。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> validator = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">obj, prop, value</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&quot;age&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(value)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>(<span class="string">&quot;The age is not an integer&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (value &gt; <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RangeError</span>(<span class="string">&quot;The age seems invalid&quot;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//age &lt; 200 直接保存</span></span><br><span class="line">    obj[prop] = value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, validator)</span><br><span class="line">person.<span class="property">age</span> = <span class="number">100</span></span><br><span class="line">person.<span class="property">age</span> = <span class="number">201</span> <span class="comment">//RangeError</span></span><br><span class="line">person.<span class="property">age</span> = <span class="string">&quot;tom&quot;</span> <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure>
给对象设置内部属性：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&quot;get&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value</span>) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&quot;set&quot;</span>)</span><br><span class="line">    target[key] = value</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span>(<span class="params">key, action</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">_temp</span> <span class="comment">//Error</span></span><br><span class="line">proxy.<span class="property">_temp</span> = <span class="number">2</span> <span class="comment">//Error</span></span><br></pre></td></tr></table></figure></li>
<li>has(target, propKey)<br>拦截 propKey in proxy 的操作，返回一个布尔值。has 拦截对 for…in 循环不生效</li>
<li>deleteProperty(target, propKey)<br>拦截 delete proxy[propKey]的操作，返回一个布尔值。如果这个方法抛出错误或者返回 false，当前属性就不能被 delete 删除。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">deleteProperty</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="title function_">invariant</span>(key, <span class="string">&quot;delete&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">invariant</span>(<span class="params">key, action</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Invalid attempt to <span class="subst">$&#123;action&#125;</span> private &quot;<span class="subst">$&#123;key&#125;</span>&quot; property`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_temp</span>: <span class="string">&quot;test&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="keyword">delete</span> proxy.<span class="property">_temp</span> <span class="comment">//Error</span></span><br></pre></td></tr></table></figure></li>
<li>ownKeys(target)<br>拦截 Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)，返回一个数组。该方法返回所有属性名，而<br>Object.keys()返回结果仅包括目标对象和自身的可遍历属性。</li>
<li>getOwnPropertyDescriptor(target, propKey)<br>拦截 Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象或者 undefined。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">getOwnPropertyDescriptor</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key[<span class="number">0</span>] === <span class="string">&quot;_&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(target, key)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">_foo</span>: <span class="string">&quot;foo&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span> &#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&quot;_foo&quot;</span>) <span class="comment">//undefined</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(proxy, <span class="string">&quot;bar&quot;</span>) <span class="comment">//&#123; value : &#x27;bar&#x27;, writable : true, enumerable : true, configurable : true &#125;</span></span><br></pre></td></tr></table></figure></li>
<li>defineProperty(target, propKey, propDesc)<br>拦截 Object.defineProperty:<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="title function_">defineProperty</span>(<span class="params">target, key, descriptor</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="string">&quot;bar&quot;</span></span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></li>
<li>preventExtensions(target)<br>拦截 Object.preventExtensions，必须返回布尔值，否则会强制转换为布尔值。</li>
<li>getPrototypeOf(target)<br>拦截获取对象原型</li>
<li>isExtensible(target)<br>拦截 Object.isExtensible 操作</li>
<li>setPrototypeOf(target, proto)<br>拦截 Object.setPrototypeOf 方法</li>
<li>apply(target, object, args)<br>拦截函数的调用、call 和 apply 操作，<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;apply&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line"><span class="title function_">p</span>() <span class="comment">//apply</span></span><br></pre></td></tr></table></figure></li>
<li>construct(target, args)<br>拦截 new 命令，返回的必须是对象，否则会报错：<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;, &#123;</span><br><span class="line">  <span class="attr">construct</span>: <span class="keyword">function</span> (<span class="params">target, args</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;called &quot;</span> + args.<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">value</span>: args[<span class="number">0</span>] * <span class="number">10</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">p</span>(<span class="number">1</span>).<span class="property">value</span></span><br><span class="line"><span class="comment">//called 1</span></span><br><span class="line"><span class="comment">//10</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Proxy-revocable"><a href="#Proxy-revocable" class="headerlink" title="Proxy.revocable()"></a>Proxy.revocable()</h3><p>返回一个可取消的 Proxy 实例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; proxy, revoke &#125; = <span class="title class_">Proxy</span>.<span class="title function_">revocable</span>(target, handler)</span><br><span class="line">proxy.<span class="property">foo</span> = <span class="number">123</span></span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">revoke</span>()</span><br><span class="line">proxy.<span class="property">foo</span> <span class="comment">//TypeError</span></span><br></pre></td></tr></table></figure>

<p>执行 revoke 函数后再访问 Proxy 实例，就会抛出一个错误。</p>
<h3 id="this-问题"><a href="#this-问题" class="headerlink" title="this 问题"></a>this 问题</h3><p>在 Proxy 代理下，目标对象内部的 this 关键字会指向 Proxy 代理：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _name = <span class="keyword">new</span> <span class="title class_">WeakMap</span>()</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    _name.<span class="title function_">set</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> _name.<span class="title function_">get</span>(<span class="variable language_">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> jane = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jane&quot;</span>)</span><br><span class="line">jane.<span class="property">name</span> <span class="comment">//&#x27;Jane&#x27;</span></span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(jane, &#123;&#125;)</span><br><span class="line">proxy.<span class="property">name</span> <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>此外，有些原生对象内部属性只有通过正确的 this 才能获取，所以 Proxy 也无法代理这些原生对象的属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="keyword">const</span> handler = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="title function_">getDate</span>() <span class="comment">//TypeError: This is not a Date Object</span></span><br></pre></td></tr></table></figure>

<p>这时，this 绑定原始对象就可以解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> target = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2018-8-31&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params">target, prop</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prop === <span class="string">&quot;getDate&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> target.<span class="property">getDate</span>.<span class="title function_">bind</span>(target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, prop)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> proxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br><span class="line">proxy.<span class="title function_">getDate</span>() <span class="comment">//31</span></span><br></pre></td></tr></table></figure>

<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><p>Observer mode：函数自动观察对象，一旦数据有变化，函数就会自动执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> hero = &#123;</span><br><span class="line">  <span class="comment">// data object</span></span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="attr">hp</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">sp</span>: <span class="number">100</span>,</span><br><span class="line">  <span class="attr">equipment</span>: [<span class="string">&quot;weapon&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> observableArray = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handler = &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="function">(<span class="params">target, key, value, receiver</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">    observableArray.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="title function_">item</span>(key))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Create a Proxy object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Object</span>&#125; obj the data object</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">Object</span>&#125; <span class="variable">Proxy</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">createProxy</span> = (<span class="params">obj</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, handler)</span><br><span class="line"><span class="keyword">const</span> heroProxy = <span class="title function_">createProxy</span>(hero) <span class="comment">// the data Proxy</span></span><br><span class="line"></span><br><span class="line">observableArray.<span class="title function_">add</span>(<span class="function">(<span class="params">prop</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// callback function</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`new <span class="subst">$&#123;prop&#125;</span>: <span class="subst">$&#123;heroProxy[prop]&#125;</span>`</span>) <span class="comment">// log value of the prop handled</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">heroProxy.<span class="property">name</span> = <span class="string">&quot;change name&quot;</span> <span class="comment">// new name: change name</span></span><br><span class="line">heroProxy.<span class="property">sp</span> = <span class="number">12</span> <span class="comment">// new sp: 12</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>React Fast Refresh 实现原理</title>
    <url>/2025/03/10/React-Fast-Refresh-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<p>React Fast Refresh 是 React 官方推荐的 HMR 解决方案，旨在提供快速、可靠的热更新体验，同时保留组件的本地状态（例如 <code>useState</code> 和 <code>useRef</code> 的值）。它由 Facebook 团队开发，广泛集成到现代构建工具（如 Vite 和 Next.js）中。</p>
<h1 id="背景与目标"><a href="#背景与目标" class="headerlink" title="背景与目标"></a>背景与目标</h1><h2 id="传统-HMR-的问题"><a href="#传统-HMR-的问题" class="headerlink" title="传统 HMR 的问题"></a>传统 HMR 的问题</h2><ul>
<li>在传统的 HMR 实现中，当模块更新时，整个组件树可能会被重新渲染，导致本地状态丢失。</li>
<li>对于 React 组件，状态丢失会影响开发体验，例如表单输入值或动画状态被重置。</li>
</ul>
<h2 id="React-Fast-Refresh-的目标"><a href="#React-Fast-Refresh-的目标" class="headerlink" title="React Fast Refresh 的目标"></a>React Fast Refresh 的目标</h2><ul>
<li>提供快速的模块更新。</li>
<li>保留 React 组件的本地状态。</li>
<li>只重新渲染受影响的组件，而不是整个应用。</li>
</ul>
<h1 id="核心原理"><a href="#核心原理" class="headerlink" title="核心原理"></a>核心原理</h1><p>React Fast Refresh 通过在编译时注入特定的运行时代码，并在运行时与 React 协调器（React Reconciler）协作，实现高效的热更新。</p>
<span id="more"></span>

<h2 id="编译时注入"><a href="#编译时注入" class="headerlink" title="编译时注入"></a>编译时注入</h2><ul>
<li><p>工具支持：</p>
<ul>
<li>React Fast Refresh 依赖于 Babel 插件（<code>react-refresh/babel</code>）在编译时处理源代码。</li>
<li>Vite 通过 <code>@vitejs/plugin-react</code> 集成这个功能。</li>
</ul>
</li>
<li><p>注入的内容：</p>
<ul>
<li><p>为每个函数组件（Function Component）注入唯一的标识符（ID）和 HMR 逻辑。</p>
</li>
<li><p>示例（简化后的代码）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原始代码</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编译后注入的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; $RefreshReg$, $RefreshSig$ &#125; <span class="keyword">from</span> <span class="string">&quot;react-refresh/runtime&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">$RefreshReg$(<span class="title class_">MyComponent</span>, <span class="string">&quot;MyComponent&quot;</span>) <span class="comment">// 注册组件</span></span><br><span class="line">$RefreshSig$() <span class="comment">// 签名，用于检测变化</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>作用：</p>
<ul>
<li><code>$RefreshReg$</code>：将组件注册到 Fast Refresh 运行时，关联一个唯一的 ID。</li>
<li><code>$RefreshSig$</code>：生成组件的签名，用于检测代码变化。</li>
</ul>
</li>
</ul>
<h2 id="运行时管理"><a href="#运行时管理" class="headerlink" title="运行时管理"></a>运行时管理</h2><ul>
<li>React Refresh Runtime：<ul>
<li>Fast Refresh 提供了一个运行时库（<code>react-refresh/runtime</code>），由构建工具注入到客户端。</li>
<li>这个运行时负责与 React 协调器协作，管理组件的更新。</li>
</ul>
</li>
<li>组件注册：<ul>
<li>在应用启动时，所有组件通过 <code>$RefreshReg$</code> 注册到运行时，记录其初始定义和签名。</li>
</ul>
</li>
<li>签名检测：<ul>
<li>每次模块更新时，运行时比较新旧代码的签名。</li>
<li>如果签名未变（例如只修改了无关逻辑），组件不会重新注册。</li>
<li>如果签名变化（例如修改了 <code>useState</code> 调用），运行时标记组件需要更新。</li>
</ul>
</li>
</ul>
<h2 id="HMR-集成"><a href="#HMR-集成" class="headerlink" title="HMR 集成"></a>HMR 集成</h2><ul>
<li>Vite 的 HMR 机制：<ul>
<li>Vite 检测到文件变化后，通过 WebSocket 通知客户端。</li>
<li>对于 React 文件（<code>.jsx</code> 或 <code>.tsx</code>），Vite 编译新代码并发送 HMR 更新事件。</li>
</ul>
</li>
<li>Fast Refresh 的处理：<ul>
<li>客户端的 HMR 运行时（&#x2F;@vite&#x2F;client）接收到更新后，调用 react-refresh&#x2F;runtime 的 API。</li>
<li>运行时执行以下步骤：<ol>
<li>重新加载模块：<ul>
<li>使用动态 <code>import()</code> 加载更新后的模块。</li>
</ul>
</li>
<li>比较签名：<ul>
<li>检查新模块中的组件签名是否与旧签名匹配。</li>
</ul>
</li>
<li>更新组件：<ul>
<li>如果签名匹配，运行时通知 React 重新渲染受影响的组件。</li>
<li>如果签名不匹配（例如添加了新的 Hook），运行时触发全组件刷新，但保留状态。</li>
</ul>
</li>
</ol>
</li>
</ul>
</li>
</ul>
<h2 id="状态保留"><a href="#状态保留" class="headerlink" title="状态保留"></a>状态保留</h2><ul>
<li>React Fiber 的支持：<ul>
<li>React Fast Refresh 利用 React 的 Fiber 架构（React 的内部协调机制）。</li>
<li>Fiber 节点保存了组件的实例和状态（<code>memoizedState</code>）。</li>
<li>当组件更新时，Fast Refresh 告诉 React 重用现有的 Fiber 节点，而不是重新创建。</li>
</ul>
</li>
<li>条件：<ul>
<li>只有函数组件支持状态保留（类组件不支持）。</li>
<li>Hooks 的调用顺序必须保持一致（React 的 Hook 规则）。</li>
</ul>
</li>
</ul>
<h1 id="限制与边界"><a href="#限制与边界" class="headerlink" title="限制与边界"></a>限制与边界</h1><h2 id="支持的组件"><a href="#支持的组件" class="headerlink" title="支持的组件"></a>支持的组件</h2><ul>
<li>只支持函数组件和 Hooks，不支持类组件。</li>
</ul>
<h2 id="边界情况"><a href="#边界情况" class="headerlink" title="边界情况"></a>边界情况</h2><ul>
<li>如果修改了 Hook 的调用顺序或数量，Fast Refresh 无法保留状态，会触发全组件刷新。</li>
<li>如果模块没有显式接受 HMR（例如没有注入 Fast Refresh 逻辑），Vite 会触发全页面刷新。</li>
</ul>
<h2 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h2><ul>
<li>Fast Refresh 会在控制台输出警告，提示开发者修复代码以避免状态丢失。</li>
</ul>
<h1 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h1><ul>
<li>增量更新： 只重新渲染受影响的组件，而不是整个应用。</li>
<li>快速编译： Vite 使用 Esbuild 快速编译 JSX&#x2F;TSX 文件，减少更新延迟。</li>
<li>签名优化： 签名比较避免不必要的组件更新，提高性能。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
        <tag>React</tag>
        <tag>HMR</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native Low Version(&lt;0.74.0) Upgrade targetSdkVersion to 34</title>
    <url>/2024/10/17/React-Native-Low-Version-0-74-0-Upgrade-targetSdkVersion-to-34/</url>
    <content><![CDATA[<h2 id="1-Make-Sure-the-compileSdkVersion-is-correct"><a href="#1-Make-Sure-the-compileSdkVersion-is-correct" class="headerlink" title="1. Make Sure the compileSdkVersion is correct."></a>1. Make Sure the <code>compileSdkVersion</code> is correct.</h2><p>Cause if you don’t have the correct version of <code>compileSdkVersion</code>, the <code>Context.RECEIVER_EXPORTED</code> will not found.</p>
<figure class="highlight gradle"><figcaption><span>build.gradle</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  ext &#123;</span><br><span class="line">     buildToolsVersion = <span class="string">&quot;***&quot;</span></span><br><span class="line">     minSdkVersion = ***</span><br><span class="line">     compileSdkVersion = <span class="number">33</span></span><br><span class="line">     targetSdkVersion = <span class="number">34</span></span><br><span class="line">     ndkVersion = <span class="string">&quot;***&quot;</span></span><br><span class="line">     googlePlayServicesAuthVersion = <span class="string">&quot;***&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-Rewrite-the-registerReceiver-in-MainApplication-java"><a href="#2-Rewrite-the-registerReceiver-in-MainApplication-java" class="headerlink" title="2. Rewrite the registerReceiver in MainApplication.java"></a>2. Rewrite the <code>registerReceiver</code> in <code>MainApplication.java</code></h2><p>Make sure the <code>registerReceiver</code> is override before the <code>onCreate</code> function.</p>
<figure class="highlight java"><figcaption><span>MainApplication.java</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Intent <span class="title function_">registerReceiver</span><span class="params">(<span class="meta">@Nullable</span> BroadcastReceiver receiver, IntentFilter filter)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">34</span> &amp;&amp; getApplicationInfo().targetSdkVersion &gt;= <span class="number">34</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.registerReceiver(receiver, filter, Context.RECEIVER_EXPORTED);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="built_in">super</span>.registerReceiver(receiver, filter);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// some code here</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>

<h2 id="3-Clean-Project-and-Rebuild-the-apk-package"><a href="#3-Clean-Project-and-Rebuild-the-apk-package" class="headerlink" title="3. Clean Project and Rebuild the apk package"></a>3. Clean Project and Rebuild the apk package</h2><h4 id=""><a href="#" class="headerlink" title=""></a></h4><blockquote>
<p>Reference here: <a href="https://medium.com/@anaz_19473/react-native-app-crashes-on-upgrading-to-targetsdkversion-34-android-14-f8f575da6b45">React Native App Crashes — On upgrading to targetSdkVersion 34(Android 14)</a></p>
</blockquote>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>React Native Text组件不wrap</title>
    <url>/2024/07/15/React-Native-Text%E7%BB%84%E4%BB%B6%E4%B8%8Dwrap/</url>
    <content><![CDATA[<h3 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h3><p>如果 wrapp 的 flex-direction 为 row 的时候，Text 内部不自动 wrap。还是测试拿给我看，才发现某些机型会存在这种问题。</p>
<p>开始以为是 Text 内部会根据<code>flexbox</code>而有不同的展现，但是翻阅官方文档：</p>
<blockquote>
<p>The <Text> element is unique relative to layout: everything inside is no longer using the Flexbox layout but using text layout. This means that elements inside of a <Text> are no longer rectangles, but wrap when they see the end of the line.</p>
</blockquote>
<p>Text 组件内部默认是 <code>wrap</code> 的，除非这一整个是一个超长的单词，否则就会在 white space 的时候自动 break 了。<br>如果给 wrapp 设置 wrap，那么整个 text 直接就 wrap 到下一行，icon 单独一行了。（这部分官方是有案例的，根据 Text 外部的 Container，wrap 也是不一样的）</p>
<p>好嘛，到底是什么东西导致的？为什么 flex-direction: row 就给我炸了？</p>
<p>原因: element 的宽度计算方式导致的</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>官方的解释：每个 element 的 size 大致可以分为两种方式：</p>
<ul>
<li>content-driven</li>
<li>parent-driven</li>
</ul>
<ol>
<li>flex-direction: column 的时候，宽度首先由 content-driven，然后再由 parent-driven，高度直接由 content-driven，完美，一点问题没有。</li>
<li>flex-direction: row 的时候：高度由 comtent-driven，宽度呢？那当然是 content-driven 啊！ … 不好意思，Text 无法计算自己的 width，why？因为 Text 是 autosize 的！（也有意外情况，如果你把 Text 给 absolute 起来，那么就可以计算了）。所以此时的 Text 的 width，是由 parent-driven，也就是整个 wrapper 的宽度了。</li>
</ol>
<p>解决方法也很简单，Text 上挂一个 flexShrink: 1，让它自己玩去吧。</p>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>React Native</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>Reflect</title>
    <url>/2018/08/31/Reflect/</url>
    <content><![CDATA[<ol>
<li>从 Reflect 对象上可以获得语言内部的方法</li>
<li>修改某些 Object 方法的返回结果，让其变得更合理。比如 Object.defineProperty 在无法定义属性时会抛出一个错误，而 Reflect.defineProperty 则会返回 false</li>
<li>让 Object 操作都变成函数行为。</li>
<li>只要是 Proxy 对象的方法，就能在 Reflect 对象上找到相应的方法，无论 Proxy 怎么修改默认行为，总可以在 Reflect 上获取默认行为</li>
</ol>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><ul>
<li><p>Reflect.apply(target, thisArg, args)<br>等同于 Function.prototype.apply.call(func, thisArg, args)，用于绑定 this 对象后执行给定函数。</p>
</li>
<li><p>Reflect.construct(target, args)<br>等同于 new target(…args)，提供了一种不使用 new 来调用构造函数的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Greeting</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//new 的写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="title class_">Greeting</span>(<span class="string">&quot;张三&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Reflect.construct 写法</span></span><br><span class="line"><span class="keyword">const</span> instance = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Greeting</span>, [<span class="string">&quot;张三&quot;</span>])</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li>Reflect.get(target, name, receiver)<br>查找并返回 target 的 name 属性，如果没有返回 undefined。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">baz</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> + <span class="variable language_">this</span>.<span class="property">bar</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, <span class="string">&quot;foo&quot;</span>) <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, <span class="string">&quot;baz&quot;</span>) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
如果 name 属性部署了 getter，则 getter 的 this 绑定 receiver：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">gaz</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span> + <span class="variable language_">this</span>.<span class="property">bar</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myobj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">bar</span>: <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(obj, <span class="string">&quot;gaz&quot;</span>, myobj) <span class="comment">//myobj.foo + myobj.bar 6</span></span><br></pre></td></tr></table></figure>
<strong>如果第一个参数不是 object，会报错</strong><br>Reflect.set 会触发 Proxy.defineProperty 拦截：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> p = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> handler = &#123;</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;set&quot;</span>)</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">defineProperty</span>(<span class="params">target, key, attribute</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;defineProperty&quot;</span>)</span><br><span class="line">    <span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, key, attribute)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Proxy</span>(p, handler)</span><br><span class="line">obj.<span class="property">a</span> = <span class="string">&quot;A&quot;</span></span><br><span class="line"><span class="comment">//set</span></span><br><span class="line"><span class="comment">//defineProperty</span></span><br></pre></td></tr></table></figure></li>
<li>Reflect.set(target, name, value, receiver)<br>设置 target 的 name 属性等于 value。<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">bar</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">foo</span> = value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">foo</span> <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj, <span class="string">&quot;foo&quot;</span>, <span class="number">2</span>)</span><br><span class="line">obj.<span class="property">foo</span> <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
如果 name 属性设置了 setter，则 setter 的 this 绑定 receiver：<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">bar</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">foo</span> = value)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myobj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(obj, <span class="string">&quot;bar&quot;</span>, <span class="number">4</span>, myobj)</span><br><span class="line">myobj.<span class="property">foo</span> <span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<strong>如果第一个参数不是 object，会报错</strong></li>
<li>Reflect.defineProperty(target, name, descriptor)<br>用来定义对象的属性。</li>
<li>Reflect.deleteProperty(target, name)<br>等同于 delete obj[name]，用于删除对象的属性，返回一个布尔值，删除成功返回 true，否则返回 false。</li>
<li>Reflect.has(target, name)<br>对应 name in target 中的 in 运算符，如果第一个参数不是对象，Reflect.has 和 in 都会报错。</li>
<li>Reflect.ownKeys(target)<br>返回对象的所有属性，包括 Symbol 属性。</li>
<li>Reflect.isExtensible(target)<br>返回一个布尔值，表示当前对象是否可拓展。</li>
<li>Reflect.preventExtensions(target)<br>用于使一个对象变为不可拓展的，返回一个布尔值，代表是否成功。</li>
<li>Reflect.getOwnPropertyDescriptor(target, name)<br>基本等同于 Object.getOwnPropertyDescriptor(target, propertyKey)，用于获得指定属性的描述对象。</li>
<li>Reflect.getPrototypeOf(target)<br>用于读取对象的<strong>prop</strong>属性，对应 Object.getPrototypeOf(obj)。</li>
<li>Reflect.setPrototypeOf(target, prototype)<br>用于设置对象的<strong>prop</strong>属性，返回第一个参数对象。</li>
</ul>
<h3 id="用-Proxy-实现观察者模式"><a href="#用-Proxy-实现观察者模式" class="headerlink" title="用 Proxy 实现观察者模式"></a>用 Proxy 实现观察者模式</h3><p>Observe mode 指的是函数自动观察数据对象的模式，一旦对象有变化，函数就会自动执行。<br>思路：使用 observable 和 observe 这两个函数，observable 函数返回一个原始对象的 Proxy 代理，拦截赋值操作，触发充当观察者的各个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> queueObservers = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = (<span class="params">fn</span>) =&gt; queueObservers.<span class="title function_">add</span>(fn)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = (<span class="params">obj</span>) =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123; set &#125;) <span class="comment">//拦截 set</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver) <span class="comment">//完成原始操作</span></span><br><span class="line">  queueObservers.<span class="title function_">forEach</span>(<span class="function">(<span class="params">observer</span>) =&gt;</span> <span class="title function_">observer</span>())</span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="title function_">observable</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>， <span class="subst">$&#123;person.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">observe</span>(print)</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;李四&quot;</span> <span class="comment">//李四，20</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>RegExp断言</title>
    <url>/2020/07/24/RegExp%E6%96%AD%E8%A8%80/</url>
    <content><![CDATA[<h3 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h3><ul>
<li><code>lookahead assertion</code>：<code>x</code>在<code>y</code>之前才匹配，格式为<code>/x(?=y)/</code></li>
<li><code>negative lookahead assertion</code>：只有<code>x</code>不在<code>y</code>之前才匹配，格式为<code>/x(?!y)/</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;now is 02:11:44&#x27;</span></span><br><span class="line"></span><br><span class="line">/\d+(?=:)/.<span class="title function_">exec</span>(str) <span class="comment">// [&#x27;02&#x27;]</span></span><br><span class="line">/\d+(?!\.)/.<span class="title function_">exec</span>(str) <span class="comment">// [&#x27;0&#x27;]</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="后行断言"><a href="#后行断言" class="headerlink" title="后行断言"></a>后行断言</h3><ul>
<li><code>lookbehind assertion</code>：<code>x</code>只有在<code>y</code>后面才匹配，格式为<code>/(?&lt;=y)x/</code></li>
<li><code>negative lookbehind assertion</code>：只有<code>x</code>不在<code>y</code>后面才匹配，格式为<code>/(?&lt;!y)x/</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;now is 02:11:44&#x27;</span></span><br><span class="line"></span><br><span class="line">/(?&lt;=:)\d+<span class="regexp">/.exec(str) /</span>/ [<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line">/(?&lt;!:)\d+<span class="regexp">/.exec(str) /</span>/ [<span class="string">&#x27;02&#x27;</span>]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
  </entry>
  <entry>
    <title>ScrollView Custom Scroll Indicator</title>
    <url>/2024/10/15/ScrollView-Custom-Scroll-Indicator/</url>
    <content><![CDATA[<h1 id="Custom-Scroll-Indicator-for-ScrollView"><a href="#Custom-Scroll-Indicator-for-ScrollView" class="headerlink" title="Custom Scroll Indicator for ScrollView"></a>Custom Scroll Indicator for ScrollView</h1><figure class="highlight tsx"><figcaption><span>Demo.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useMemo, useState &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ScrollView</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> [contentSize, setContentSize] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [scrollViewSize, setScrollViewSize] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [scrollPosition, setScrollPosition] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> indicatorWidth = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentSize &gt; <span class="number">0</span> &amp;&amp; scrollViewSize &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (scrollViewSize / contentSize) * scrollViewSize</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;, [contentSize, scrollViewSize])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> indicatorPosition = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (contentSize &gt; <span class="number">0</span> &amp;&amp; scrollPosition &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (scrollPosition / contentSize) * scrollViewSize</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;, [contentSize, scrollPosition, scrollViewSize])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">ScrollView</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        // <span class="attr">disable</span> <span class="attr">default</span> <span class="attr">scroll</span> <span class="attr">indicator</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">showsHorizontalScrollIndicator</span>=<span class="string">&#123;false&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onLayout</span>=<span class="string">&#123;(event)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          setScrollViewSize(event.nativeEvent?.layout?.width ?? 0)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        onContentSizeChange=&#123;(w) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          setContentSize(w)</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        horizontal // set horizontal scroll</span></span><br><span class="line"><span class="language-xml">        scrollEventThrottle=&#123;16&#125; // throttle scroll event to improve performance</span></span><br><span class="line"><span class="language-xml">        onScroll=&#123;(event) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          // change scroll position here</span></span><br><span class="line"><span class="language-xml">          const &#123; contentOffset &#125; = event.nativeEvent</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          const &#123; x = 0 &#125; = contentOffset</span></span><br><span class="line"><span class="language-xml">          const max = contentSize - scrollViewSize</span></span><br><span class="line"><span class="language-xml">          const min = 0</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          if (x &gt; max) &#123;</span></span><br><span class="line"><span class="language-xml">            setScrollPosition(max)</span></span><br><span class="line"><span class="language-xml">          &#125; else if (x &lt; min) &#123;</span></span><br><span class="line"><span class="language-xml">            setScrollPosition(min)</span></span><br><span class="line"><span class="language-xml">          &#125; else &#123;</span></span><br><span class="line"><span class="language-xml">            setScrollPosition(x)</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        &#123;/* Content here */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      &#123;/* custom scroll indicator */&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">bottom:</span> <span class="attr">0</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">height:</span> <span class="attr">4</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">width:</span> <span class="attr">indicatorWidth</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">position:</span> &quot;<span class="attr">absolute</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">left:</span> <span class="attr">indicatorPosition</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">borderRadius:</span> <span class="attr">4</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">backgroundColor:</span> &quot;#<span class="attr">EEEEEE</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>React Native</tag>
      </tags>
  </entry>
  <entry>
    <title>Set</title>
    <url>/2018/08/18/Set/</url>
    <content><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>Set 类似于数组，但是成员的值都是唯一的，没有重复。Set 本身是一个构造函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].<span class="title function_">forEach</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> set.<span class="title function_">add</span>(x))</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">//1, 2, 3, 4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">;[...set] <span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组除重</span></span><br><span class="line">;[...<span class="keyword">new</span> <span class="title class_">Set</span>(array)]</span><br></pre></td></tr></table></figure>

<p>在 Set 内部，NaN 是相等的，两个对象总是不相等的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">NaN</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">NaN</span></span><br><span class="line">set.<span class="title function_">add</span>(a).<span class="title function_">add</span>(b)</span><br><span class="line">set.<span class="property">size</span> <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">set.<span class="title function_">add</span>(&#123;&#125;).<span class="title function_">add</span>(&#123;&#125;)</span><br><span class="line">set.<span class="property">size</span> <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Set-实例的属性和方法"><a href="#Set-实例的属性和方法" class="headerlink" title="Set 实例的属性和方法"></a>Set 实例的属性和方法</h3><p>Set 结构的实例有以下属性：</p>
<ul>
<li>Set.prototype.constructor：构造函数，默认是 Set 函数</li>
<li>Set.prototype.size：返回 Set 成员的总数</li>
</ul>
<p>Set 实例的方法：</p>
<ul>
<li>add(value)：添加某个值，返回 Set 结构本身</li>
<li>delete(value)：删除某个值，返回布尔值表示是否删除成功</li>
<li>has(value)：返回一个布尔值，表示参数是否为 Set 的成员</li>
<li>clear()：清除所有成员，<strong>没有返回值</strong></li>
</ul>
<p>Array.from 方法可以将 Set 转为数组：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> item = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">const</span> array = <span class="title class_">Array</span>.<span class="title function_">from</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">//去重</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dedupe</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="keyword">new</span> <span class="title class_">Set</span>(array))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><ul>
<li>keys()：返回键名的遍历器</li>
<li>values()：返回键值的遍历器</li>
<li>entries()：返回键值对的遍历器</li>
<li>forEach()：使用回调函数遍历每个成员</li>
</ul>
<p><strong>Set 的遍历顺序就是插入顺序</strong><br>由于 Set 结构没有键名，所以 values 和 keys 方法的行为完全一致。</p>
<h3 id="WeakSet"><a href="#WeakSet" class="headerlink" title="WeakSet"></a>WeakSet</h3><ul>
<li>成员只能是对象，而不能是其他类型的值</li>
<li>WeakSet 中的对象都是弱引用，如果其他对象都不再引用该对象，那么 GC 会自动回收该对象所占的内存，不考虑该对象是否在 WeakSet 中</li>
<li>没有 size 属性，不可遍历</li>
</ul>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Some Lists</title>
    <url>/2019/05/20/Some-Lists/</url>
    <content><![CDATA[<h3 id="TV-series"><a href="#TV-series" class="headerlink" title="TV series"></a>TV series</h3><ul>
<li><em>Game of Thrones</em></li>
<li><em>WestWorld</em></li>
<li><em>Chernobyl</em></li>
<li><em>Fantasmagorias</em></li>
<li><em>Love, Death &amp; Robots</em></li>
</ul>
<span id="more"></span>

<h3 id="Music"><a href="#Music" class="headerlink" title="Music"></a>Music</h3><ul>
<li>King Boomba’s Crew - Edison Chen&#x2F;MC Hotdog</li>
<li>Woman27 - MC Hotdog</li>
<li>贫民百万歌星 - MC Hotdog</li>
<li>差不多先生 - MC Hotdog</li>
<li>毒 - MC Hotdog</li>
<li>嘿嘿 Taxi - MC Hotdog</li>
<li>十三号天使 - MC Hotdog</li>
<li>轻熟女 27 - MC Hotdog</li>
<li>烦死人 - MC Hotdog</li>
<li>1999 - Charli XCX&#x2F;Troye Sivan</li>
<li>Nothing on you - Bruno Mars&#x2F;B.o.B</li>
<li>Mr.Sandman - Edison Chen</li>
<li>Salute - Edsion Chen</li>
<li>金翅鸟 2012 - MC 仁</li>
<li>Stuttering - Fefe Dobson</li>
<li>Friend Like Me(End Title) - Will Smith&#x2F;DJ Khaled</li>
<li>Prince Ali - Will Smith</li>
<li>少女的祈祷 - 杨千嬅</li>
<li>浪子回头 - 茄子蛋</li>
<li>年少有为 - 李荣浩</li>
</ul>
<h3 id="Movies"><a href="#Movies" class="headerlink" title="Movies"></a>Movies</h3><ul>
<li>Aladdin - 2019</li>
</ul>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>State/Effect 分层</title>
    <url>/2021/01/10/State-Effect-%E5%88%86%E5%B1%82/</url>
    <content><![CDATA[<h3 id="友好的-React-Hooks"><a href="#友好的-React-Hooks" class="headerlink" title="友好的 React Hooks"></a>友好的 React Hooks</h3><p>网络上对 react hooks 的评价负面大于正面，确实很容易写出性能有问题的代码，关键就在于：我们太喜欢用 useState 了。<br>在 vue-composition-api 中，reactivity 数据都有 wrapper，custom-vca 里不管产生多少个 reactivity 对象，不会直接产生 re-render。只有那些被 return 到外部跟 template 绑定的部分才会触发视图渲染。<br>而 react 的 reactivity 就是通过 re-render 实现的，useState 没有 wrapper，每次使用都会得到一个触发渲染的函数。在这种 reactivity 机制下，就需要特殊的方式编写 hooks —— State&#x2F;Effect 分层</p>
<p>假设有个 useHeight：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [ref, height] = <span class="title function_">useHeight</span>()</span><br></pre></td></tr></table></figure>

<p>高度变化时，被动 re-render，难以转换合并。大部分情况下，不提供 state，而提供 effect 可能会更好：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [height, setHeight] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> ref = <span class="title function_">useHeight</span>(<span class="function">(<span class="params">height: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="title function_">setHeight</span>(height)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>使用者在外部声明 state，然后在 callback 中按需 setState。使用者可以结合其他 state，做 dispatch 到 reducer 的一次整体更新，而不是被动 re-render。<br>根据 State&#x2F;Effect 分层理念，尝试着给出友好地 react hooks 公式：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> handler = <span class="title function_">useProducer</span>(consumer, options)</span><br></pre></td></tr></table></figure>

<p>producer 接收 consumer callback 作为参数，返回 handler 控制函数，用于绑定到事件或其他位置。</p>
<span id="more"></span>

<h3 id="React-实现-useHeight"><a href="#React-实现-useHeight" class="headerlink" title="React 实现 useHeight"></a>React 实现 useHeight</h3><p>给定一个 resizable 的 textarea，我们监听它的高度变化，并展示到文本里。同时给个 checkbox，用户决定是否继续监听。并且只监听一定范围内的尺寸变化。<br>代码实现按照 low-level -&gt; high-level</p>
<p>首先实现一个 useResizeObserver，对 dom api 的 low-level 适配：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; useCallback, useLayoutEffect, useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useDispatch = &lt;I <span class="keyword">extends</span> <span class="built_in">any</span>[], O&gt;(<span class="attr">f</span>: <span class="function">(<span class="params">...args: I</span>) =&gt;</span> O): <span class="keyword">typeof</span> f =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> dispatchRef = useRef&lt;<span class="keyword">typeof</span> f&gt;(f)</span><br><span class="line">  <span class="keyword">const</span> callback = useCallback&lt;<span class="keyword">typeof</span> f&gt;(<span class="function">(<span class="params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dispatchRef.<span class="title function_">current</span>(...args)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useLayoutEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    dispatchRef.<span class="property">current</span> = f</span><br><span class="line">  &#125;, [f])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> callback</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useResizeObserver = &lt;T <span class="keyword">extends</span> <span class="title class_">HTMLElement</span>&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  callback: (target: T) =&gt; <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;T | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> observerRef = useRef&lt;<span class="title class_">ResizeObserver</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line">  <span class="keyword">const</span> dispatch = <span class="title function_">useDispatch</span>(callback)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">trigger</span> = (<span class="params">elem: T | <span class="literal">null</span></span>) =&gt; &#123;</span><br><span class="line">    ref.<span class="property">current</span> = elem</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (observerRef.<span class="property">current</span>) &#123;</span><br><span class="line">      observerRef.<span class="property">current</span>.<span class="title function_">disconnect</span>()</span><br><span class="line">      observerRef.<span class="property">current</span> = <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!elem) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> observer = <span class="keyword">new</span> <span class="title class_">ResizeObserver</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">dispatch</span>(elem)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    observer.<span class="title function_">observe</span>(elem)</span><br><span class="line">    observerRef.<span class="property">current</span> = observer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">enable</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ref.<span class="property">current</span>) &#123;</span><br><span class="line">      observerRef.<span class="property">current</span>?.<span class="title function_">observe</span>(ref.<span class="property">current</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">disable</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (ref.<span class="property">current</span>) &#123;</span><br><span class="line">      observerRef.<span class="property">current</span>?.<span class="title function_">unobserve</span>(ref.<span class="property">current</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; trigger, enable, disable &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>useResizeObserver 不返回 state 出去，而是暴露一个 resize effect。然后再使用 useResizeObserver 实现 useHeight：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useHeight = &lt;T <span class="keyword">extends</span> <span class="title class_">HTMLElement</span>&gt;<span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">  callback: (height: <span class="built_in">number</span>) =&gt; <span class="built_in">any</span></span></span></span><br><span class="line"><span class="params"><span class="function"></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> heightRef = useRef&lt;<span class="built_in">number</span>&gt;(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> observer = useResizeObserver&lt;T&gt;(<span class="function">(<span class="params">target</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> height = target.<span class="property">offsetHeight</span></span><br><span class="line">    heightRef.<span class="property">current</span> = height</span><br><span class="line">    <span class="title function_">callback</span>(height)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCurrentHeight</span> = (<span class="params"></span>) =&gt; heightRef.<span class="property">current</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; ...observer, getCurrentHeight &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>同样的思路还能实现其他监听。<br>最后在页面中使用：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [height, setHeight] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> [checked, setChecked] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handler</span> = (<span class="params">event: React.ChangeEvent&lt;HTMLInputElement&gt;</span>) =&gt; &#123;</span><br><span class="line">    <span class="title function_">setChecked</span>(event.<span class="property">target</span>.<span class="property">checked</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> observer =</span><br><span class="line">    useHeight &lt;</span><br><span class="line">    <span class="title class_">HTMLTextAreaElement</span> &gt;</span><br><span class="line">    (<span class="function">(<span class="params">currentHeight</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (currentHeight &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (currentHeight !== <span class="number">300</span>) &#123;</span><br><span class="line">          <span class="title function_">setHeight</span>(<span class="number">300</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">setHeight</span>(currentHeight)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">      observer.<span class="title function_">enable</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      observer.<span class="property">disable</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, [checked, observer])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ref</span>=<span class="string">&#123;observer.trigger&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>height is &#123;height&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbos&quot;</span> <span class="attr">checked</span>=<span class="string">&#123;checked&#125;</span> <span class="attr">onChange</span>=<span class="string">&#123;handler&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>Stream Output Demo in Javascript</title>
    <url>/2025/02/19/Stream-Output-Demo-in-Javascript/</url>
    <content><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>I’ve recorded an MP4 demo to showcase the results. In the video, you’ll see the Markdown content being displayed<br>character by character, with dynamic rendering and automatic scrolling.</p>
<h2 id="Demo-MP4"><a href="#Demo-MP4" class="headerlink" title="Demo MP4"></a>Demo MP4</h2><video controls width="600">
  <source src="https://code-example-1255795341.cos.ap-singapore.myqcloud.com/stream-output-demo.mp4" type="video/mp4">
  Your browser does not support the video tag.
</video>

<p>In this article, I’ll walk you through a simple yet powerful demo of implementing <strong>stream output</strong> in JavaScript. This<br>demo<br>mimics the behavior of ChatGPT-like applications, where responses are displayed in a <strong>streaming fashion</strong>, and the<br>content<br>is dynamically rendered as <strong>Markdown</strong>. The best part? It’s incredibly simple to implement, and I’ll provide the full<br>source code and an MP4 demo to showcase the results.</p>
<span id="more"></span>

<h1 id="What-is-Stream-Output"><a href="#What-is-Stream-Output" class="headerlink" title="What is Stream Output?"></a>What is Stream Output?</h1><p>Stream output is a technique where data is displayed incrementally, rather than all at once. This is particularly useful<br>for applications like chatbots, where users expect to see responses appear in real-time, character by character or word<br>by word. In this demo, we’ll simulate this behavior using JavaScript and a local mock backend.</p>
<h1 id="Key-Features-of-the-Demo"><a href="#Key-Features-of-the-Demo" class="headerlink" title="Key Features of the Demo"></a>Key Features of the Demo</h1><ol>
<li>Streaming Output: Responses are displayed incrementally, simulating a real-time experience.</li>
<li>Markdown Rendering: The content is formatted as Markdown and dynamically rendered using the marked.js library.</li>
<li>Local Mock Backend: No need for a real server—we’ll simulate the streamed data locally.</li>
<li>Simple Code: The implementation is straightforward and easy to understand.</li>
</ol>
<h1 id="Full-Source-Code"><a href="#Full-Source-Code" class="headerlink" title="Full Source Code"></a>Full Source Code</h1><p>You can find the full source code for this demo below:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/marked/marked.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">id</span>=<span class="string">&quot;chat-output&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">&quot;border: 1px solid #ccc; padding: 10px; height: 300px; overflow-y: auto;&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;chat-input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;chat-input&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;simulateStreamResponse()&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> mockResponse = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"># Hello Edward，</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">This is a **stream output** example.</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">- Support Markdown format.</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">- Support dynamic scrolling to latest content.</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">- Soft scroll to latest content.</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">**Code Example**</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">\`\`\`javascript</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">const showMem = function () &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  const mem = process.memoryUsage()</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  const format = function (bytes) &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    return (bytes / 1024 / 1024).toFixed(2) + &#x27;MB&#x27;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  &#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  console.log(</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    \`total:\$&#123;format(mem.heapTotal)&#125;, used: \$&#123;format(</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        mem.heapUsed,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">    )&#125;, rss: \$&#123;format(mem.rss)&#125;\`,</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  )</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  console.log(&#x27;-----------------------&#x27;)</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">const useMem = function () &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  const size = 20 * 1024 * 1024 // 20MB</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  const arr = new Buffer(size).fill(0)</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  return arr</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">const total = []</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">for (let i = 0; i &lt; 15; i++) &#123;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  showMem()</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">  total.push(useMem())</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">&#125;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript"></span></span></span><br><span class="line"><span class="string"><span class="language-javascript">showMem()</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">\`\`\`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">`</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">simulateStreamResponse</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> chatOutput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;chat-output&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> index = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> buffer = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">const</span> interval = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (index &gt;= mockResponse.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="built_in">clearInterval</span>(interval)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        buffer += mockResponse[index]</span></span><br><span class="line"><span class="language-javascript">        index++</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        chatOutput.<span class="property">innerHTML</span> = marked.<span class="title function_">parse</span>(buffer)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        chatOutput.<span class="property">scrollTop</span> = chatOutput.<span class="property">scrollHeight</span></span></span><br><span class="line"><span class="language-javascript">      &#125;, <span class="number">50</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Symbol</title>
    <url>/2018/08/17/Symbol/</url>
    <content><![CDATA[<p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。<br>Symbol 值通过 Symbol 函数生成，也就是说，对象的属性名现在可以有两种类型：一种是字符串，另一种就是 Symbol 类型。只要属性名属于 Symbol 类型，就是独一无二的，可以保证不会与其他属性名冲突。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">typeof</span> s <span class="comment">//symbol</span></span><br></pre></td></tr></table></figure>

<p>Symbol 函数可以接受一个字符串作为参数，表示对 Symbol 实例的描述，主要是为了在 console 显示。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;str&quot;</span>)</span><br><span class="line">s.<span class="title function_">toString</span>() <span class="comment">//&#x27;Symbol(str)&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果 Symbol 的参数是一个对象，就会调用该对象的 toString 方法，再生成 Symbol 值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> s = <span class="title class_">Symbol</span>(obj)</span><br><span class="line">s.<span class="title function_">toString</span>() <span class="comment">//&#x27;Symbol(test)&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>Symbol 函数只表示对当前 Symbol 值的描述，因此相同的 Symbol 函数的返回值是不相等的</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line">s1 === s2 <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h3><p>Symbol 值可以作为标识符用于对象的属性名，保证不会出现同名的属性，还能防止某一个键被不小心覆盖。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> symbol = <span class="title class_">Symbol</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法一</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line">a[symbol] = <span class="string">&quot;test&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//写法二</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [symbol]: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写法三</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(a, symbol, &#123; <span class="attr">value</span>: <span class="string">&quot;test&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>实例：消除代码中的字符串</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape, options</span>) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//转变后</span></span><br><span class="line"><span class="keyword">const</span> shaptType = &#123;</span><br><span class="line"><span class="attr">triangle</span>: <span class="title class_">Symbol</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getArea</span>(<span class="params">shape, options</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">switch</span> (shape) &#123;</span><br><span class="line"><span class="keyword">case</span> shaptType.<span class="property">triangle</span>:</span><br><span class="line">area = <span class="number">0.5</span> _ options.<span class="property">width</span> _ options.<span class="property">height</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h3><p>Symbol 属性不会出现在 for…in、for…of 循环中，也不会被 Object.keys()、Object.getOwnPropertyName()返回。有一个 Object.getOwnPropertySymbols 方法可以获取指定对象的所有 Symbol 属性。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="title class_">Symbol</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> b = <span class="title class_">Symbol</span>(<span class="string">&quot;world&quot;</span>)</span><br><span class="line">obj[a] = <span class="string">&quot;a&quot;</span></span><br><span class="line">obj[b] = <span class="string">&quot;b&quot;</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj) <span class="comment">//[Symbol(hello), Symbol(world)]</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol-for-、Symbol-keyFor"><a href="#Symbol-for-、Symbol-keyFor" class="headerlink" title="Symbol.for()、Symbol.keyFor()"></a>Symbol.for()、Symbol.keyFor()</h3><p>Symbol.for 接受一个字符串作为参数，然后搜索有没有以该参数作为名称的 Symbol 值，如果有，就返回这个 Symbol 值，否则就新建一个以该字符串为名称的 Symbol 值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> str2 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">str1 === str2 <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>Symbol.keyFor 方法返回一个已登记的 Symbol 类型值的 key：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s1) <span class="comment">//&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s2) <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p><strong>Symbol.for 为 Symbol 登记的名字是全局环境的，可以在不同的 iframe 或 serviceWorker 中取到同一个值</strong></p>
<h3 id="内置的-Symbol-值"><a href="#内置的-Symbol-值" class="headerlink" title="内置的 Symbol 值"></a>内置的 Symbol 值</h3><ul>
<li><p>Symbol.hasInstance<br>foo instanceof Foo 实际在内部调用的是 Foo[Symbol.hasInstance](foo)：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span> &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](foo) &#123;</span><br><span class="line">    <span class="keyword">return</span> foo <span class="keyword">instanceof</span> <span class="title class_">Array</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="keyword">new</span> <span class="title class_">MyClass</span>() <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Even</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](obj) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Number</span>(obj) % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Even</span> <span class="comment">//false</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">instanceof</span> <span class="title class_">Even</span> <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.isConcatSpreadable<br>等于一个布尔值，表示该对象使用 Array.prototype.concat()时是否可以展开：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(arr1, <span class="string">&quot;c&quot;</span>) <span class="comment">//[1, 2, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line">arr1[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>]</span><br><span class="line">arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>].<span class="title function_">concat</span>(arr2, <span class="string">&quot;c&quot;</span>) <span class="comment">//[1, 2, [&#x27;a&#x27;, &#x27;b&#x27;], &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure></li>
</ul>
<p>类似数组的对象也可以展开，默认值为 false，必须手动打开：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">length</span>: <span class="number">2</span>, <span class="number">0</span>: <span class="string">&quot;c&quot;</span>, <span class="number">1</span>: <span class="string">&quot;d&quot;</span> &#125;</span><br><span class="line">;[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>].<span class="title function_">concat</span>(obj) <span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, obj]</span></span><br><span class="line">obj[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">true</span></span><br><span class="line">;[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>].<span class="title function_">concat</span>(obj) <span class="comment">//[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>对一个类而言，Symbol.isConcatSprealable 属性必须写成实例属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">args</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(args)</span><br><span class="line">    <span class="variable language_">this</span>[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>Symbol.species<br>对象的 Symbol.species 属性指向当前对象的构造函数，创造实例时会默认调用这个方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">myClass</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="title function_">myClass</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> mapped = a.<span class="title function_">map</span>(<span class="function">(<span class="params">x</span>) =&gt;</span> x * x)</span><br><span class="line">a <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">//true</span></span><br><span class="line">mapped <span class="keyword">instanceof</span> <span class="title class_">Array</span> <span class="comment">//true</span></span><br><span class="line">a <span class="keyword">instanceof</span> myClass <span class="comment">//true</span></span><br><span class="line">mapped <span class="keyword">instanceof</span> myClass <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//默认值等同于下面的写法</span></span><br><span class="line"><span class="comment">// static get [Symbol.species]() &#123; return this; &#125;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.match<br>对象的 Symbol.match 属性指向一个函数，当执行 str.match(myObject)时，如果该属性存在，会调用它的返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">match</span>(regexp)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">regexp[<span class="title class_">Symbol</span>.<span class="property">match</span>](<span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myMatcher</span> &#123;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">match</span>](string) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>.<span class="title function_">indexOf</span>(string)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">e.<span class="title function_">match</span>(<span class="keyword">new</span> <span class="title function_">myMatcher</span>()) <span class="comment">//1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.replace<br>对象的 Symbol.replace 属性指向一个方法，当对象被 String.prototype.replace 方法调用时会返回该方法的返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">replace</span>(searchValue, replaceValue)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">searchValue[<span class="title class_">Symbol</span>.<span class="property">replace</span>](<span class="variable language_">this</span>, replaceValue)</span><br></pre></td></tr></table></figure>
<p><strong>Symbol.replace 方法会收到两个参数，一个是 replace 方法正在作用的对象，第二个是替换后的值：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> x = &#123;&#125;</span><br><span class="line">x[<span class="title class_">Symbol</span>.<span class="property">replace</span>] = <span class="function">(<span class="params">...s</span>) =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="string">&quot;hello&quot;</span>.<span class="title function_">replace</span>(x, <span class="string">&quot;world&quot;</span>) <span class="comment">//[&#x27;hello&#x27;, &#x27;world&#x27;]</span></span><br></pre></td></tr></table></figure></li>
<li><p>Symbol.search<br>对象的 Symbol.search 属性指向一个方法，当对象被 String.prototype.search 方法调用时会返回该方法的返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">search</span>(regexp)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">regexp[<span class="title class_">Symbol</span>.<span class="property">search</span>](<span class="variable language_">this</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">mySearch</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">search</span>](string) &#123;</span><br><span class="line">    <span class="keyword">return</span> string.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">value</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;foobar&quot;</span>.<span class="title function_">search</span>(<span class="keyword">new</span> <span class="title function_">mySearch</span>(<span class="string">&quot;foo&quot;</span>)) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.split<br>对象的 Symbol.split 属性指向一个方法，当对象被 String.prototype.split 方法调用时会返回该方法的返回值：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">split</span>(separator, limit)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">separator[<span class="title class_">Symbol</span>.<span class="property">split</span>](<span class="variable language_">this</span>, limit)</span><br></pre></td></tr></table></figure>
<p>重定义 split 方法的行为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">mySplit</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">value</span> = value;</span><br><span class="line">  &#125;</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">split</span>](string) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = string.<span class="title function_">indexOf</span>(<span class="variable language_">this</span>.<span class="property">value</span>);</span><br><span class="line">    <span class="keyword">if</span> (index === -<span class="number">1</span>) <span class="keyword">return</span> string;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      string.<span class="title function_">substr</span>(<span class="number">0</span>, index),</span><br><span class="line">      string.<span class="title function_">substr</span>(index + <span class="variable language_">this</span>.<span class="property">value</span>.<span class="property">length</span>);</span><br><span class="line">    ];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.<span class="title function_">split</span>(<span class="keyword">new</span> <span class="title function_">mySplit</span>(<span class="string">&#x27;foo&#x27;</span>)); <span class="comment">//[&#x27;&#x27;, &#x27;bar&#x27;]</span></span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.<span class="title function_">split</span>(<span class="keyword">new</span> <span class="title function_">mySplit</span>(<span class="string">&#x27;bar&#x27;</span>)); <span class="comment">//[&#x27;foo&#x27;, &#x27;&#x27;]</span></span><br><span class="line"><span class="string">&#x27;foobar&#x27;</span>.<span class="title function_">split</span>(<span class="keyword">new</span> <span class="title function_">mySplit</span>(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">//&#x27;foobar&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>Symbol.iterator<br>对象的 Symbol.iterator 属性指向该对象的默认遍历器方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myIterable = &#123;&#125;</span><br><span class="line">myIterable[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] = <span class="keyword">function</span>* () &#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line">;[...myIterable] <span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Collection</span> &#123;</span><br><span class="line">  *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="variable language_">this</span>[i] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> <span class="variable language_">this</span>[i]</span><br><span class="line">      i++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myCollection = <span class="keyword">new</span> <span class="title class_">Collection</span>()</span><br><span class="line">myCollection[<span class="number">0</span>] = <span class="number">1</span></span><br><span class="line">myCollection[<span class="number">1</span>] = <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> myCollection) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">//1, 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Symbol.toPrimitive</p>
</li>
<li><p>Symbol.toStringTag</p>
</li>
<li><p>Symbol.unscopables</p>
</li>
</ul>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>The composition</title>
    <url>/2019/03/28/The-Composition/</url>
    <content><![CDATA[<h3 id="Function-Composition"><a href="#Function-Composition" class="headerlink" title="Function Composition"></a>Function Composition</h3><p><em><code>In computer science, function composition is an act or mechanism to combine simple functions to build more complicated ones. Like the usual composition of functions in mathematics, the result of each function is passed as the argument of the next, and the result of the last one is the result of the whole.  -- Wikipedia</code></em></p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">compose</span> = (<span class="params">f, g</span>) =&gt; <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="title function_">f</span>(<span class="title function_">g</span>(x))</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">head</span> = (<span class="params">x</span>) =&gt; x[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> reverse = <span class="title function_">reduce</span>(<span class="function">(<span class="params">a, x</span>) =&gt;</span> [x].<span class="title function_">concat</span>(a), [])</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> last = <span class="title function_">compose</span>(head, reverse)</span><br><span class="line"><span class="title function_">last</span>([<span class="string">&quot;first&quot;</span>, <span class="string">&quot;second&quot;</span>, <span class="string">&quot;last&quot;</span>]) <span class="comment">// &#x27;last&#x27;</span></span><br></pre></td></tr></table></figure>

<p>In the definition of compose, g will be executed before f, thus creating a right-to-left data stream. This is much more readable than nesting a bunch of function calls.</p>
<h3 id="Associativity"><a href="#Associativity" class="headerlink" title="Associativity"></a>Associativity</h3><p><em><code>Like many other functional programming concepts, associativity is derived from math.It is an expression in which the order of evaluation does not affect the end result provided the sequence of the operands does not get changed. -- JOSEPH REX</code></em></p>
<p>Example:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> + (<span class="number">3</span> + <span class="number">4</span>) === <span class="number">2</span> + <span class="number">3</span> + <span class="number">4</span> <span class="comment">// true</span></span><br><span class="line"><span class="number">2</span> * (<span class="number">3</span> * <span class="number">4</span>) === <span class="number">2</span> * <span class="number">3</span> * <span class="number">4</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Because of the grouping of calls to compose is not important, so the result is the same. This also gives us the ability to write a variadic compose.<br>Like this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> last = <span class="title function_">compose</span>(head, reverse)</span><br><span class="line"><span class="title function_">last</span>([<span class="string">&quot;first&quot;</span>, <span class="string">&quot;second&quot;</span>, <span class="string">&quot;last&quot;</span>]) <span class="comment">// &#x27;last&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> upperLast = <span class="title function_">compose</span>(head, reverse, toUppercase)</span><br><span class="line"><span class="title function_">upperLast</span>([<span class="string">&quot;first&quot;</span>, <span class="string">&quot;second&quot;</span>, <span class="string">&quot;last&quot;</span>]) <span class="comment">// &#x27;LAST&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mediaUrl = _.<span class="title function_">compose</span>(_.<span class="title function_">prop</span>(<span class="string">&quot;m&quot;</span>), _.<span class="title function_">prop</span>(<span class="string">&quot;media&quot;</span>))</span><br><span class="line"><span class="comment">// var images = _.compose(_.map(img), _.map(mediaUrl), _.prop(&#x27;items&#x27;));</span></span><br><span class="line"><span class="comment">// use the associativity</span></span><br><span class="line"><span class="keyword">var</span> images = _.<span class="title function_">compose</span>(_.<span class="title function_">map</span>(_.<span class="title function_">compose</span>(img, mediaUrl)), _.<span class="title function_">prop</span>(<span class="string">&quot;items&quot;</span>))</span><br></pre></td></tr></table></figure>

<p>There is no standard answer on how to composition, just make it more reusable.</p>
<span id="more"></span>

<h3 id="Tacit-programming"><a href="#Tacit-programming" class="headerlink" title="Tacit programming"></a>Tacit programming</h3><p><em><code>Tacit programming, also called point-free style, is a programming paradigm in which function definitions do not identify the arguments (or &quot;points&quot;) on which they operate. -- Wikipedia</code></em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">head</span> = (<span class="params">x</span>) =&gt; x[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">toUppercase</span> = (<span class="params">x</span>) =&gt; x.<span class="title function_">toUpperCase</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// not pointfree</span></span><br><span class="line"><span class="comment">// it used the name</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">foo1</span> = (<span class="params">name</span>) =&gt; name.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>).<span class="title function_">map</span>(<span class="title function_">compose</span>(toUppercase, head)).<span class="title function_">join</span>(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="title function_">foo1</span>(<span class="string">&quot;Edward Wang&quot;</span>) <span class="comment">// E.W</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// pointfree</span></span><br><span class="line"><span class="keyword">var</span> foo2 = <span class="title function_">compose</span>(<span class="title function_">join</span>(<span class="string">&quot;.&quot;</span>), <span class="title function_">map</span>(<span class="title function_">compose</span>(toUppercase, head)), <span class="title function_">split</span>(<span class="string">&quot; &quot;</span>))</span><br><span class="line"><span class="title function_">foo2</span>(<span class="string">&quot;Edward Wang&quot;</span>) <span class="comment">// E.W</span></span><br></pre></td></tr></table></figure>

<h3 id="some-practice"><a href="#some-practice" class="headerlink" title="some practice"></a>some practice</h3><p>Use compose in <code>rambda</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// test data</span></span><br><span class="line"><span class="keyword">var</span> dragons = [</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;thiny dragon&quot;</span>, <span class="attr">height</span>: <span class="number">600</span>, <span class="attr">price</span>: <span class="number">700</span>, <span class="attr">sold</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;tall dragon&quot;</span>, <span class="attr">height</span>: <span class="number">6600</span>, <span class="attr">price</span>: <span class="number">1700</span>, <span class="attr">sold</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;dangerous dragon&quot;</span>, <span class="attr">height</span>: <span class="number">5200</span>, <span class="attr">price</span>: <span class="number">700</span>, <span class="attr">sold</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;small dragon&quot;</span>, <span class="attr">height</span>: <span class="number">200</span>, <span class="attr">price</span>: <span class="number">1300</span>, <span class="attr">sold</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;fat dragon&quot;</span>, <span class="attr">height</span>: <span class="number">400</span>, <span class="attr">price</span>: <span class="number">900</span>, <span class="attr">sold</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">name</span>: <span class="string">&quot;gold dragon&quot;</span>, <span class="attr">height</span>: <span class="number">500</span>, <span class="attr">price</span>: <span class="number">2000</span>, <span class="attr">sold</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. rewrite the following with the compose. Tip: the prop is curry function.</span></span><br><span class="line"><span class="comment">// var isLastSold = xs =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   var x = $.last(xs);</span></span><br><span class="line"><span class="comment">//   return $.prop(&#x27;sold&#x27;, x);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> isLastSold = $.<span class="title function_">compose</span>($.<span class="title function_">prop</span>(<span class="string">&quot;sold&quot;</span>), $.last)</span><br><span class="line"><span class="title function_">isLastSold</span>(dragons) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. use the compose, prop and head to get the name of first dragon.</span></span><br><span class="line"><span class="keyword">var</span> nameOfFirst = $.<span class="title function_">compose</span>($.<span class="title function_">prop</span>(<span class="string">&quot;name&quot;</span>), $.head)</span><br><span class="line"><span class="title function_">nameOfFirst</span>(dragons) <span class="comment">// &#x27;thiny dragon&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. refactoring the averagePrice with the average to make it composition.</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">_average</span> = (<span class="params">xs</span>) =&gt; <span class="title function_">reduce</span>(add, <span class="number">0</span>, xs) / xs.<span class="property">length</span></span><br><span class="line"><span class="comment">// var averagePrice = xs =&gt; &#123;</span></span><br><span class="line"><span class="comment">//   var p = map(x =&gt; x.price, xs);</span></span><br><span class="line"><span class="comment">//   return _average(p);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> averagePrice = $.<span class="title function_">compose</span>(_average, <span class="title function_">map</span>($.<span class="title function_">prop</span>(<span class="string">&quot;price&quot;</span>)))</span><br><span class="line"><span class="title function_">averagePrice</span>(dragons) <span class="comment">// 1216.6666666666667</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. write a function that =&gt; &#x27;gold dragon&#x27; =&gt; &#x27;GOLD_DRAGON&#x27;</span></span><br><span class="line"><span class="keyword">var</span> replaceSpace = <span class="title function_">replace</span>(<span class="regexp">/\W+/g</span>, <span class="string">&quot;_&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> changeName = $.<span class="title function_">map</span>($.<span class="title function_">compose</span>(replaceSpace, toUppercase, $.<span class="title function_">prop</span>(<span class="string">&quot;name&quot;</span>)))</span><br><span class="line"><span class="title function_">changeName</span>(dragons) <span class="comment">//[ &#x27;THINY_DRAGON&#x27;, &#x27;TALL_DRAGON&#x27;, &#x27;DANGEROUS_DRAGON&#x27;, &#x27;SMALL_DRAGON&#x27;, &#x27;FAT_DRAGON&#x27;, &#x27;GOLD_DRAGON&#x27; ]</span></span><br></pre></td></tr></table></figure>

<h3 id="Test-Application"><a href="#Test-Application" class="headerlink" title="Test Application"></a>Test Application</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">requirejs.<span class="title function_">config</span>(&#123;</span><br><span class="line">  <span class="attr">paths</span>: &#123;</span><br><span class="line">    <span class="attr">ramda</span>: <span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/ramda/0.13.0/ramda.min&quot;</span>,</span><br><span class="line">    <span class="attr">jquery</span>: <span class="string">&quot;https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>([<span class="string">&quot;ramda&quot;</span>, <span class="string">&quot;jquery&quot;</span>], <span class="function">(<span class="params">_, $</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">var</span> log = _.<span class="title function_">curry</span>(<span class="function">(<span class="params">tag, x</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(tag, x)</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">url</span> = (<span class="params">term</span>) =&gt;</span><br><span class="line">    <span class="string">&quot;https://api.flickr.com/services/feeds/photos_public.gne?tags=&quot;</span> +</span><br><span class="line">    term +</span><br><span class="line">    <span class="string">&quot;&amp;format=json&amp;jsoncallback=?&quot;</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">img</span> = (<span class="params">url</span>) =&gt; $(<span class="string">&quot;&lt;img /&gt;&quot;</span>, &#123; <span class="attr">src</span>: url &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> setHtml = _.<span class="title function_">curry</span>(<span class="function">(<span class="params">tag, html</span>) =&gt;</span> $(tag).<span class="title function_">html</span>(html))</span><br><span class="line">  <span class="keyword">var</span> getJSON = _.<span class="title function_">curry</span>(<span class="function">(<span class="params">callback, url</span>) =&gt;</span> $.<span class="title function_">getJSON</span>(url, callback))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> mediaUrl = _.<span class="title function_">compose</span>(_.<span class="title function_">prop</span>(<span class="string">&quot;m&quot;</span>), _.<span class="title function_">prop</span>(<span class="string">&quot;media&quot;</span>))</span><br><span class="line">  <span class="keyword">var</span> mediaToImg = _.<span class="title function_">compose</span>(img, mediaUrl)</span><br><span class="line">  <span class="keyword">var</span> images = _.<span class="title function_">compose</span>(_.<span class="title function_">map</span>(mediaToImg), _.<span class="title function_">prop</span>(<span class="string">&quot;items&quot;</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> renderImages = _.<span class="title function_">compose</span>(<span class="title function_">setHtml</span>(<span class="string">&quot;body&quot;</span>), images)</span><br><span class="line">  <span class="keyword">var</span> app = _.<span class="title function_">compose</span>(<span class="title function_">getJSON</span>(renderImages), url)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">app</span>(<span class="string">&quot;car&quot;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>The Currying</title>
    <url>/2019/03/27/The-currying/</url>
    <content><![CDATA[<h3 id="What-is-currying"><a href="#What-is-currying" class="headerlink" title="What is currying"></a>What is currying</h3><p><em><code>Currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument. -- Wikipedia</code></em><br>It mean this:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">x</span>) =&gt; <span class="function">(<span class="params">y</span>) =&gt;</span> x + y</span><br><span class="line"><span class="keyword">let</span> addOne = <span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">let</span> addTwo = <span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line"><span class="title function_">addOne</span>(<span class="number">11</span>) <span class="comment">// 12</span></span><br><span class="line"><span class="title function_">addTwo</span>(<span class="number">11</span>) <span class="comment">// 13</span></span><br></pre></td></tr></table></figure>

<p>In order to define functions more easily, we need the <code>loadsh</code>, it will help us to currying the function.</p>
<h3 id="make-some-using-thing"><a href="#make-some-using-thing" class="headerlink" title="make some using thing"></a>make some using thing</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _ = <span class="built_in">require</span>(<span class="string">&quot;loadsh&quot;</span>).<span class="property">curry</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> match = <span class="title function_">_</span>(<span class="function">(<span class="params">regex, str</span>) =&gt;</span> str.<span class="title function_">match</span>(regex))</span><br><span class="line"><span class="keyword">var</span> replace = <span class="title function_">_</span>(<span class="function">(<span class="params">regex, replacement, str</span>) =&gt;</span> str.<span class="title function_">replace</span>(regex, replacement))</span><br><span class="line"><span class="keyword">var</span> filter = <span class="title function_">_</span>(<span class="function">(<span class="params">f, array</span>) =&gt;</span> array.<span class="title function_">filter</span>(f))</span><br><span class="line"><span class="title function_">match</span>(<span class="regexp">/\s+/g</span>, <span class="string">&quot;test Message&quot;</span>) <span class="comment">// [&#x27; &#x27;]</span></span><br><span class="line"><span class="title function_">match</span>(<span class="regexp">/\s+/g</span>)(<span class="string">&quot;test Message&quot;</span>) <span class="comment">// [&#x27; &#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> hasSpace = <span class="title function_">match</span>(<span class="regexp">/\s+/g</span>)</span><br><span class="line"><span class="title function_">hasSpace</span>(<span class="string">&quot;testMessage&quot;</span>) <span class="comment">// null</span></span><br><span class="line"><span class="title function_">filter</span>(hasSpace, [<span class="string">&quot;testMessage1&quot;</span>, <span class="string">&quot;test Message2&quot;</span>, <span class="string">&quot;test Message 3&quot;</span>]) <span class="comment">// [&#x27;test Message2&#x27;, &#x27;test Message 3&#x27;]</span></span><br><span class="line"><span class="keyword">var</span> noA = <span class="title function_">replace</span>(<span class="regexp">/[Aa]+/g</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line"><span class="title function_">noA</span>(<span class="string">&quot;aaaabbbAAAc&quot;</span>) <span class="comment">// &#x27;*bbb*c&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="some-practice"><a href="#some-practice" class="headerlink" title="some practice"></a>some practice</h3><p>Use curry in <code>rambda</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// support functions</span></span><br><span class="line"><span class="keyword">let</span> curry = <span class="built_in">require</span>(<span class="string">&quot;rambda&quot;</span>).<span class="property">curry</span></span><br><span class="line"><span class="keyword">let</span> compose = <span class="built_in">require</span>(<span class="string">&quot;rambda&quot;</span>).<span class="property">compose</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="title function_">curry</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b)</span><br><span class="line"><span class="keyword">let</span> match = <span class="title function_">curry</span>(<span class="function">(<span class="params">regex, str</span>) =&gt;</span> str.<span class="title function_">match</span>(regex))</span><br><span class="line"><span class="keyword">let</span> replace = <span class="title function_">curry</span>(<span class="function">(<span class="params">regex, replacement, str</span>) =&gt;</span></span><br><span class="line">  str.<span class="title function_">replace</span>(regex, replacement)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">let</span> filter = <span class="title function_">curry</span>(<span class="function">(<span class="params">f, arr</span>) =&gt;</span> arr.<span class="title function_">filter</span>(f))</span><br><span class="line"><span class="keyword">let</span> map = <span class="title function_">curry</span>(<span class="function">(<span class="params">f, arr</span>) =&gt;</span> arr.<span class="title function_">map</span>(f))</span><br><span class="line"><span class="keyword">let</span> split = <span class="title function_">curry</span>(<span class="function">(<span class="params">symbol, str</span>) =&gt;</span> str.<span class="title function_">split</span>(symbol))</span><br><span class="line"><span class="keyword">let</span> reduce = <span class="title function_">curry</span>(<span class="function">(<span class="params">f, arr, x</span>) =&gt;</span> x.<span class="title function_">reduce</span>(f, arr))</span><br><span class="line"><span class="keyword">let</span> join = <span class="title function_">curry</span>(<span class="function">(<span class="params">symbol, arr</span>) =&gt;</span> arr.<span class="title function_">join</span>(symbol))</span><br><span class="line"><span class="keyword">let</span> toUppercase = <span class="title function_">curry</span>(<span class="function">(<span class="params">str</span>) =&gt;</span> str.<span class="title function_">toUpperCase</span>())</span><br><span class="line"><span class="keyword">let</span> toLowercase = <span class="title function_">curry</span>(<span class="function">(<span class="params">str</span>) =&gt;</span> str.<span class="title function_">toLowerCase</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. remove all the arguments</span></span><br><span class="line"><span class="comment">// var words = str =&gt; split(&#x27; &#x27;, str);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> words = <span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line"><span class="title function_">words</span>(<span class="string">&quot;hello world !&quot;</span>) <span class="comment">// [&#x27;hello&#x27;, &#x27;world&#x27;, &#x27;!&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. create a new words function with map to enable mainpulation of string array</span></span><br><span class="line"><span class="keyword">var</span> theWords = <span class="title function_">map</span>(words)</span><br><span class="line"><span class="title function_">theWords</span>([<span class="string">&quot;first message&quot;</span>, <span class="string">&quot;seconde message&quot;</span>]) <span class="comment">// [[&#x27;first&#x27;, &#x27;message&#x27;], [&#x27;second&#x27;, &#x27;message&#x27;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. remove all the arguments</span></span><br><span class="line"><span class="comment">// var filterQString = xs =&gt; filter(x =&gt; match(/q/i, x), xs);</span></span><br><span class="line"><span class="keyword">var</span> filterAString = <span class="title function_">filter</span>(<span class="title function_">match</span>(<span class="regexp">/a/i</span>))</span><br><span class="line"><span class="title function_">filterAString</span>([<span class="string">&quot;quick&quot;</span>, <span class="string">&quot;queue&quot;</span>, <span class="string">&quot;apple&quot;</span>, <span class="string">&quot;two&quot;</span>]) <span class="comment">// [&#x27;apple&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Refactor max with the help function _max to make it a curry function</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">_max</span> = (<span class="params">a, b</span>) =&gt; (a &gt;= b ? a : b)</span><br><span class="line"><span class="comment">// var max = xs =&gt; reduce((account, x) =&gt; _max(account, x), -Infinity, xs);</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="title function_">reduce</span>(_max, -<span class="title class_">Infinity</span>)</span><br><span class="line"><span class="title function_">max</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure>

<h3 id="Currying-add"><a href="#Currying-add" class="headerlink" title="Currying add"></a>Currying <code>add</code></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = x</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    sum += y</span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  f.<span class="property">end</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">0</span>)(<span class="number">1</span>)(<span class="number">2</span>).<span class="title function_">end</span>())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>TikTok svg</title>
    <url>/2021/01/08/TikTok-svg/</url>
    <content><![CDATA[<p><img src="/svgs/tik-tok.svg" alt="TikTok"></p>
]]></content>
      <tags>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>Telegram批量邀请成员进组</title>
    <url>/2019/12/25/Telegram%E6%89%B9%E9%87%8F%E9%82%80%E8%AF%B7%E6%88%90%E5%91%98%E8%BF%9B%E7%BB%84/</url>
    <content><![CDATA[<h3 id="TG（目前）最大的需求–宣传"><a href="#TG（目前）最大的需求–宣传" class="headerlink" title="TG（目前）最大的需求–宣传"></a>TG（目前）最大的需求–宣传</h3><p>前几天在 TG，有个人问我如何实现一个 TG 批量拉人入某个 group。找了找资料发现真的可以实现。</p>
<p>测试了似乎单次最多只能邀请 30 人进组，并且一个人邀请太多人会被禁止单项邀请。<br><strong>TG 还能不进群，直接拉进去，直接获取某个群组的所有 member，太 BUG 了</strong></p>
<p>有类似想法的可以联系我，与我交流。</p>
]]></content>
      <tags>
        <tag>Telegram</tag>
      </tags>
  </entry>
  <entry>
    <title>Top Type &amp; Bottom Type in TypeScript</title>
    <url>/2025/03/11/Top-Type-Bottom-Type-in-TypeScript/</url>
    <content><![CDATA[<p>在 TypeScript 的类型系统中，<strong>Top Type（顶层类型）</strong> 和 <strong>Bottom Type（底层类型）</strong> 是两个非常重要的概念。它们分别代表了类型范围的“最顶层”和“最底层”，理解它们对于掌握 TypeScript 的类型系统至关重要。</p>
<span id="more"></span>

<h1 id="什么是-Top-Type？"><a href="#什么是-Top-Type？" class="headerlink" title="什么是 Top Type？"></a>什么是 Top Type？</h1><p>Top Type 是类型系统中<strong>最宽泛</strong>的类型，表示它可以包含任何其他类型。在 TypeScript 中，有两种主要的 Top Type：<code>any</code> 和 <code>unknown</code>。</p>
<h2 id="any"><a href="#any" class="headerlink" title="any"></a>any</h2><p>any 是 TypeScript 中最宽松的类型。它可以表示任意类型的值，使用 any 时，TypeScript 会<strong>关闭类型检查</strong>，这意味着你可以对 any 类型的变量进行任何操作，而不会触发类型错误。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">any</span></span><br><span class="line"></span><br><span class="line">value = <span class="number">42</span> <span class="comment">// 合法</span></span><br><span class="line">value = <span class="string">&quot;hello&quot;</span> <span class="comment">// 合法</span></span><br><span class="line">value = <span class="literal">true</span> <span class="comment">// 合法</span></span><br><span class="line">value = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="comment">// 合法</span></span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>灵活性高，但类型安全性低。</li>
<li>适合在需要动态类型或迁移旧代码时使用，但应尽量避免。</li>
</ul>
<h2 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h2><p>unknown 是 TypeScript 2.0 引入的类型，表示类型未知。与 any 不同，unknown 是<strong>类型安全</strong>的。在使用 unknown 类型的值之前，必须进行类型检查或类型断言。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: <span class="built_in">unknown</span></span><br><span class="line"></span><br><span class="line">value = <span class="number">42</span> <span class="comment">// 合法</span></span><br><span class="line">value = <span class="string">&quot;hello&quot;</span> <span class="comment">// 合法</span></span><br><span class="line">value = <span class="literal">true</span> <span class="comment">// 合法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toFixed</span>(<span class="number">2</span>)) <span class="comment">// 合法，已进行类型检查</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>类型安全，适合处理不确定类型。</li>
<li>需要显式的类型检查或断言。</li>
</ul>
<h1 id="什么是-Bottom-Type？"><a href="#什么是-Bottom-Type？" class="headerlink" title="什么是 Bottom Type？"></a>什么是 Bottom Type？</h1><p>Bottom Type 是类型系统中<strong>最具体</strong>的类型，表示它不包含任何值。在 TypeScript 中，<code>never</code> 是唯一的 Bottom Type。</p>
<h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>never 表示永远不会发生的值，通常用于以下场景：</p>
<ul>
<li>函数抛出异常：函数永远不会正常返回。</li>
<li>无限循环：函数永远不会结束。</li>
<li>类型收窄：在类型收窄后，某些分支不可能发生。</li>
</ul>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 函数抛出异常</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throwError</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 无限循环</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 类型收窄</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkType</span>(<span class="params">value: <span class="built_in">string</span> | <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;String:&quot;</span>, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> value === <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Number:&quot;</span>, value)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 这里的 value 类型是 never，因为前面的分支已经覆盖了所有可能</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">exhaustiveCheck</span>: <span class="built_in">never</span> = value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>表示不可能发生的值。</li>
<li>用于确保代码的完整性和安全性。</li>
</ul>
<h1 id="Top-Type-和-Bottom-Type-的关系"><a href="#Top-Type-和-Bottom-Type-的关系" class="headerlink" title="Top Type 和 Bottom Type 的关系"></a>Top Type 和 Bottom Type 的关系</h1><p>在 TypeScript 的类型层次结构中：</p>
<ul>
<li>Top Type 是所有类型的超集，可以包含任何值。<code>unknown</code> 和 <code>any</code> 是典型的 Top Type。</li>
<li>Bottom Type 是所有类型的子集，不包含任何值。<code>never</code> 是唯一的 Bottom Type。</li>
</ul>
<p>它们的关系可以用以下方式表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Top Type (any, unknown)</span><br><span class="line">   ↑</span><br><span class="line">   |</span><br><span class="line">   |</span><br><span class="line">   ↓</span><br><span class="line">Bottom Type (never)</span><br></pre></td></tr></table></figure>

<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><table>
<thead>
<tr>
<th align="left">类型</th>
<th align="left">描述</th>
<th align="left">特点</th>
<th align="left">使用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="left">any</td>
<td align="left">任意类型</td>
<td align="left">关闭类型检查</td>
<td align="left">动态类型,旧代码迁移</td>
</tr>
<tr>
<td align="left">unknown</td>
<td align="left">未知类型</td>
<td align="left">类型安全,需类型检查</td>
<td align="left">处理不确定类型</td>
</tr>
<tr>
<td align="left">never</td>
<td align="left">不可能发生的类型</td>
<td align="left">不包含任何值</td>
<td align="left">异常&#x2F;无限循环&#x2F;类型收窄</td>
</tr>
</tbody></table>
<p>通过理解 Top Type 和 Bottom Type，可以更好地掌握 TypeScript 的类型系统，并编写更安全、更健壮的代码。在实际开发中，尽量使用 unknown 替代 any，并善用 never 来确保代码的完整性和安全性。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Time Picker Pnl</title>
    <url>/2024/10/24/Time-Picker-Pnl/</url>
    <content><![CDATA[<h1 id="Time-Picker-Pnl-in-React-Native"><a href="#Time-Picker-Pnl-in-React-Native" class="headerlink" title="Time Picker Pnl in React Native"></a>Time Picker Pnl in React Native</h1><p><strong>Why i write this component?</strong><br>First, I found a lib called <code>@react-native community/picker</code> and wrote my code based on it. When I was done, it worked fine in ios, but when I turned on my android. Oh, my God, it’s not working. This component is <code>platform</code> based. It behaves differently on different platforms.</p>
<p>Then I found another library called <code>react-native-picker</code>, but it was too ugly and not customizable. My UI designer wouldn’t let me use this kind of thing, so I wrote my own component.</p>
<p><strong>Note: This component is not perfect, but it works fine in my work. If you have any suggestion or issue, please let me know. You can build your own component based on this code.</strong><br><strong>If this code help you, please follow me on Github. XD(am greedy)</strong></p>
<p>Requirements:</p>
<ul>
<li><code>react-native-modal</code>: pop up modal for time picker</li>
</ul>
<p><img src="https://images-1255795341.cos.ap-guangzhou.myqcloud.com/%E5%BD%95%E5%B1%8F2024-10-24%2016.35.06.gif" alt="Time Picker Pnl"></p>
<span id="more"></span>

<figure class="highlight tsx"><figcaption><span>TimePickerPnl.tsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Edward wang.huiyang<span class="doctag">@outlook</span>.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> Time Picker Component - Modal base</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AntQColors</span>,</span><br><span class="line">  <span class="title class_">AntQFontStyle</span>,</span><br><span class="line">  <span class="title class_">AntQSizes</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;@/componetsEx/DarkColorUtility&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getImgByName &#125; <span class="keyword">from</span> <span class="string">&quot;@/res/img&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; wp &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/index&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="variable constant_">LANAGER_STR</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@/utilsEx/UtilsEx&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123;</span><br><span class="line">  createRef,</span><br><span class="line">  forwardRef,</span><br><span class="line">  <span class="title class_">PureComponent</span>,</span><br><span class="line">  useImperativeHandle,</span><br><span class="line">  useMemo,</span><br><span class="line">  useRef,</span><br><span class="line">  useState,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">FlatListProps</span>, <span class="title class_">ViewStyle</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">FlatList</span>,</span><br><span class="line">  <span class="title class_">Image</span>,</span><br><span class="line">  <span class="title class_">Platform</span>,</span><br><span class="line">  <span class="title class_">Pressable</span>,</span><br><span class="line">  <span class="title class_">StyleSheet</span>,</span><br><span class="line">  <span class="title class_">Text</span>,</span><br><span class="line">  <span class="title class_">TouchableOpacity</span>,</span><br><span class="line">  <span class="title class_">View</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ReactNativeHapticFeedback</span> <span class="keyword">from</span> <span class="string">&quot;react-native-haptic-feedback&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LinearGradient</span> <span class="keyword">from</span> <span class="string">&quot;react-native-linear-gradient&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Modal</span> <span class="keyword">from</span> <span class="string">&quot;react-native-modal&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ inside part start ------</span></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ItemType</span> = &#123; <span class="attr">label</span>: <span class="built_in">string</span>; <span class="attr">value</span>: <span class="built_in">any</span> &#125;</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">RenderItemProps</span> = &#123;</span><br><span class="line">  <span class="attr">fontSize</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">fontColor</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">textAlign</span>: <span class="string">&quot;center&quot;</span> | <span class="string">&quot;auto&quot;</span> | <span class="string">&quot;left&quot;</span> | <span class="string">&quot;right&quot;</span> | <span class="string">&quot;justify&quot;</span></span><br><span class="line">  <span class="attr">lineHeight</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PickerProps</span> &#123;</span><br><span class="line">  <span class="attr">items</span>: <span class="title class_">ItemType</span>[]</span><br><span class="line">  <span class="attr">onChange</span>: <span class="function">(<span class="params">item: &#123; index: <span class="built_in">number</span>; item: ItemType &#125;</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">  initialSelectedIndex?: <span class="built_in">number</span></span><br><span class="line">  containerStyle?: <span class="title class_">ViewStyle</span></span><br><span class="line">  height?: <span class="built_in">number</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">  flatListProps?: <span class="title class_">Partial</span>&lt;<span class="title class_">FlatListProps</span>&lt;<span class="title class_">ItemType</span>&gt;&gt;</span><br><span class="line">  backgroundColor?: <span class="built_in">string</span></span><br><span class="line">  selectedStyle?: &#123;</span><br><span class="line">    borderColor?: <span class="built_in">string</span></span><br><span class="line">    borderWidth?: <span class="built_in">number</span></span><br><span class="line">  &#125;</span><br><span class="line">  renderItem?: <span class="function">(<span class="params">props: RenderItemProps</span>) =&gt;</span> <span class="variable constant_">JSX</span>.<span class="property">Element</span></span><br><span class="line">  touchFeedback?: <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PickerState</span> &#123;</span><br><span class="line">  <span class="attr">selectedIndex</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">itemHeight</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">listHeight</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">data</span>: <span class="title class_">ItemType</span>[]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> setAlphaColor = (<span class="attr">color</span>: <span class="built_in">string</span>, <span class="attr">opacity</span>: <span class="built_in">number</span> = <span class="number">1</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newColor = color</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!newColor.<span class="title function_">startsWith</span>(<span class="string">&quot;#&quot;</span>) || newColor.<span class="property">length</span> !== <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Make sure you set with full hex color value. Ex: #F00F00&quot;</span>)</span><br><span class="line">    newColor = <span class="string">&quot;#FFFFFF&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (opacity === <span class="number">1</span>) <span class="keyword">return</span> newColor</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> _opacity = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="title class_">Math</span>.<span class="title function_">max</span>(opacity, <span class="number">0</span>), <span class="number">1</span>) * <span class="number">255</span>)</span><br><span class="line">  <span class="keyword">return</span> newColor + _opacity.<span class="title function_">toString</span>(<span class="number">16</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> adaptiveColor = (<span class="attr">backgroundColor</span>: <span class="built_in">string</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> foregroundColor = [<span class="string">&quot;#000000&quot;</span>, <span class="string">&quot;#FFFFFF&quot;</span>]</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> bgColor = backgroundColor.<span class="title function_">substring</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> rgb = <span class="built_in">parseInt</span>(bgColor, <span class="number">16</span>)</span><br><span class="line">    <span class="keyword">const</span> red = (rgb &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">const</span> green = (rgb &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">const</span> blue = (rgb &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xff</span></span><br><span class="line">    <span class="keyword">const</span> brightness = <span class="number">0.2126</span> * red + <span class="number">0.7152</span> * green + <span class="number">0.0722</span> * blue</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> brightness &gt; <span class="number">128</span> ? foregroundColor[<span class="number">0</span>] : foregroundColor[<span class="number">1</span>]</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="keyword">return</span> foregroundColor[<span class="number">0</span>] <span class="comment">// return black by default</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Item</span> = <span class="title class_">React</span>.<span class="title function_">memo</span>(</span><br><span class="line">  <span class="function">(<span class="params">&#123; fontSize, label, fontColor, textAlign, lineHeight &#125;: RenderItemProps</span>) =&gt;</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">adjustsFontSizeToFit</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">style</span>=<span class="string">&#123;[&#123;</span> <span class="attr">fontSize</span>, <span class="attr">color:</span> <span class="attr">fontColor</span>, <span class="attr">textAlign</span>, <span class="attr">lineHeight</span> &#125;]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;label&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">PickerItem</span> = (<span class="params"></span></span><br><span class="line"><span class="params">  &#123; item, index &#125;: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  indexSelected: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  style: <span class="built_in">any</span>,</span></span><br><span class="line"><span class="params">  onPress: (index: <span class="built_in">number</span>) =&gt; <span class="built_in">void</span>,</span></span><br><span class="line"><span class="params">  renderItem: (props: RenderItemProps) =&gt; JSX.Element</span></span><br><span class="line"><span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> gap = <span class="title class_">Math</span>.<span class="title function_">abs</span>(index - (indexSelected + <span class="number">2</span>))</span><br><span class="line">  <span class="keyword">const</span> sizeText = [style.<span class="property">fontSize</span>, style.<span class="property">fontSize</span> / <span class="number">1.5</span>, style.<span class="property">fontSize</span> / <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> fontSize = gap &gt; <span class="number">1</span> ? sizeText[<span class="number">2</span>] : sizeText[gap]</span><br><span class="line">  <span class="keyword">const</span> lineHeight = fontSize + <span class="number">2</span></span><br><span class="line">  <span class="keyword">const</span> fontColor = <span class="title function_">adaptiveColor</span>(style.<span class="property">backgroundColor</span>)</span><br><span class="line">  <span class="keyword">const</span> textAlign = <span class="string">&quot;center&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">activeOpacity</span>=<span class="string">&#123;1&#125;</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> onPress(index - 2)&#125;&gt;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">backgroundColor:</span> <span class="attr">gap</span> === <span class="string">0</span> ? &quot;#<span class="attr">F5f5f5</span>&quot; <span class="attr">:</span> &quot;<span class="attr">transparent</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderRadius:</span> <span class="attr">4</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">marginHorizontal:</span> <span class="attr">4</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;typeof renderItem === &quot;function&quot; &amp;&amp;</span></span><br><span class="line"><span class="language-xml">          renderItem(&#123;</span></span><br><span class="line"><span class="language-xml">            fontSize,</span></span><br><span class="line"><span class="language-xml">            fontColor,</span></span><br><span class="line"><span class="language-xml">            label: item.label,</span></span><br><span class="line"><span class="language-xml">            textAlign,</span></span><br><span class="line"><span class="language-xml">            lineHeight,</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">        &#123;!renderItem &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">lineHeight</span>=<span class="string">&#123;lineHeight&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">fontSize</span>=<span class="string">&#123;fontSize&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">fontColor</span>=<span class="string">&#123;fontColor&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">textAlign</span>=<span class="string">&#123;textAlign&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">label</span>=<span class="string">&#123;item.label&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        )&#125;</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Picker</span> <span class="keyword">extends</span> <span class="title class_ inherited__">PureComponent</span>&lt;<span class="title class_">PickerProps</span>, <span class="title class_">PickerState</span>&gt; &#123;</span><br><span class="line">  <span class="keyword">static</span> defaultProps = &#123;</span><br><span class="line">    <span class="attr">items</span>: [],</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;#FFFFFF&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="number">150</span>,</span><br><span class="line">    <span class="attr">touchFeedback</span>: <span class="literal">false</span>,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> _flatListRef = createRef&lt;<span class="title class_">FlatList</span>&gt;()</span><br><span class="line">  <span class="keyword">private</span> _backgroundColor = <span class="title function_">setAlphaColor</span>(<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">backgroundColor</span> <span class="keyword">as</span> <span class="built_in">any</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props: PickerProps</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">      <span class="attr">selectedIndex</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">itemHeight</span>: <span class="number">40</span>,</span><br><span class="line">      <span class="attr">listHeight</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">data</span>: [],</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  userTouch = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidUpdate</span>(<span class="params">prevProps: PickerProps</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">items</span>?.<span class="property">length</span> !== prevProps.<span class="property">items</span>?.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setData</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setData</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">gradientColor</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Platform</span>.<span class="title function_">select</span>(&#123;</span><br><span class="line">      <span class="attr">ios</span>: <span class="title function_">setAlphaColor</span>(<span class="variable language_">this</span>.<span class="property">_backgroundColor</span>, <span class="number">0.2</span>),</span><br><span class="line">      <span class="attr">android</span>: <span class="title function_">setAlphaColor</span>(<span class="variable language_">this</span>.<span class="property">_backgroundColor</span>, <span class="number">0.4</span>),</span><br><span class="line">      <span class="comment">// disable web platform</span></span><br><span class="line">      <span class="comment">// web: setAlphaColor(this.backgroundColor, 0.4),</span></span><br><span class="line">    &#125;) <span class="keyword">as</span> <span class="built_in">string</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">gradientContainerStyle</span>() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; itemHeight &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123; selectedStyle &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123; <span class="attr">height</span>: <span class="number">2</span> * itemHeight, <span class="attr">borderColor</span>: selectedStyle?.<span class="property">borderColor</span> &#125;,</span><br><span class="line">      _styles.<span class="property">gradientContainer</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleOnSelect</span>(<span class="params">index: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; items, onChange, touchFeedback &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">const</span> selectedIndex = <span class="title class_">Math</span>.<span class="title function_">abs</span>(index)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selectedIndex &gt;= <span class="number">0</span> &amp;&amp; selectedIndex &lt;= items.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        touchFeedback &amp;&amp;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">userTouch</span> &amp;&amp;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">selectedIndex</span> !== selectedIndex</span><br><span class="line">      ) &#123;</span><br><span class="line">        <span class="title class_">ReactNativeHapticFeedback</span>.<span class="title function_">trigger</span>(<span class="string">&quot;impactLight&quot;</span>, &#123;</span><br><span class="line">          <span class="attr">enableVibrateFallback</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">ignoreAndroidSystemSettings</span>: <span class="literal">false</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; selectedIndex &#125;)</span><br><span class="line">      onChange &amp;&amp; <span class="title function_">onChange</span>(&#123; <span class="attr">index</span>: selectedIndex, <span class="attr">item</span>: items[selectedIndex] &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleOnPressItem = <span class="function">(<span class="params">index: <span class="built_in">number</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt;= <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">items</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">_flatListRef</span>.<span class="property">current</span>?.<span class="title function_">scrollToIndex</span>(&#123;</span><br><span class="line">        <span class="attr">animated</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">index</span>: index,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setData</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; itemHeight, listHeight &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123; items, height &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (items?.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> additionalItem = &#123; <span class="attr">label</span>: <span class="string">&quot;&quot;</span>, <span class="attr">value</span>: <span class="literal">null</span> &#125;</span><br><span class="line">      <span class="keyword">const</span> data = [</span><br><span class="line">        additionalItem,</span><br><span class="line">        additionalItem,</span><br><span class="line">        ...items,</span><br><span class="line">        additionalItem,</span><br><span class="line">        additionalItem,</span><br><span class="line">      ] <span class="keyword">as</span> <span class="title class_">ItemType</span>[]</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (height) &#123;</span><br><span class="line">        listHeight = height</span><br><span class="line">        itemHeight = listHeight / <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; data, itemHeight, listHeight &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; data, itemHeight, listHeight, selectedIndex &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">const</span> &#123;</span><br><span class="line">      width,</span><br><span class="line">      initialSelectedIndex,</span><br><span class="line">      flatListProps,</span><br><span class="line">      selectedStyle,</span><br><span class="line">      containerStyle = &#123;&#125;,</span><br><span class="line">    &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!data.<span class="property">length</span>) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">height:</span> <span class="attr">listHeight</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">width</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">backgroundColor:</span> <span class="attr">this._backgroundColor</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">containerStyle</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">FlatList</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">keyExtractor</span>=<span class="string">&#123;(_,</span> <span class="attr">index</span>) =&gt;</span> index.toString()&#125;</span></span><br><span class="line"><span class="language-xml">          showsVerticalScrollIndicator=&#123;false&#125;</span></span><br><span class="line"><span class="language-xml">          renderItem=&#123;(options) =&gt;</span></span><br><span class="line"><span class="language-xml">            PickerItem(</span></span><br><span class="line"><span class="language-xml">              options,</span></span><br><span class="line"><span class="language-xml">              selectedIndex,</span></span><br><span class="line"><span class="language-xml">              &#123;</span></span><br><span class="line"><span class="language-xml">                ..._styles.listItem,</span></span><br><span class="line"><span class="language-xml">                backgroundColor: this._backgroundColor,</span></span><br><span class="line"><span class="language-xml">                // fontSize: itemHeight / 2,</span></span><br><span class="line"><span class="language-xml">                ...AntQFontStyle.NORMAL_16,</span></span><br><span class="line"><span class="language-xml">                height: itemHeight,</span></span><br><span class="line"><span class="language-xml">              &#125;,</span></span><br><span class="line"><span class="language-xml">              this.handleOnPressItem,</span></span><br><span class="line"><span class="language-xml">              this.props.renderItem as any</span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">          &#123;...flatListProps&#125;</span></span><br><span class="line"><span class="language-xml">          onTouchStart=&#123;(e) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            this.userTouch = true</span></span><br><span class="line"><span class="language-xml">            !!flatListProps?.onTouchStart &amp;&amp; flatListProps.onTouchStart(e)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          ref=&#123;this._flatListRef&#125;</span></span><br><span class="line"><span class="language-xml">          initialScrollIndex=&#123;initialSelectedIndex&#125;</span></span><br><span class="line"><span class="language-xml">          data=&#123;data&#125;</span></span><br><span class="line"><span class="language-xml">          onScroll=&#123;(event) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            let index = Math.round(</span></span><br><span class="line"><span class="language-xml">              event.nativeEvent.contentOffset.y / itemHeight</span></span><br><span class="line"><span class="language-xml">            )</span></span><br><span class="line"><span class="language-xml">            this.handleOnSelect(index)</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;</span></span><br><span class="line"><span class="language-xml">          getItemLayout=&#123;(_, index) =&gt; (&#123;</span></span><br><span class="line"><span class="language-xml">            length: itemHeight,</span></span><br><span class="line"><span class="language-xml">            offset: index * itemHeight,</span></span><br><span class="line"><span class="language-xml">            index,</span></span><br><span class="line"><span class="language-xml">          &#125;)&#125;</span></span><br><span class="line"><span class="language-xml">          snapToInterval=&#123;itemHeight&#125;</span></span><br><span class="line"><span class="language-xml">        /&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">this.gradientContainerStyle</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">_styles.topGradient</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">borderBottomWidth:</span> <span class="attr">selectedStyle</span>?<span class="attr">.borderWidth</span> &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">pointerEvents</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LinearGradient</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;_styles.linearGradient&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">colors</span>=<span class="string">&#123;[this._backgroundColor,</span> <span class="attr">this.gradientColor</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">this.gradientContainerStyle</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">_styles.bottomGradient</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#123; <span class="attr">borderTopWidth:</span> <span class="attr">selectedStyle</span>?<span class="attr">.borderWidth</span> &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">pointerEvents</span>=<span class="string">&quot;none&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">LinearGradient</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;_styles.linearGradient&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">colors</span>=<span class="string">&#123;[this.gradientColor,</span> <span class="attr">this._backgroundColor</span>]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ inside part end ------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ export part start -----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">TimePickerPnlProps</span> &#123;</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&quot;time&quot;</span> | <span class="string">&quot;date&quot;</span> | <span class="string">&quot;date-time&quot;</span></span><br><span class="line">  is24Hour?: <span class="built_in">boolean</span></span><br><span class="line">  title?: <span class="built_in">string</span></span><br><span class="line">  selectUTC?: <span class="built_in">boolean</span></span><br><span class="line">  initialHour?: <span class="built_in">boolean</span></span><br><span class="line">  onConfirm?: <span class="function">(<span class="params">date: &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">    year: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    month: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    day: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    hour: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    minute: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">    utc: <span class="built_in">number</span></span></span></span><br><span class="line"><span class="params"><span class="function">  &#125;</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">TimerPickerPnl</span> = <span class="title function_">forwardRef</span>(</span><br><span class="line">  <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">    &#123;</span></span></span><br><span class="line"><span class="params"><span class="function">      <span class="keyword">type</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      is24Hour = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      onConfirm,</span></span></span><br><span class="line"><span class="params"><span class="function">      selectUTC = <span class="literal">true</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      initialHour = <span class="literal">false</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">      title = <span class="string">&quot;Select Start Time&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">    &#125;: TimePickerPnlProps,</span></span></span><br><span class="line"><span class="params"><span class="function">    ref</span></span></span><br><span class="line"><span class="params"><span class="function">  </span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> nowTime = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="keyword">new</span> <span class="title class_">Date</span>(), [])</span><br><span class="line">    <span class="keyword">const</span> [modalVisible, setModalVisible] = <span class="title function_">useState</span>(<span class="literal">false</span>)</span><br><span class="line">    <span class="keyword">const</span> [year, setYear] = <span class="title function_">useState</span>(nowTime.<span class="title function_">getFullYear</span>())</span><br><span class="line">    <span class="keyword">const</span> [month, setMonth] = <span class="title function_">useState</span>(nowTime.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> [day, setDay] = <span class="title function_">useState</span>(nowTime.<span class="title function_">getDate</span>())</span><br><span class="line">    <span class="keyword">const</span> [hour, setHour] = <span class="title function_">useState</span>(initialHour ? <span class="number">0</span> : nowTime.<span class="title function_">getHours</span>())</span><br><span class="line">    <span class="keyword">const</span> [minute, setMinute] = <span class="title function_">useState</span>(initialHour ? <span class="number">0</span> : nowTime.<span class="title function_">getMinutes</span>())</span><br><span class="line">    <span class="keyword">const</span> [utc, setUtc] = <span class="title function_">useState</span>((nowTime.<span class="title function_">getTimezoneOffset</span>() / <span class="number">60</span>) * -<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> dayRef = useRef&lt;<span class="title class_">Picker</span>&gt;()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> years = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> currentYear = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getFullYear</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">2</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// currentYear + index</span></span><br><span class="line">        <span class="keyword">const</span> value = currentYear + index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">label</span>: value + <span class="string">&quot;&quot;</span>, value &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> months = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">12</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> label =</span><br><span class="line">          value === <span class="number">1</span></span><br><span class="line">            ? <span class="string">&quot;Jan&quot;</span></span><br><span class="line">            : value === <span class="number">2</span></span><br><span class="line">            ? <span class="string">&quot;Feb&quot;</span></span><br><span class="line">            : value === <span class="number">3</span></span><br><span class="line">            ? <span class="string">&quot;Mar&quot;</span></span><br><span class="line">            : value === <span class="number">4</span></span><br><span class="line">            ? <span class="string">&quot;Apr&quot;</span></span><br><span class="line">            : value === <span class="number">5</span></span><br><span class="line">            ? <span class="string">&quot;May&quot;</span></span><br><span class="line">            : value === <span class="number">6</span></span><br><span class="line">            ? <span class="string">&quot;Jun&quot;</span></span><br><span class="line">            : value === <span class="number">7</span></span><br><span class="line">            ? <span class="string">&quot;Jul&quot;</span></span><br><span class="line">            : value === <span class="number">8</span></span><br><span class="line">            ? <span class="string">&quot;Aug&quot;</span></span><br><span class="line">            : value === <span class="number">9</span></span><br><span class="line">            ? <span class="string">&quot;Sep&quot;</span></span><br><span class="line">            : value === <span class="number">10</span></span><br><span class="line">            ? <span class="string">&quot;Oct&quot;</span></span><br><span class="line">            : value === <span class="number">11</span></span><br><span class="line">            ? <span class="string">&quot;Nov&quot;</span></span><br><span class="line">            : <span class="string">&quot;Dec&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; label, value &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> days = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> nextMonth = <span class="keyword">new</span> <span class="title class_">Date</span>(year, month, <span class="number">1</span>)</span><br><span class="line">      <span class="keyword">const</span> lastDayOfCurrentMonth = <span class="keyword">new</span> <span class="title class_">Date</span>(</span><br><span class="line">        nextMonth.<span class="title function_">getTime</span>() - <span class="number">1000</span></span><br><span class="line">      ).<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(lastDayOfCurrentMonth).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (lastDayOfCurrentMonth &lt; day) &#123;</span><br><span class="line">        <span class="comment">// need reset day</span></span><br><span class="line">        dayRef?.<span class="property">current</span>?.<span class="title function_">handleOnPressItem</span>(lastDayOfCurrentMonth - <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = index + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> label =</span><br><span class="line">          value === <span class="number">1</span></span><br><span class="line">            ? <span class="string">&quot;1st&quot;</span></span><br><span class="line">            : value === <span class="number">2</span></span><br><span class="line">            ? <span class="string">&quot;2nd&quot;</span></span><br><span class="line">            : value === <span class="number">3</span></span><br><span class="line">            ? <span class="string">&quot;3rd&quot;</span></span><br><span class="line">            : value + <span class="string">&quot;th&quot;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; label, value &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [year, month])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> hours = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">24</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = index + (initialHour ? <span class="number">0</span> : <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">          <span class="attr">label</span>: is24Hour</span><br><span class="line">            ? value + <span class="string">&quot; H&quot;</span></span><br><span class="line">            : (index % <span class="number">12</span>) + <span class="number">1</span> + (index &gt;= <span class="number">12</span> ? <span class="string">&quot; PM&quot;</span> : <span class="string">&quot; AM&quot;</span>),</span><br><span class="line">          value,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> minutes = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">60</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = index</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">label</span>: value + <span class="string">&quot;M&quot;</span>, value &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> utcs = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">24</span>).<span class="title function_">fill</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> result.<span class="title function_">map</span>(<span class="function">(<span class="params">_, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> value = index - <span class="number">12</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> label =</span><br><span class="line">          value === <span class="number">0</span> ? <span class="string">&quot;UTC&quot;</span> : value &lt; <span class="number">0</span> ? <span class="string">&quot;UTC&quot;</span> + value : <span class="string">&quot;UTC+&quot;</span> + value</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> &#123; label, value &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, [])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">showModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setModalVisible</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">hideModal</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">      <span class="title function_">setModalVisible</span>(<span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useImperativeHandle</span>(ref, <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">      showModal,</span><br><span class="line">      hideModal,</span><br><span class="line">    &#125;))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// render</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">Modal</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">isVisible</span>=<span class="string">&#123;modalVisible&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">margin:</span> <span class="attr">0</span>, <span class="attr">justifyContent:</span> &quot;<span class="attr">flex-end</span>&quot; &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">backdropOpacity</span>=<span class="string">&#123;0.5&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onBackdropPress</span>=<span class="string">&#123;hideModal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">backgroundColor:</span> <span class="attr">AntQColors.MAIN_WHITE</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">paddingTop:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderTopLeftRadius:</span> <span class="attr">8</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">borderTopRightRadius:</span> <span class="attr">8</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">paddingBottom:</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">Platform.OS</span> === <span class="string">&quot;ios&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                ? <span class="attr">AntQSizes.PAGE_PADDING_LARGE</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">flexDirection:</span> &quot;<span class="attr">row</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Text</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">AntQFontStyle.NORMAL_16</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">color:</span> <span class="attr">AntQColors.MAIN_BLACK</span>, <span class="attr">fontWeight:</span> &quot;<span class="attr">bold</span>&quot; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              &#123;/* TODO: i18n */&#125;</span></span><br><span class="line"><span class="language-xml">              &#123;title&#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Pressable</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">height:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">width:</span> <span class="attr">20</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">position:</span> &quot;<span class="attr">absolute</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">right:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onPress</span>=<span class="string">&#123;hideModal&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Image</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width:</span> <span class="attr">16</span>, <span class="attr">height:</span> <span class="attr">16</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">source</span>=<span class="string">&#123;getImgByName(</span>&quot;<span class="attr">close_black</span>&quot;)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">Pressable</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">flexDirection:</span> &quot;<span class="attr">row</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">width:</span> <span class="attr">wp</span>(<span class="attr">100</span>) <span class="attr">-</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span> * <span class="attr">2</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">marginLeft:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">alignItems:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">justifyContent:</span> &quot;<span class="attr">center</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;(type === &quot;date&quot; || type === &quot;date-time&quot;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">items</span>=<span class="string">&#123;years&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;0&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setYear(item.value)</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  containerStyle=&#123;&#123; flex: 1 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;month</span> <span class="attr">-</span> <span class="attr">1</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">items</span>=<span class="string">&#123;months&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setMonth(item.value)</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  containerStyle=&#123;&#123; flex: 1 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;day</span> <span class="attr">-</span> <span class="attr">1</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">ref</span>=<span class="string">&#123;dayRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">items</span>=<span class="string">&#123;days&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setDay(item.value)</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  containerStyle=&#123;&#123; flex: 1 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">            &#123;(type === &quot;time&quot; || type === &quot;date-time&quot;) &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;hour</span> <span class="attr">-</span> (<span class="attr">initialHour</span> ? <span class="attr">0</span> <span class="attr">:</span> <span class="attr">1</span>)&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">items</span>=<span class="string">&#123;hours&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setHour(item.value)</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  containerStyle=&#123;&#123; flex: 1 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;minute&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">items</span>=<span class="string">&#123;minutes&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                    setMinute(item.value)</span></span><br><span class="line"><span class="language-xml">                  &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  containerStyle=&#123;&#123; flex: 1 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                /&gt;</span></span><br><span class="line"><span class="language-xml">                &#123;selectUTC &amp;&amp; (</span></span><br><span class="line"><span class="language-xml">                  <span class="tag">&lt;<span class="name">Picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">initialSelectedIndex</span>=<span class="string">&#123;utc</span> + <span class="attr">12</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">items</span>=<span class="string">&#123;utcs&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                    <span class="attr">onChange</span>=<span class="string">&#123;(&#123;</span> <span class="attr">item</span> &#125;) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                      setUtc(item.value)</span></span><br><span class="line"><span class="language-xml">                    &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                    containerStyle=&#123;&#123; flex: 1.2 &#125;&#125;</span></span><br><span class="line"><span class="language-xml">                  /&gt;</span></span><br><span class="line"><span class="language-xml">                )&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="language-xml">            )&#125;</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">View</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">marginTop:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">marginHorizontal:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">flexDirection:</span> &quot;<span class="attr">row</span>&quot;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">_styles.btnCommon</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123; <span class="attr">borderWidth:</span> <span class="attr">1</span>, <span class="attr">borderColor:</span> &quot;#<span class="attr">CECECE</span>&quot; &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                hideModal()</span></span><br><span class="line"><span class="language-xml">              &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;_styles.btnTextCommon&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;LANAGER_STR(&quot;common_cancel&quot;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">style</span>=<span class="string">&#123;[</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">_styles.btnCommon</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#123;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">marginLeft:</span> <span class="attr">AntQSizes.PAGE_PADDING_DEFAULT</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                  <span class="attr">backgroundColor:</span> <span class="attr">AntQColors.MAIN_YELLOW</span>,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                &#125;,</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              ]&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">                const date = &#123;</span></span><br><span class="line"><span class="language-xml">                  year,</span></span><br><span class="line"><span class="language-xml">                  month,</span></span><br><span class="line"><span class="language-xml">                  day,</span></span><br><span class="line"><span class="language-xml">                  hour,</span></span><br><span class="line"><span class="language-xml">                  minute,</span></span><br><span class="line"><span class="language-xml">                  utc,</span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">                onConfirm &amp;&amp; onConfirm(date)</span></span><br><span class="line"><span class="language-xml">                hideModal()</span></span><br><span class="line"><span class="language-xml">              &#125;&#125;</span></span><br><span class="line"><span class="language-xml">            &gt;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;_styles.btnTextCommon&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;LANAGER_STR(&quot;common_ok&quot;)&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">        &lt;/<span class="title class_">View</span>&gt;</span><br><span class="line">      &lt;/<span class="title class_">Modal</span>&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------ export part end -----</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> _styles = <span class="title class_">StyleSheet</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">pickerCommon</span>: &#123; ...<span class="title class_">AntQFontStyle</span>.<span class="property">NORMAL_16</span> &#125;,</span><br><span class="line">  <span class="attr">btnCommon</span>: &#123;</span><br><span class="line">    <span class="attr">borderRadius</span>: <span class="number">4</span>,</span><br><span class="line">    <span class="attr">alignItems</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="attr">justifyContent</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">44</span>,</span><br><span class="line">    <span class="attr">flex</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">btnTextCommon</span>: &#123;</span><br><span class="line">    ...<span class="title class_">AntQFontStyle</span>.<span class="property">NORMAL_16</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="title class_">AntQColors</span>.<span class="property">MAIN_BLACK</span>,</span><br><span class="line">    <span class="attr">fontWeight</span>: <span class="string">&quot;bold&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">listItem</span>: &#123;</span><br><span class="line">    <span class="attr">alignItems</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">    <span class="attr">justifyContent</span>: <span class="string">&quot;center&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">gradientContainer</span>: &#123;</span><br><span class="line">    <span class="attr">position</span>: <span class="string">&quot;absolute&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;100%&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">linearGradient</span>: &#123; <span class="attr">flex</span>: <span class="number">1</span> &#125;,</span><br><span class="line">  <span class="attr">topGradient</span>: &#123; <span class="attr">top</span>: <span class="number">0</span> &#125;,</span><br><span class="line">  <span class="attr">bottomGradient</span>: &#123; <span class="attr">bottom</span>: <span class="number">0</span> &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">TimerPickerPnl</span></span><br></pre></td></tr></table></figure>

<h1 id="How-to-use"><a href="#How-to-use" class="headerlink" title="How to use"></a>How to use</h1><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">TimerPickerPnl</span> <span class="keyword">from</span> <span class="string">&quot;@/panels/TimePickerPnl&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useRef &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Text</span>, <span class="title class_">TouchableOpacity</span>, <span class="title class_">View</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react-native&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span>: <span class="title class_">React</span>.<span class="property">FC</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;<span class="built_in">any</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">View</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TouchableOpacity</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          ref.current?.showModal()</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      &gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">Text</span>&gt;</span>Open Picker<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">TimerPickerPnl</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">type</span>=<span class="string">&quot;date-time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">onConfirm</span>=<span class="string">&#123;(date)</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-xml">          const &#123; year, month, day, hour, minute, utc &#125; = date</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">          console.log(</span></span><br><span class="line"><span class="language-xml">            `Selected date: $&#123;year&#125;-$&#123;month&#125;-$&#123;day&#125; $&#123;hour&#125;:$&#123;minute&#125; UTC $&#123;utc&#125;`</span></span><br><span class="line"><span class="language-xml">          )</span></span><br><span class="line"><span class="language-xml">        &#125;&#125;</span></span><br><span class="line"><span class="language-xml">      /&gt;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Demo</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>React Native</tag>
        <tag>Time Picker</tag>
      </tags>
  </entry>
  <entry>
    <title>Transducer</title>
    <url>/2020/10/03/Transducer/</url>
    <content><![CDATA[<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>Reducer 將多個 input fold 成一個 output.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multiply</span> = (<span class="params">a, b</span>) =&gt; a * b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">concatString</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">concatArray</span> = (<span class="params">a, b</span>) =&gt; [...a, ...b]</span><br></pre></td></tr></table></figure>

<h3 id="Transducer"><a href="#Transducer" class="headerlink" title="Transducer"></a>Transducer</h3><p>Transducer 做的事情大致相同,但是與普通的 reducer 不同的是,它可以通過多個 function 組合而成.而普通的 reducer 不能組合,因爲他們接受兩個參數,但是只返回一個值,所以不能將這次的結果傳入下一個 reducer:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// reducer</span></span><br><span class="line"><span class="attr">f</span>: <span class="function">(<span class="params">a, c</span>) =&gt;</span> a</span><br><span class="line"><span class="attr">g</span>: <span class="function">(<span class="params">a, c</span>) =&gt;</span> a</span><br><span class="line"></span><br><span class="line"><span class="comment">// transducer</span></span><br><span class="line"><span class="attr">f</span>: <span class="function">(<span class="params">reducer</span>) =&gt;</span> reducer</span><br><span class="line"><span class="attr">g</span>: <span class="function">(<span class="params">reducer</span>) =&gt;</span> reducer</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Why-Transducers"><a href="#Why-Transducers" class="headerlink" title="Why Transducers?"></a>Why Transducers?</h3><p>儅我們處理數據時,將處理過程拆分成相互獨立,然後組合的步驟會非常有用.假設現在有一個非常大的數據集,現在需要對數據集處理某些操作,你可能會這樣做:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Sting&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Radiohead&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;NIN&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;Echo&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&quot;Zeppelin&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isNearMe</span> = (<span class="params">&#123; nearMe &#125;</span>) =&gt; nearMe</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params">&#123; name &#125;</span>) =&gt; name</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> results = friends.<span class="title function_">filter</span>(isNearMe).<span class="title function_">map</span>(getName)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(results) <span class="comment">// =&gt; [&quot;Sting&quot;, &quot;Radiohead&quot;, &quot;Echo&quot;]</span></span><br></pre></td></tr></table></figure>

<p>上面的例子存在著一定的問題:只能處理 array;如果存在從網絡上來的無限數據流,該如何處理?</p>
<p>每次在 array 上使用<code>.</code>語法時,JavaScript 都會構造一個全新的 intermediate array,如果你的 array 非常龐大,這時的性能會出現指數級的下降.若使用 transducer,則可以將每個 item 在 pipe 中傳輸,無需建立中間對象,從而節省了大量的時間和内存.</p>
<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>下面的代碼暫時未實現具體的操作,但是可以先觀察 transducer 是如何構建的.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> friends = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Sting&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;Radiohead&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;NIN&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">&quot;Echo&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">&quot;Zeppelin&quot;</span>, <span class="attr">nearMe</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isNearMe</span> = (<span class="params">&#123; nearMe &#125;</span>) =&gt; nearMe</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getName</span> = (<span class="params">&#123; name &#125;</span>) =&gt; name</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFriendsNearMe = <span class="title function_">compose</span>(<span class="title function_">filter</span>(isNearMe), <span class="title function_">map</span>(getName))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> results2 = <span class="title function_">toArray</span>(getFriendsNearMe, friends)</span><br></pre></td></tr></table></figure>

<p>Transducer 在需要使用並給它傳遞數據時才會執行,也就是上述代碼的<code>toArray()</code>部分,你可以自己實現 transducer 的轉換結果.<br>Transducer 可以映射各種類型,例如</p>
<ul>
<li><code>&#123;x, y, z&#125; -&gt; &#123;x, y, z&#125;</code></li>
<li><code>&#123;x, y ,z&#125; -&gt; &#123;x, z&#125;</code></li>
<li><code>&#123;x, y, z&#125; -&gt; &#123;x, y, z, xx, yy, zz&#125;</code></li>
</ul>
<p>假設我們現在需要讓一個 array 中的數字翻倍,我們可以這麽實現:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">map</span>(double)</span><br></pre></td></tr></table></figure>

<p>在上述例子中,arr 是一個可枚舉對象,map 將每個對象單獨進行 double 處理,然後將所有的值纍加到新的 array 中.<br>我們還可以實現新的效果:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">x</span>) =&gt; x % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = arr.<span class="title function_">filter</span>(isEven).<span class="title function_">map</span>(double)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p>但是,處理無限數據流時會發生什麽?<br>數組是不能無限長的,在數組的處理中,你必須將整個迭代成一個集合,才能進行下一步的處理.這種限制就會導致性能降低,因爲需要創建一個中間數組,并且為每個操作迭代一次新的集合.就用上述的例子來説,首先有一個過濾單數的操作,然後有一個倍增的操作.必須先在過濾操作中將所有的元素進行過濾,然後再在 double 中執行所有的元素,才能夠拿到你想要的數據.<br>一種處理方法是將每個值單獨映射,一次通過一個值,這樣就避免了每次生成一個映射集合,并且隨時能夠通過值來發出終止信號:</p>
<ul>
<li>Pull: lazy evaluation: 直到用戶要求取下一個值時,才會拿出下一個值.如<code>Iterable</code>.</li>
<li>Push: eager evaluation: 每次拿出一個值,然後傳入 reducer 中,生成新值.如<code>Array.reduce()</code></li>
</ul>
<p>Transducer 不關心你使用的是哪種方式,也不關心數據的具體結構,他們只是簡單的調用傳入的 reducer 並纍加新值.實際上就是一個 Higher Order Reducer,它的類型大致為:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">reducer = <span class="function">(<span class="params">accumulator, current</span>) =&gt;</span> accumulator</span><br><span class="line">transducer = <span class="function">(<span class="params">reducer</span>) =&gt;</span> reducer</span><br></pre></td></tr></table></figure>

<p>大多數 transducer 需要使用一定的參數以實現特定的功能,所以一個 map transducer 也許類型為這樣:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">map = <span class="function">(<span class="params">transform</span>) =&gt;</span> <span class="function">(<span class="params">reducer</span>) =&gt;</span> reducer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// another way</span></span><br><span class="line">map = <span class="function">(<span class="params">(a) =&gt; b</span>) =&gt;</span> <span class="function">(<span class="params">step</span>) =&gt;</span> reducer;</span><br></pre></td></tr></table></figure>

<p>map 接受一個 mapping function(transform),一個 reducer(step)然後返回一個新的 reducer.現在來看一些簡單的例子.</p>
<h3 id="Naive-Examples"><a href="#Naive-Examples" class="headerlink" title="Naive Examples"></a>Naive Examples</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">compose</span> =</span><br><span class="line">  (<span class="params">...fns</span>) =&gt;</span><br><span class="line">  <span class="function">(<span class="params">x</span>) =&gt;</span></span><br><span class="line">    fns.<span class="title function_">reduceRight</span>(<span class="function">(<span class="params">y, f</span>) =&gt;</span> <span class="title function_">f</span>(y), x)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">map</span> = (<span class="params">f</span>) =&gt; <span class="function">(<span class="params">step</span>) =&gt;</span> <span class="function">(<span class="params">a, c</span>) =&gt;</span> <span class="title function_">step</span>(a, <span class="title function_">f</span>(c))</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">filter</span> = (<span class="params">predicate</span>) =&gt; <span class="function">(<span class="params">step</span>) =&gt;</span> <span class="function">(<span class="params">a, c</span>) =&gt;</span> <span class="title function_">predicate</span>(c) ? <span class="title function_">step</span>(a, c) : a</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isEven</span> = (<span class="params">n</span>) =&gt; n % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">n</span>) =&gt; n * <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> doubleEvens = <span class="title function_">compose</span>(<span class="title function_">filter</span>(isEven), <span class="title function_">map</span>(double)) <span class="comment">// also a transducer</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">arrayConcat</span> = (<span class="params">a, c</span>) =&gt; a.<span class="title function_">concat</span>([c]) <span class="comment">// step</span></span><br><span class="line"><span class="keyword">const</span> xform = <span class="title function_">doubleEvens</span>(arrayConcat) <span class="comment">// a reducer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>].<span class="title function_">reduce</span>(xform, []) <span class="comment">// [4, 8, 12]</span></span><br></pre></td></tr></table></figure>

<p>在這個例子中,map 就是一個 transducer,你還能這樣使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">double</span> = (<span class="params">x</span>) =&gt; x * <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> doubleMap = <span class="title function_">map</span>(double) <span class="comment">// double is a transform</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">step</span> = (<span class="params">a, c</span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="title function_">doubleMap</span>(step)(<span class="number">0</span>, <span class="number">4</span>) <span class="comment">// 8</span></span><br><span class="line"><span class="title function_">doubleMap</span>(step)(<span class="number">0</span>, <span class="number">21</span>) <span class="comment">// 42</span></span><br></pre></td></tr></table></figure>

<p>其中,0 代表 reducer 的初始值,step 函數本該是一個 reducer,但是方便演示就將他寫成一個 logger.這種技巧也可以在單元測試中作斷言使用.</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Trump一番话影响经济市场</title>
    <url>/2020/01/09/Trump%E4%B8%80%E7%95%AA%E8%AF%9D%E5%BD%B1%E5%93%8D%E7%BB%8F%E6%B5%8E%E5%B8%82%E5%9C%BA/</url>
    <content><![CDATA[<h3 id="川普不对伊朗动武-美股涨-金价回落-油价跳水"><a href="#川普不对伊朗动武-美股涨-金价回落-油价跳水" class="headerlink" title="川普不对伊朗动武 美股涨 金价回落 油价跳水"></a>川普不对伊朗动武 美股涨 金价回落 油价跳水</h3><p>伊朗袭击美军驻伊拉克基地后，美国总统川普表示将升级经济制裁取代付诸武力。市场乐观情绪上扬，美股上涨，金价回落，油价则大跳水。</p>
<p>川普 1 月 8 日在白宫发表谈话，伊朗袭击并未伤害到任何美国人，称伊朗有所退让，暗示不会对伊朗动武，伊朗外交部长也称该国不寻求升级事态，这些消息都缓解了投资人对美伊局势的不安。</p>
<p>8 日美国股市上涨，道琼工业指数收涨 161.41 点或 0.56%，报 28745.09 点。标普 500 指数收涨 15.87 点或 0.49%，报 3253.05 点。那斯达克指数收涨 60.66 点或 0.67%，报 9129.24 点。费城半导体指数上涨 0.31 点或 0.02%，报 1867.59 点。</p>
<p>那斯达克指数创收盘新高，道琼工业指数、标普 500 指数、费城半导体指数徘回历史次高位。</p>
<span id="more"></span>

<p>亚洲股市 9 日也普遍回涨，衡量 6 种主要货币对美元的美元指数上涨 0.33%至 97.01。</p>
<p>而黄金价格原本因市场的避险情绪，8 日一度升穿每英两 1,600 美元，为近七年来首见，但川普总统演讲缓解市场疑虑后，金价迅速回落。</p>
<p>黄金现货下跌近 1%，报每英两 1,559.22 美元，盘中触及 2013 年以来最高的 1,610.90 美元。美国黄金期货收跌 0.9%，结算价报每英两 1,560.20 美元。</p>
<p>OANDA 高级市场分析师 Edward Moya 表示：「可能不会爆发战争，金价因此走低，但其余推动走势的催化剂仍在，黄金价格短期内上看每盎英两 1,640 美元」。</p>
<p>国际油价则在 8 日重挫逾 4%。原本盘中一度飙升至近四个月高点，但中东紧张局势出现缓解迹象，且美国原油库存意外增加，油价随之跳水。</p>
<p>布兰特原油期货下跌 2.83 美元或 4.2%，结算价报每桶 65.44 美元；西德州原油期货下跌 3.09 美元或 4.9%，结算价报每桶 59.61 美元。</p>
<p>美国能源资讯署（EIA）表示，上周原油库存增加 120 万桶，高于市场预期的减少 260 万桶，也高于美国石油协会（API）公布的减少 590 万桶。</p>
<h3 id="BTC-同样也受影响-一小时内下跌-240"><a href="#BTC-同样也受影响-一小时内下跌-240" class="headerlink" title="BTC 同样也受影响 一小时内下跌$240"></a>BTC 同样也受影响 一小时内下跌$240</h3><p>1&#x2F;8&#x2F;2020 23:49 UTC+8 时间，BTC 价格为$8335.19。<br>1&#x2F;9&#x2F;2020 00:55 UTC+8 时间，BTC 价格为$8095.46。<br>1&#x2F;9&#x2F;2020 03:50 UTC+8 时间，BTC 跌破**$8000**，价格为$7992.02。<br>1&#x2F;9&#x2F;2020 04:25 UTC+8 时间，BTC 跌破**$7900**，价格为$7887.35。</p>
<p>到日间有所回暖，但随后又开始下跌。</p>
]]></content>
      <tags>
        <tag>News</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Classes</title>
    <url>/2020/02/29/TypeScript-Classes/</url>
    <content><![CDATA[<h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">  <span class="attr">greeting</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">message: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">greeting</span> = message</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">greet</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Private"><a href="#Private" class="headerlink" title="Private"></a>Private</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Horse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;Horse&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Human</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Lucy&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> horse = <span class="keyword">new</span> <span class="title class_">Horse</span>()</span><br><span class="line"><span class="keyword">let</span> human = <span class="keyword">new</span> <span class="title class_">Human</span>(<span class="string">&quot;Jack&quot;</span>)</span><br><span class="line">animal = horse <span class="comment">// success</span></span><br><span class="line">animal = human <span class="comment">// failed</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Protected"><a href="#Protected" class="headerlink" title="Protected"></a>Protected</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">protected</span> <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">department</span>: <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, department: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(name)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">department</span> = department</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">getInfo</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name: <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>, department: <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Edward</span> = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Edward&quot;</span>, <span class="string">&quot;front-end&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Jack&quot;</span>) <span class="comment">// failed</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Edward</span>.<span class="title function_">getInfo</span>())</span><br></pre></td></tr></table></figure>

<h3 id="Readonly-modifier"><a href="#Readonly-modifier" class="headerlink" title="Readonly modifier"></a>Readonly modifier</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">length</span>: <span class="built_in">number</span> = <span class="number">8</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">C</span>(<span class="string">&quot;test&quot;</span>).<span class="property">name</span> = <span class="string">&quot;test1&quot;</span> <span class="comment">// failed</span></span><br></pre></td></tr></table></figure>

<h3 id="Accessors"><a href="#Accessors" class="headerlink" title="Accessors"></a>Accessors</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">MAX</span> = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">_fullName</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">fullName</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_fullName</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">fullName</span>(<span class="params">name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (name &amp;&amp; name.<span class="property">length</span> &gt; <span class="variable constant_">MAX</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;too long&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_fullName</span> = name</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Person</span>().<span class="property">fullName</span> = <span class="string">&quot;Edward&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="Static-Properties"><a href="#Static-Properties" class="headerlink" title="Static Properties"></a>Static Properties</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> scale: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">calculateDistance</span>(<span class="attr">point</span>: &#123; <span class="attr">x</span>: <span class="built_in">number</span>, <span class="attr">y</span>: <span class="built_in">number</span> &#125;): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xDist = (point.<span class="property">x</span> - <span class="title class_">Point</span>.<span class="property">origin</span>.<span class="property">x</span>);</span><br><span class="line">    <span class="keyword">let</span> yDist = (point.<span class="property">y</span> - <span class="title class_">Point</span>.<span class="property">origin</span>.<span class="property">y</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist ** <span class="number">2</span> + yDist ** <span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> point1 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(point1.<span class="title function_">calculateDistance</span>(&#123;<span class="number">10</span>, <span class="number">20</span>&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printName</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name: &quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">abstract</span> <span class="title function_">printMeeting</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(<span class="string">&quot;AccountingDepartment&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">printMeeting</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;This is Accounting Department&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">foo</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">department</span>: <span class="title class_">Department</span> = <span class="keyword">new</span> <span class="title class_">Department</span>() <span class="comment">// error: can not create an instance of an abstract class</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">department2</span>: <span class="title class_">Department</span> = <span class="keyword">new</span> <span class="title class_">AccountingDepartment</span>()</span><br><span class="line">department2.<span class="title function_">foo</span>() <span class="comment">// error: method doesn&#x27;t exist on declared abstract type</span></span><br></pre></td></tr></table></figure>

<h3 id="Using-a-class-as-an-interface"><a href="#Using-a-class-as-an-interface" class="headerlink" title="Using a class as an interface"></a>Using a class as an interface</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> point3D <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="attr">z</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">point</span>: point3D = &#123; <span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>, <span class="attr">z</span>: <span class="number">0</span> &#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Enums</title>
    <url>/2020/03/05/TypeScript-Enums/</url>
    <content><![CDATA[<h3 id="Numeric-enums"><a href="#Numeric-enums" class="headerlink" title="Numeric enums"></a>Numeric enums</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">move</span>(<span class="params">length: <span class="built_in">number</span>, direction: Direction</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`move: <span class="subst">$&#123;direction&#125;</span> <span class="subst">$&#123;length&#125;</span>meters.`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">move</span>(<span class="number">10</span>, <span class="title class_">Direction</span>.<span class="property">UP</span>)</span><br></pre></td></tr></table></figure>

<h3 id="String-enums"><a href="#String-enums" class="headerlink" title="String enums"></a>String enums</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Direction</span> &#123;</span><br><span class="line">  <span class="variable constant_">UP</span> = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">  <span class="variable constant_">DOWN</span> = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">  <span class="variable constant_">LEFT</span> = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">  <span class="variable constant_">RIGHT</span> = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Heterogeneous-enums"><a href="#Heterogeneous-enums" class="headerlink" title="Heterogeneous enums"></a>Heterogeneous enums</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  yes,</span><br><span class="line">  no = <span class="string">&quot;no&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Computed-members"><a href="#Computed-members" class="headerlink" title="Computed members"></a>Computed members</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  <span class="title class_">None</span>,</span><br><span class="line">  <span class="title class_">Read</span> = <span class="number">1</span> &lt;&lt; <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Write</span> = <span class="number">1</span> &lt;&lt; <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">ReadWrite</span> = <span class="title class_">Read</span> | <span class="title class_">Write</span>,</span><br><span class="line">  L = <span class="string">&quot;1234&quot;</span>.<span class="property">length</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Union-enums-and-enum-member-types"><a href="#Union-enums-and-enum-member-types" class="headerlink" title="Union enums and enum member types"></a>Union enums and enum member types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Kind</span> &#123;</span><br><span class="line">  <span class="title class_">Square</span>,</span><br><span class="line">  <span class="title class_">Circle</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Circle</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">Kind</span>.<span class="property">Circle</span></span><br><span class="line">  <span class="attr">radius</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> &#123;</span><br><span class="line">  <span class="attr">kind</span>: <span class="title class_">Kind</span>.<span class="property">Square</span></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Circle</span> = &#123; <span class="attr">kind</span>: <span class="title class_">Kind</span>.<span class="property">Circle</span>, <span class="attr">radius</span>: <span class="number">5</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="Enums-at-runtime"><a href="#Enums-at-runtime" class="headerlink" title="Enums at runtime"></a>Enums at runtime</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  X,</span><br><span class="line">  Y,</span><br><span class="line">  Z,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">obj: &#123; X: <span class="built_in">number</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">X</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>(E) <span class="comment">// work</span></span><br></pre></td></tr></table></figure>

<h3 id="Enums-at-compile-time"><a href="#Enums-at-compile-time" class="headerlink" title="Enums at compile time"></a>Enums at compile time</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">LogLevel</span> &#123;</span><br><span class="line">  <span class="variable constant_">ERROR</span>,</span><br><span class="line">  <span class="variable constant_">WARN</span>,</span><br><span class="line">  <span class="variable constant_">INFO</span>,</span><br><span class="line">  <span class="variable constant_">DEBUG</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LogLevelString</span> = keyof <span class="keyword">typeof</span> <span class="title class_">LogLevel</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params">key: LogLevelString, message: <span class="built_in">string</span></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> num = <span class="title class_">LogLevel</span>[key]</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="title class_">LogLevel</span>.<span class="property">WARN</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;key&#125;</span>-<span class="subst">$&#123;num&#125;</span>-<span class="subst">$&#123;message&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">print</span>(<span class="string">&quot;WARN&quot;</span>, <span class="string">&quot;warning&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Reverse-mappings"><a href="#Reverse-mappings" class="headerlink" title="Reverse mappings"></a>Reverse mappings</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> E &#123;</span><br><span class="line">  A,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> a = E.<span class="property">A</span></span><br><span class="line"><span class="keyword">let</span> getName = E[a] <span class="comment">// &#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Generics</title>
    <url>/2020/03/04/TypeScript-Generics/</url>
    <content><![CDATA[<h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> foo&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> len&lt;T&gt;(<span class="attr">arg</span>: <span class="title class_">Array</span>&lt;T&gt;): <span class="title class_">Array</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Generics-Types"><a href="#Generics-Types" class="headerlink" title="Generics Types"></a>Generics Types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> foo&lt;T&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> fooInterface&lt;T&gt; &#123;</span><br><span class="line">  (<span class="attr">arg</span>: T): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myFunction</span>: &lt;T&gt;<span class="function">(<span class="params">arg: T</span>) =&gt;</span> T = foo</span><br><span class="line"><span class="keyword">let</span> <span class="attr">otherFunction</span>: &#123; &lt;T&gt;(<span class="attr">arg</span>: T): T &#125; = foo</span><br><span class="line"><span class="keyword">let</span> <span class="attr">interfaceFunction</span>: fooInterface&lt;<span class="built_in">number</span>&gt; = foo</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Generics-Classes"><a href="#Generics-Classes" class="headerlink" title="Generics Classes"></a>Generics Classes</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">GenericsNumber</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">zeroValue</span>: T</span><br><span class="line">  <span class="attr">add</span>: <span class="function">(<span class="params">x: T, y: T</span>) =&gt;</span> T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">number</span> = <span class="keyword">new</span> <span class="title class_">GenericsNumber</span>&lt;<span class="built_in">number</span>&gt;()</span><br><span class="line"><span class="built_in">number</span>.<span class="property">zeroValue</span> = <span class="number">0</span></span><br><span class="line"><span class="built_in">number</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="built_in">string</span> = <span class="keyword">new</span> <span class="title class_">GenericsNumber</span>&lt;<span class="built_in">string</span>&gt;()</span><br><span class="line"><span class="built_in">string</span>.<span class="property">zeroValue</span> = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">string</span>.<span class="property">add</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">string</span>.<span class="title function_">add</span>(<span class="built_in">string</span>.<span class="property">zeroValue</span>, <span class="string">&quot;test&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="Generics-Constraints"><a href="#Generics-Constraints" class="headerlink" title="Generics Constraints"></a>Generics Constraints</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Lengthwise</span> &#123;</span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> foo&lt;T <span class="keyword">extends</span> <span class="title class_">Lengthwise</span>&gt;(<span class="attr">arg</span>: T): T &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg.<span class="property">length</span>)</span><br><span class="line">  <span class="keyword">return</span> arg</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Using-Type-Parameters-in-Generic-Constraints"><a href="#Using-Type-Parameters-in-Generic-Constraints" class="headerlink" title="Using Type Parameters in Generic Constraints"></a>Using Type Parameters in Generic Constraints</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> getProperty&lt;T, K <span class="keyword">extends</span> keyof T&gt;(<span class="attr">obj</span>: T, <span class="attr">key</span>: K) &#123;</span><br><span class="line">  <span class="keyword">return</span> obj[key]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getProperty</span>(obj, <span class="string">&quot;a&quot;</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getProperty</span>(obj, <span class="string">&quot;e&quot;</span>)) <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h4 id="Using-Class-Types-in-Generics"><a href="#Using-Class-Types-in-Generics" class="headerlink" title="Using Class Types in Generics"></a>Using Class Types in Generics</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> create&lt;T&gt;(<span class="attr">c</span>: &#123; <span class="keyword">new</span> (): T &#125;): T &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BeeKeeper</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> hasMask: <span class="built_in">boolean</span> = <span class="literal">false</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZooKeeper</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> nameTag: <span class="built_in">string</span> = <span class="string">&quot;undefined&quot;</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"><span class="keyword">private</span> numLegs: <span class="built_in">number</span> = <span class="number">0</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">num: <span class="built_in">number</span>, <span class="keyword">public</span> keeper: BeeKeeper</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Lion</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">num: <span class="built_in">number</span>, <span class="keyword">public</span> keeper: ZooKeeper</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(num)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> createInstance&lt;A <span class="keyword">extends</span> <span class="title class_">Animal</span>&gt;(</span><br><span class="line">  <span class="attr">c</span>: <span class="keyword">new</span> (x, y) =&gt; A,</span><br><span class="line">  <span class="attr">numLegs</span>: <span class="built_in">number</span>,</span><br><span class="line">  <span class="attr">keeper</span>: <span class="built_in">any</span></span><br><span class="line">): A &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">c</span>(numLegs, keeper)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createInstance</span>(<span class="title class_">Bee</span>, <span class="number">2</span>, <span class="keyword">new</span> <span class="title class_">BeeKeeper</span>(<span class="literal">true</span>)))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createInstance</span>(<span class="title class_">Lion</span>, <span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">ZooKeeper</span>(<span class="string">&quot;lion&quot;</span>)))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Interface</title>
    <url>/2020/02/26/TypeScript-Interface/</url>
    <content><![CDATA[<h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> labelValue &#123;</span><br><span class="line">  <span class="attr">label</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printLabel</span>(<span class="params">obj: labelValue</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">label</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&quot;some text&quot;</span> &#125;</span><br><span class="line"><span class="title function_">printLabel</span>(obj)</span><br></pre></td></tr></table></figure>

<h3 id="Optional-Properties"><a href="#Optional-Properties" class="headerlink" title="Optional Properties"></a>Optional Properties</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config: SquareConfig</span>): &#123; <span class="attr">color</span>: <span class="built_in">string</span>; <span class="attr">area</span>: <span class="built_in">number</span> &#125; &#123;</span><br><span class="line">  <span class="keyword">let</span> defaultSquare = &#123; <span class="attr">color</span>: <span class="string">&quot;White&quot;</span>, <span class="attr">area</span>: <span class="number">200</span> &#125;</span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">color</span>) defaultSquare.<span class="property">color</span> = config.<span class="property">color</span></span><br><span class="line">  <span class="keyword">if</span> (config.<span class="property">width</span>) defaultSquare.<span class="property">area</span> = config.<span class="property">width</span> ** <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> defaultSquare</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">createSquare</span>(&#123; <span class="attr">color</span>: <span class="string">&quot;Black&quot;</span>, <span class="attr">width</span>: <span class="number">30</span> &#125;))</span><br></pre></td></tr></table></figure>

<h3 id="Readonly-Properties"><a href="#Readonly-Properties" class="headerlink" title="Readonly Properties"></a>Readonly Properties</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">x</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="keyword">readonly</span> <span class="attr">y</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">readOnlyArray</span>: <span class="title class_">ReadonlyArray</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="built_in">number</span>[] = readOnlyArray <span class="keyword">as</span> <span class="built_in">number</span>[] <span class="comment">// readonly array assignment to ordinary array</span></span><br></pre></td></tr></table></figure>

<h3 id="Excess-Property-Checks"><a href="#Excess-Property-Checks" class="headerlink" title="Excess Property Checks"></a>Excess Property Checks</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">  color?: <span class="built_in">string</span></span><br><span class="line">  width?: <span class="built_in">number</span></span><br><span class="line">  [<span class="attr">propName</span>: <span class="built_in">string</span>]: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newSquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">opacity</span>: <span class="number">0.5</span> &#125; <span class="keyword">as</span> <span class="title class_">SquareConfig</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Function-Types"><a href="#Function-Types" class="headerlink" title="Function Types"></a>Function Types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> foo &#123;</span><br><span class="line">  (<span class="attr">source</span>: <span class="built_in">string</span>, <span class="attr">subString</span>: <span class="built_in">string</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearchFunction</span>: foo = <span class="keyword">function</span> (<span class="params">src, sub</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> src.<span class="title function_">search</span>(sub) &gt; -<span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Indexable-Types"><a href="#Indexable-Types" class="headerlink" title="Indexable Types"></a>Indexable Types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">StringArray</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span> = [<span class="string">&quot;text1&quot;</span>, <span class="string">&quot;text2&quot;</span>]</span><br><span class="line"><span class="keyword">let</span> text1 = myArray[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">NumberDictionary</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>: <span class="built_in">string</span>]: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">length</span>: <span class="built_in">number</span></span><br><span class="line">  <span class="attr">name</span>: <span class="built_in">string</span> <span class="comment">// error</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ReadonlyStringArray</span> &#123;</span><br><span class="line">  <span class="keyword">readonly</span> [<span class="attr">index</span>: <span class="built_in">number</span>]: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">readonly</span>: <span class="title class_">ReadonlyStringArray</span> = [<span class="string">&quot;text1&quot;</span>, <span class="string">&quot;text2&quot;</span>]</span><br><span class="line"><span class="keyword">readonly</span>[<span class="number">2</span>] = <span class="string">&quot;change&quot;</span> <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h3 id="Class-Types"><a href="#Class-Types" class="headerlink" title="Class Types"></a>Class Types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="attr">currentTime</span>: <span class="title class_">Date</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">currentTime</span> = d</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Static-sides-of-class"><a href="#Static-sides-of-class" class="headerlink" title="Static sides of class"></a>Static sides of class</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">tick</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">  <span class="keyword">new</span> (<span class="attr">hour</span>: <span class="built_in">number</span>, <span class="attr">minute</span>: <span class="built_in">number</span>): <span class="title class_">ClockInterface</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClock</span>(<span class="params"></span></span><br><span class="line"><span class="params">  ctor: ClockConstructor,</span></span><br><span class="line"><span class="params">  hour: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  minute: <span class="built_in">number</span></span></span><br><span class="line"><span class="params"></span>): <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(hour, minute)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tick&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnalogClock</span> <span class="keyword">implements</span> <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">h: <span class="built_in">number</span>, m: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tick22222&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = <span class="title function_">createClock</span>(<span class="title class_">DigitalClock</span>, <span class="number">12</span>, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">let</span> analog = <span class="title function_">createClock</span>(<span class="title class_">AnalogClock</span>, <span class="number">12</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h3 id="Extending-Interfaces"><a href="#Extending-Interfaces" class="headerlink" title="Extending Interfaces"></a>Extending Interfaces</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">color</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> B &#123;</span><br><span class="line">  <span class="attr">width</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Square</span> <span class="keyword">extends</span> A, B &#123;</span><br><span class="line">  <span class="attr">sideLength</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &#123;&#125; <span class="keyword">as</span> <span class="title class_">Square</span></span><br><span class="line">square.<span class="property">color</span> = <span class="string">&quot;white&quot;</span></span><br><span class="line">square.<span class="property">width</span> = <span class="number">2</span></span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">4</span></span><br></pre></td></tr></table></figure>

<h3 id="Hybrid-Types"><a href="#Hybrid-Types" class="headerlink" title="Hybrid Types"></a>Hybrid Types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Counter</span> &#123;</span><br><span class="line">  (<span class="attr">start</span>: <span class="built_in">number</span>): <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">interval</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">reset</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="keyword">function</span> (<span class="params">start: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="comment">// some thing</span></span><br><span class="line">  &#125; <span class="keyword">as</span> <span class="title class_">Counter</span></span><br><span class="line">  counter.<span class="property">interval</span> = <span class="number">20</span></span><br><span class="line">  counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// some thing</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> counter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> counter = <span class="title function_">getCounter</span>()</span><br><span class="line"><span class="title function_">counter</span>(<span class="number">10</span>)</span><br><span class="line">counter.<span class="title function_">reset</span>()</span><br><span class="line">counter.<span class="property">interval</span> = <span class="number">10</span></span><br></pre></td></tr></table></figure>

<h3 id="Interface-Extending-Classes"><a href="#Interface-Extending-Classes" class="headerlink" title="Interface Extending Classes"></a>Interface Extending Classes</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="comment">// subclass of Control &amp; implement the interface</span></span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// from the interface</span></span><br><span class="line">    <span class="comment">// some thing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> &#123;</span><br><span class="line">  <span class="comment">// subclass of Control</span></span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// custom function</span></span><br><span class="line">    <span class="comment">// some thing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> <span class="keyword">implements</span> <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">  <span class="comment">// just implement the interface, but not the subclass of Control</span></span><br><span class="line">  <span class="keyword">private</span> <span class="attr">state</span>: <span class="built_in">any</span> <span class="comment">// need to add.</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">select</span>(): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="comment">// some thing</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Type Compatibility</title>
    <url>/2020/03/06/TypeScript-Type-Compatibility/</url>
    <content><![CDATA[<h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A = <span class="keyword">new</span> <span class="title function_">B</span>() <span class="comment">// no error</span></span><br></pre></td></tr></table></figure>

<h4 id="At-least-same-member"><a href="#At-least-same-member" class="headerlink" title="At least same member"></a>At least same member</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">  <span class="attr">text</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">obj: &#123; text: <span class="built_in">string</span> &#125;</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> obj.<span class="property">text</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">text</span>: <span class="string">&quot;some text&quot;</span>, <span class="attr">num</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: A = obj <span class="comment">// success</span></span><br><span class="line"><span class="title function_">foo</span>(obj) <span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">a</span> = (<span class="params">a: <span class="built_in">number</span></span>) =&gt; a</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">b</span> = (<span class="params">a: <span class="built_in">number</span>, b: <span class="built_in">number</span></span>) =&gt; a + b</span><br><span class="line"></span><br><span class="line">b = a <span class="comment">// success</span></span><br><span class="line">a = b <span class="comment">// error</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">x</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">text</span>: <span class="string">&quot;some text&quot;</span> &#125;)</span><br><span class="line"><span class="keyword">let</span> <span class="title function_">y</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">text</span>: <span class="string">&quot;some text&quot;</span>, <span class="attr">num</span>: <span class="number">3</span> &#125;)</span><br><span class="line"></span><br><span class="line">x = y <span class="comment">// success</span></span><br><span class="line">y = x <span class="comment">// error</span></span><br></pre></td></tr></table></figure>

<h3 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Size</span> &#123;</span><br><span class="line">  <span class="attr">feet</span>: <span class="built_in">number</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, numFeet: <span class="built_in">number</span></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: <span class="title class_">Animal</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Size</span></span><br><span class="line"></span><br><span class="line">a = b <span class="comment">// success</span></span><br><span class="line">b = a <span class="comment">// success</span></span><br></pre></td></tr></table></figure>

<h3 id="Generics"><a href="#Generics" class="headerlink" title="Generics"></a>Generics</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Empty</span>&lt;T&gt; &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="title class_">Empty</span>&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">y</span>: <span class="title class_">Empty</span>&lt;<span class="built_in">number</span>&gt;</span><br><span class="line">x = y <span class="comment">// success</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> T&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">data</span>: T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">x1</span>: T&lt;<span class="built_in">string</span>&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">x2</span>: T&lt;<span class="built_in">number</span>&gt;</span><br><span class="line"></span><br><span class="line">x1 = x2 <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 中的逆变、协变、双变与不变</title>
    <url>/2025/03/18/TypeScript-%E4%B8%AD%E7%9A%84%E9%80%86%E5%8F%98%E3%80%81%E5%8D%8F%E5%8F%98%E3%80%81%E5%8F%8C%E5%8F%98%E4%B8%8E%E4%B8%8D%E5%8F%98/</url>
    <content><![CDATA[<p>在 TypeScript 的类型系统中，<strong>逆变（Contravariance）</strong>、<strong>协变（Covariance）</strong>、<strong>双变（Bivariance）</strong> 和 <strong>不变（Invariance）</strong> 是描述类型兼容性和子类型关系的重要概念。这些术语来源于类型理论，主要用于处理函数类型、泛型和接口的赋值规则。理解这些概念不仅能帮助我们编写更安全的代码，还能让我们更好地设计类型系统。本文将逐一讲解这四种变型，辅以代码示例，让你轻松掌握它们的含义与应用。</p>
<span id="more"></span>

<h1 id="协变（Covariance）：返回值类型的“向上兼容”"><a href="#协变（Covariance）：返回值类型的“向上兼容”" class="headerlink" title="协变（Covariance）：返回值类型的“向上兼容”"></a>协变（Covariance）：返回值类型的“向上兼容”</h1><h2 id="定义与原理"><a href="#定义与原理" class="headerlink" title="定义与原理"></a>定义与原理</h2><p>协变是指如果类型 <code>A</code> 是 <code>B</code> 的子类型（记作 <code>A &lt;: B</code>），那么 <code>T&lt;A&gt;</code> 也是 <code>T&lt;B&gt;</code> 的子类型。简单来说，子类型可以安全地“向上”转换为父类型。</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>协变最常见于函数的返回值类型。在 TypeScript 中，函数返回的类型如果是子类型，则可以赋值给期待父类型的地方。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> getDog = (): <span class="function"><span class="params">Dog</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line"><span class="keyword">let</span> <span class="attr">getAnimal</span>: <span class="function">() =&gt;</span> <span class="title class_">Animal</span> = getDog <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<p>这里，<code>Dog</code> 是 <code>Animal</code> 的子类型，<code>getDog</code> 返回 <code>Dog</code>，而 <code>getAnimal</code> 期待返回 <code>Animal</code>。由于返回值类型是协变的，这种赋值是合法的。</p>
<h2 id="为什么安全？"><a href="#为什么安全？" class="headerlink" title="为什么安全？"></a>为什么安全？</h2><p>调用 <code>getAnimal()</code> 时，返回的是 <code>Dog</code>，但调用者只关心 <code>Animal</code> 的属性和方法。由于 <code>Dog</code> 继承了 <code>Animal</code>，它完全满足要求，因此协变在返回值中是安全的。</p>
<h1 id="逆变（Contravariance）：参数类型的“向下兼容”"><a href="#逆变（Contravariance）：参数类型的“向下兼容”" class="headerlink" title="逆变（Contravariance）：参数类型的“向下兼容”"></a>逆变（Contravariance）：参数类型的“向下兼容”</h1><h2 id="定义与原理-1"><a href="#定义与原理-1" class="headerlink" title="定义与原理"></a>定义与原理</h2><p>逆变是指如果 <code>A</code> 是 <code>B</code> 的子类型（<code>A &lt;: B</code>），那么 <code>T&lt;B&gt;</code> 是 <code>T&lt;A&gt;</code> 的子类型。与协变相反，逆变的方向是从父类型到子类型。</p>
<p>应用场景<br>逆变通常出现在函数参数类型中。在 TypeScript 的严格模式（<code>strictFunctionTypes: true</code>）下，函数参数默认是逆变的，即接受父类型的函数可以赋值给期待子类型的地方。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">handleAnimal</span> = (<span class="params">param: Animal</span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">handleDog</span>: <span class="function">(<span class="params">param: Dog</span>) =&gt;</span> <span class="built_in">void</span> = handleAnimal <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<p><code>handleAnimal</code> 接受 <code>Animal</code> 类型参数，而 <code>handleDog</code> 期待 <code>Dog</code> 类型。由于 <code>Dog</code> 是 <code>Animal</code> 的子类型，这种赋值在逆变规则下是合法的。</p>
<h2 id="为什么安全？-1"><a href="#为什么安全？-1" class="headerlink" title="为什么安全？"></a>为什么安全？</h2><p>调用 <code>handleDog(new Dog())</code> 时，传入的是 <code>Dog</code>，而 <code>handleAnimal</code> 能处理任何 <code>Animal</code>（包括 <code>Dog</code>）。逻辑上不会出错，因此逆变在参数类型中是安全的。</p>
<h1 id="双变（Bivariance）：宽松的双向兼容"><a href="#双变（Bivariance）：宽松的双向兼容" class="headerlink" title="双变（Bivariance）：宽松的双向兼容"></a>双变（Bivariance）：宽松的双向兼容</h1><h2 id="定义与原理-2"><a href="#定义与原理-2" class="headerlink" title="定义与原理"></a>定义与原理</h2><p>双变是指类型既支持协变又支持逆变，即在某些情况下，类型可以向上或向下兼容。这种行为通常出现在 TypeScript 的非严格模式（<code>strictFunctionTypes: false</code>）中。</p>
<h2 id="应用场景-1"><a href="#应用场景-1" class="headerlink" title="应用场景"></a>应用场景</h2><p>双变主要影响函数参数类型。当严格模式关闭时，TypeScript 允许参数类型双向赋值。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn1</span> = (<span class="params">param: Dog</span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fn2</span>: <span class="function">(<span class="params">param: Animal</span>) =&gt;</span> <span class="built_in">void</span> = fn1 <span class="comment">// 非严格模式下正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn3</span> = (<span class="params">param: Animal</span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fn4</span>: <span class="function">(<span class="params">param: Dog</span>) =&gt;</span> <span class="built_in">void</span> = fn3 <span class="comment">// 非严格模式下正确</span></span><br></pre></td></tr></table></figure>

<p>在非严格模式下，<code>fn1</code>（要求 <code>Dog</code>）可以赋值给 <code>fn2</code>（要求 <code>Animal</code>），反过来 <code>fn3</code>（要求 <code>Animal</code>）也能赋值给 <code>fn4</code>（要求 <code>Dog</code>）。</p>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>双变虽然灵活，但可能导致类型不安全。例如，<code>fn2</code> 可能传入 <code>Animal</code> 而非 <code>Dog</code>，而 <code>fn1</code> 无法处理这种情况。因此，严格模式下 TypeScript 只支持参数的逆变，以确保类型安全。</p>
<h1 id="不变（Invariance）：严格的类型匹配"><a href="#不变（Invariance）：严格的类型匹配" class="headerlink" title="不变（Invariance）：严格的类型匹配"></a>不变（Invariance）：严格的类型匹配</h1><h2 id="定义与原理-3"><a href="#定义与原理-3" class="headerlink" title="定义与原理"></a>定义与原理</h2><p>不变是指类型 <code>T&lt;A&gt;</code> 和 <code>T&lt;B&gt;</code> 之间没有任何兼容性，即使 <code>A</code> 和 <code>B</code> 存在子类型关系。只有当类型完全相同时才兼容。</p>
<h2 id="应用场景-2"><a href="#应用场景-2" class="headerlink" title="应用场景"></a>应用场景</h2><p>不变通常出现在泛型类型同时作为输入（逆变）和输出（协变）时。由于两种变型要求冲突，TypeScript 要求类型保持不变。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Container</span>&lt;T&gt; &#123;</span><br><span class="line">  <span class="attr">value</span>: T <span class="comment">// 输出（协变）</span></span><br><span class="line">  <span class="attr">setValue</span>: <span class="function">(<span class="params">x: T</span>) =&gt;</span> <span class="built_in">void</span> <span class="comment">// 输入（逆变）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">dogContainer</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Dog</span>&gt; = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="keyword">new</span> <span class="title class_">Dog</span>(),</span><br><span class="line">  <span class="attr">setValue</span>: <span class="function">(<span class="params">x: Dog</span>) =&gt;</span> &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">animalContainer</span>: <span class="title class_">Container</span>&lt;<span class="title class_">Animal</span>&gt; = dogContainer <span class="comment">// 错误！</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>dogContainer</code> 的 <code>setValue</code> 只接受 <code>Dog</code>，而 <code>animalContainer</code> 的 <code>setValue</code> 要求接受 <code>Animal</code>，这违反了逆变规则。</li>
<li>反过来，<code>animalContainer</code> 的 <code>value</code> 返回 <code>Animal</code>，而 <code>dogContainer</code> 期待 Dog，这违反了协变规则。 因此，<code>Container&lt;Dog&gt;</code> 和 <code>Container&lt;Animal&gt;</code> 互不兼容，表现出不变性。</li>
</ul>
<h1 id="总结与对比"><a href="#总结与对比" class="headerlink" title="总结与对比"></a>总结与对比</h1><table>
<thead>
<tr>
<th>变型</th>
<th>定义</th>
<th>典型场景</th>
<th>示例兼容性</th>
</tr>
</thead>
<tbody><tr>
<td>协变</td>
<td><code>A &lt;: B</code> -&gt; <code>T&lt;A&gt; &lt;: T&lt;B&gt;</code></td>
<td>返回值类型</td>
<td>()&#x3D;&gt;Dog -&gt; () &#x3D;&gt; Animal</td>
</tr>
<tr>
<td>逆变</td>
<td><code>A &lt;: B</code> -&gt; <code>T&lt;B&gt; &lt;: T&lt;A&gt;</code></td>
<td>参数类型</td>
<td>(Animal) &#x3D;&gt; void -&gt; (Dog) &#x3D;&gt; void</td>
</tr>
<tr>
<td>双变</td>
<td>既协变又逆变</td>
<td>非严格模式参数</td>
<td>双向兼容(不安全)</td>
</tr>
<tr>
<td>不变</td>
<td><code>T&lt;A&gt;</code> 和 <code>T&lt;B&gt;</code> 无关</td>
<td>输入+输出</td>
<td>Container&lt;Dog&gt; !&#x3D; Container&lt;Animal&gt;</td>
</tr>
</tbody></table>
<h2 id="实际意义"><a href="#实际意义" class="headerlink" title="实际意义"></a>实际意义</h2><ul>
<li>协变与逆变：分别适用于返回值和参数的类型检查，是类型系统灵活性的体现。</li>
<li>双变：非严格模式下的妥协，牺牲了安全性换取兼容性。</li>
<li>不变：在复杂场景下强制类型一致，确保程序的正确性。</li>
</ul>
<p>通过理解这些变型规则，我们可以更好地设计 TypeScript 的接口和泛型，避免类型错误。例如，在严格模式下优先考虑逆变的参数规则，或在泛型设计中明确类型的使用位置（输入还是输出）。</p>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript Functions</title>
    <url>/2020/03/03/TypeScript-Functions/</url>
    <content><![CDATA[<h3 id="Function-Types"><a href="#Function-Types" class="headerlink" title="Function Types"></a>Function Types</h3><h4 id="Typing-the-function"><a href="#Typing-the-function" class="headerlink" title="Typing the function"></a>Typing the function</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> fo = <span class="keyword">function</span> (<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Writing-the-function-type"><a href="#Writing-the-function-type" class="headerlink" title="Writing the function type"></a>Writing the function type</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">  x: <span class="built_in">number</span>,</span></span><br><span class="line"><span class="params">  y: <span class="built_in">string</span></span></span><br><span class="line"><span class="params"></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Inferring-types"><a href="#Inferring-types" class="headerlink" title="Inferring types"></a>Inferring types</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">foo</span>: <span class="function">(<span class="params">x: <span class="built_in">number</span>, y: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">string</span> = <span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Optional-and-Default-Parameters"><a href="#Optional-and-Default-Parameters" class="headerlink" title="Optional and Default Parameters"></a>Optional and Default Parameters</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName?: <span class="built_in">string</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">getName</span>(<span class="string">&quot;Edward&quot;</span>)</span><br><span class="line"><span class="title function_">getName</span>(<span class="string">&quot;Edison&quot;</span>, <span class="literal">undefined</span>)</span><br><span class="line"><span class="title function_">getName</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Li&quot;</span>)</span><br><span class="line"><span class="title function_">getName</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;Li&quot;</span>) <span class="comment">// error, too many parameters.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, lastName: <span class="built_in">string</span> = <span class="string">&quot;Li&quot;</span></span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (lastName) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">buildName</span>(<span class="string">&quot;Edward&quot;</span>)</span><br><span class="line"><span class="title function_">buildName</span>(<span class="string">&quot;Edison&quot;</span>, <span class="literal">undefined</span>)</span><br><span class="line"><span class="title function_">buildName</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;Li&quot;</span>)</span><br><span class="line"><span class="title function_">buildName</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;Li&quot;</span>) <span class="comment">// error, too many parameters.</span></span><br></pre></td></tr></table></figure>

<h3 id="Rest-Parameters"><a href="#Rest-Parameters" class="headerlink" title="Rest Parameters"></a>Rest Parameters</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">buildNameFun</span>: <span class="function">(<span class="params">firstName: <span class="built_in">string</span>, ...restOfName: <span class="built_in">string</span>[]</span>) =&gt;</span> <span class="built_in">string</span> =</span><br><span class="line">  buildName</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">buildName</span>(<span class="string">&quot;Jack&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;Chen&quot;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="this-and-arrow-functions"><a href="#this-and-arrow-functions" class="headerlink" title="this and arrow functions"></a>this and arrow functions</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> deck = &#123;</span><br><span class="line">  <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">  <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="attr">createCardPicker</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// <span class="doctag">NOTE:</span> The arrow function allowing us to capture &#x27;this&#x27; right here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deck.<span class="title function_">createCardPicker</span>()())</span><br></pre></td></tr></table></figure>

<h3 id="this-parameters"><a href="#this-parameters" class="headerlink" title="this parameters"></a>this parameters</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Card</span> &#123;</span><br><span class="line">  <span class="attr">suit</span>: <span class="built_in">string</span></span><br><span class="line">  <span class="attr">card</span>: <span class="built_in">number</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Deck</span> &#123;</span><br><span class="line">  <span class="attr">suits</span>: <span class="built_in">string</span>[]</span><br><span class="line">  <span class="attr">cards</span>: <span class="built_in">number</span>[]</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createCardPicker</span>(<span class="attr">this</span>: <span class="title class_">Deck</span>): <span class="function">() =&gt;</span> <span class="title class_">Card</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">deck</span>: <span class="title class_">Deck</span> = &#123;</span><br><span class="line">  <span class="attr">suits</span>: [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>],</span><br><span class="line">  <span class="attr">cards</span>: <span class="title class_">Array</span>(<span class="number">52</span>),</span><br><span class="line">  <span class="attr">createCardPicker</span>: <span class="keyword">function</span> (<span class="params"><span class="variable language_">this</span>: Deck</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">52</span>)</span><br><span class="line">      <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(pickedCard / <span class="number">13</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">suit</span>: <span class="variable language_">this</span>.<span class="property">suits</span>[pickedSuit], <span class="attr">card</span>: pickedCard % <span class="number">13</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deck.<span class="title function_">createCardPicker</span>()())</span><br></pre></td></tr></table></figure>

<h3 id="Overloads"><a href="#Overloads" class="headerlink" title="Overloads"></a>Overloads</h3><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> suits = [<span class="string">&quot;hearts&quot;</span>, <span class="string">&quot;spades&quot;</span>, <span class="string">&quot;clubs&quot;</span>, <span class="string">&quot;diamonds&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x: &#123; suit: <span class="built_in">string</span>; card: <span class="built_in">number</span> &#125;[]</span>): <span class="built_in">number</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x: <span class="built_in">number</span></span>): &#123; <span class="attr">suit</span>: <span class="built_in">string</span>; <span class="attr">card</span>: <span class="built_in">number</span> &#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">pickCard</span>(<span class="params">x</span>): <span class="built_in">any</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedCard = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * x.<span class="property">length</span>)</span><br><span class="line">    <span class="keyword">return</span> pickedCard</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> x == <span class="string">&quot;number&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> pickedSuit = <span class="title class_">Math</span>.<span class="title function_">floor</span>(x / <span class="number">13</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; <span class="attr">suit</span>: suits[pickedSuit], <span class="attr">card</span>: x % <span class="number">13</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myDeck = [</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&quot;diamonds&quot;</span>, <span class="attr">card</span>: <span class="number">2</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&quot;spades&quot;</span>, <span class="attr">card</span>: <span class="number">10</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">suit</span>: <span class="string">&quot;hearts&quot;</span>, <span class="attr">card</span>: <span class="number">4</span> &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="keyword">let</span> pickedCard1 = myDeck[<span class="title function_">pickCard</span>(myDeck)]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;card: &quot;</span> + pickedCard1.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard1.<span class="property">suit</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> pickedCard2 = <span class="title function_">pickCard</span>(<span class="number">35</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;card: &quot;</span> + pickedCard2.<span class="property">card</span> + <span class="string">&quot; of &quot;</span> + pickedCard2.<span class="property">suit</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript Enum取key&amp;value</title>
    <url>/2021/06/16/Typescript-Enum%E5%8F%96key-value/</url>
    <content><![CDATA[<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">  <span class="variable constant_">AA</span> = <span class="string">&quot;aa&quot;</span>,</span><br><span class="line">  <span class="variable constant_">BB</span> = <span class="string">&quot;bb&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> B = keyof <span class="keyword">typeof</span> <span class="title class_">Foo</span> <span class="comment">// &#x27;AA&#x27; | &#x27;BB&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Template Literal Types</span></span><br><span class="line"><span class="keyword">type</span> C = <span class="string">`<span class="subst">$&#123;keyof &#123; [x <span class="keyword">in</span> Foo]: <span class="built_in">string</span> &#125;&#125;</span>`</span></span><br><span class="line"><span class="comment">// &#x27;aa&#x27; | &#x27;bb&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu折腾笔记--音频</title>
    <url>/2021/06/15/Ubuntu%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0-%E9%9F%B3%E9%A2%91/</url>
    <content><![CDATA[<h3 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h3><p>公司的 PC 没有音卡。导致耳机不能播放。</p>
<h3 id="使用-pavucontrol-输出为模拟信号"><a href="#使用-pavucontrol-输出为模拟信号" class="headerlink" title="使用 pavucontrol 输出为模拟信号"></a>使用 pavucontrol 输出为模拟信号</h3><p>刚开始总报找不到这个 package。<br>换了官方源也没用。<br>后来才发现需要打开开源 package 安装。。。<code>software &amp; updates &gt; ubuntu software &gt; open-source software</code></p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Vite 的 HMR</title>
    <url>/2025/03/10/Vite-%E7%9A%84-HMR/</url>
    <content><![CDATA[<h1 id="Vite-为什么快？"><a href="#Vite-为什么快？" class="headerlink" title="Vite 为什么快？"></a>Vite 为什么快？</h1><p>Vite 的速度优势主要来源于其<strong>基于原生 ESM（ES Modules）<strong>的开发模式和</strong>高效的构建过程</strong>。</p>
<h2 id="原生-ESM-的开发服务器"><a href="#原生-ESM-的开发服务器" class="headerlink" title="原生 ESM 的开发服务器"></a>原生 ESM 的开发服务器</h2><h3 id="传统打包工具（如-Webpack）的问题"><a href="#传统打包工具（如-Webpack）的问题" class="headerlink" title="传统打包工具（如 Webpack）的问题"></a>传统打包工具（如 Webpack）的问题</h3><ul>
<li>Webpack 在开发模式下会将所有模块打包成一个或多个 bundle 文件，即使只修改了一个文件，也需要重新打包整个 bundle。</li>
<li>这种打包过程涉及大量的文件读取、解析、转换和写入操作，随着项目规模增加，启动时间和热更新时间会显著变慢。</li>
</ul>
<h3 id="Vite-的解决方案"><a href="#Vite-的解决方案" class="headerlink" title="Vite 的解决方案"></a>Vite 的解决方案</h3><ul>
<li>Vite 利用现代浏览器对 原生 ES Modules（ESM） 的支持，在开发模式下不进行打包，而是直接通过 HTTP 请求按需加载模块。</li>
<li>浏览器支持 <code>&lt;script type=&quot;module&quot;&gt;</code>，可以动态加载 ESM 模块，Vite 的开发服务器将源码直接以 ESM 格式提供给浏览器。</li>
<li>启动速度快：<ul>
<li>Vite 的开发服务器启动时，只需要初始化一个简单的 HTTP 服务器，无需预先打包整个项目。</li>
<li>文件按需加载，只有访问到的模块才会被处理（例如解析和转换），大大减少了初始启动时间。</li>
</ul>
</li>
<li>按需编译：<ul>
<li>Vite 使用 Esbuild（一个极快的 JavaScript&#x2F;TS 编译器）对 TypeScript、JSX 等非标准 ESM 文件进行预编译，生成浏览器可识别的 ESM 格式。</li>
<li>Esbuild 的性能比传统工具（如 Babel）快 10-100 倍，因为它是基于 Go 语言实现的，充分利用了多核 CPU。</li>
</ul>
</li>
</ul>
<span id="more"></span>

<h2 id="高效的依赖预构建"><a href="#高效的依赖预构建" class="headerlink" title="高效的依赖预构建"></a>高效的依赖预构建</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul>
<li>浏览器原生 ESM 不支持 CommonJS 模块（例如 require()），而许多 npm 包是以 CommonJS 格式发布的。</li>
<li>如果直接在浏览器中加载大量依赖，会导致大量的 HTTP 请求（例如一个依赖树可能触发数百个请求），影响性能。</li>
</ul>
<h3 id="Vite-的解决方案-1"><a href="#Vite-的解决方案-1" class="headerlink" title="Vite 的解决方案"></a>Vite 的解决方案</h3><ul>
<li>Vite 在第一次启动时会对项目中的第三方依赖进行 预构建（Pre-bundling）。<br>使用 Esbuild 将依赖从 CommonJS 或 UMD 格式转换为 ESM 格式，并将多个小模块合并为一个或几个较大的 ESM 文件。</li>
<li>好处：<ul>
<li>减少 HTTP 请求数量，提高加载性能。</li>
<li>缓存预构建结果，后续启动无需重复处理。</li>
</ul>
</li>
<li>缓存机制：<ul>
<li>预构建结果存储在 <code>node_modules/.vite</code> 目录中，只有当依赖发生变化（例如运行 <code>npm install</code>）时才会重新构建。</li>
</ul>
</li>
</ul>
<h2 id="按需加载和缓存"><a href="#按需加载和缓存" class="headerlink" title="按需加载和缓存"></a>按需加载和缓存</h2><ul>
<li>Vite 的开发服务器会对每个模块的请求添加缓存头（如 <code>Cache-Control: max-age=31536000, immutable</code>），浏览器会缓存已加载的模块。</li>
<li>当模块内容未发生变化时，浏览器直接使用缓存，无需重新请求服务器，减少了网络开销。</li>
<li>只有修改过的模块才会重新编译和加载，进一步提升热更新速度。</li>
</ul>
<h2 id="生产环境的-Rollup-打包"><a href="#生产环境的-Rollup-打包" class="headerlink" title="生产环境的 Rollup 打包"></a>生产环境的 Rollup 打包</h2><ul>
<li>开发模式：Vite 不打包，依赖浏览器原生 ESM。</li>
<li>生产模式：Vite 使用 Rollup 进行打包。<ul>
<li>Rollup 是一个高效的打包工具，专注于 Tree Shaking（移除未使用的代码）和生成更小的 bundle。</li>
<li>Vite 在生产模式下利用 Rollup 的成熟生态和优化能力，确保生成高效的生产代码。</li>
</ul>
</li>
<li>为什么不用 Esbuild 打包？：<ul>
<li>Esbuild 的打包功能不如 Rollup 成熟，尤其是在代码分割（Code Splitting）和 Tree Shaking 方面。</li>
<li>Vite 选择在开发模式中使用 Esbuild 追求速度，在生产模式中使用 Rollup 追求质量。</li>
</ul>
</li>
</ul>
<h2 id="轻量级设计"><a href="#轻量级设计" class="headerlink" title="轻量级设计"></a>轻量级设计</h2><ul>
<li>Vite 的核心功能高度聚焦，避免了不必要的复杂性。</li>
<li>插件系统简洁高效，支持与 Rollup 插件兼容，同时提供了 Vite 专用的插件 API。</li>
<li>相比 Webpack 的复杂配置和庞大的生态，Vite 的轻量级设计减少了性能开销。</li>
</ul>
<h1 id="热更新（HMR）是如何实现的？"><a href="#热更新（HMR）是如何实现的？" class="headerlink" title="热更新（HMR）是如何实现的？"></a>热更新（HMR）是如何实现的？</h1><p>Vite 的热更新（Hot Module Replacement, HMR）是其开发体验的核心优势之一。以下是 HMR 的实现原理</p>
<h2 id="基于-WebSocket-的通信"><a href="#基于-WebSocket-的通信" class="headerlink" title="基于 WebSocket 的通信"></a>基于 WebSocket 的通信</h2><ul>
<li>初始化:<ul>
<li>Vite 开发服务器启动时，会创建一个 WebSocket 服务器（默认端口与 HTTP 服务器相同）。</li>
<li>客户端通过注入的脚本（<code>/@vite/client</code>）与服务器建立 WebSocket 连接。</li>
</ul>
</li>
<li>事件通知：<ul>
<li>当文件发生变化时，Vite 的文件监听系统（基于 <code>chokidar</code>）检测到更改。</li>
<li>服务器通过 WebSocket 向客户端发送更新事件，包含变化的模块信息。</li>
</ul>
</li>
</ul>
<h2 id="模块依赖图"><a href="#模块依赖图" class="headerlink" title="模块依赖图"></a>模块依赖图</h2><ul>
<li>Vite 在开发服务器启动时，会构建一个 模块依赖图（Module Graph）：<ul>
<li>记录每个模块的导入关系（例如 <code>import A from &#39;./A&#39;</code>）。</li>
<li>跟踪模块之间的依赖链。</li>
</ul>
</li>
<li>当某个模块发生变化时，Vite 根据依赖图找到所有受影响的模块。</li>
</ul>
<h2 id="按需更新"><a href="#按需更新" class="headerlink" title="按需更新"></a>按需更新</h2><ul>
<li>模块更新：<ul>
<li>当一个模块（例如 <code>A.js</code>）发生变化时，Vite 只重新编译这个模块，并通过 WebSocket 通知客户端。</li>
<li>客户端接收到更新后，请求新的模块内容（例如 <code>http://localhost:5173/A.js</code>）。</li>
</ul>
</li>
<li>HMR 的实现：<ul>
<li>Vite 在客户端注入了一个 HMR 运行时（<code>/@vite/client</code>），负责处理模块更新。</li>
<li>当收到更新事件时，HMR 运行时会调用 <code>import.meta.hot.accept()</code> 提供的回调，动态替换旧模块。</li>
</ul>
</li>
</ul>
<h2 id="React-Fast-Refresh"><a href="#React-Fast-Refresh" class="headerlink" title="React Fast Refresh"></a>React Fast Refresh</h2><p>对于 React 项目，Vite 使用 React Fast Refresh（基于 react-refresh）实现更细粒度的更新：</p>
<ul>
<li>原理：<ul>
<li>React Fast Refresh 在编译时为每个组件注入 HMR 逻辑。</li>
<li>当组件代码发生变化时，只更新变化的部分（例如函数组件的定义），而不会丢失状态。</li>
</ul>
</li>
<li>实现：<ul>
<li>Vite 的插件 <code>@vitejs/plugin-react</code> 集成了 React Fast Refresh。</li>
<li>当 <code>.jsx</code> 或 <code>.tsx</code> 文件变化时，Vite 编译新代码，并通过 HMR 运行时通知 React 刷新特定组件。</li>
</ul>
</li>
<li>优势：<ul>
<li>保留组件的本地状态（例如 <code>useState</code> 和 <code>useRef</code> 的值）。</li>
<li>只重新渲染受影响的组件，而不是整个应用。</li>
</ul>
</li>
</ul>
<h2 id="边界处理"><a href="#边界处理" class="headerlink" title="边界处理"></a>边界处理</h2><ul>
<li>HMR 边界：<ul>
<li>如果一个模块没有显式接受 HMR（即没有 <code>import.meta.hot.accept()</code>），Vite 会沿着依赖链向上找到最近的 HMR 边界。</li>
<li>如果没有边界，Vite 会触发全页面刷新（Full Reload）。</li>
</ul>
</li>
<li>全页面刷新：<ul>
<li>当非模块文件（例如 CSS 文件）或无法热更新的模块（例如 JSON 文件）发生变化时，Vite 会触发全页面刷新。</li>
<li>对于 CSS 文件，Vite 使用一种特殊的 HMR 方式，通过动态更新 <code>&lt;style&gt;</code> 标签实现快速刷新。</li>
</ul>
</li>
</ul>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul>
<li>Esbuild 的作用：<ul>
<li>Vite 使用 Esbuild 快速编译变化的模块（例如 TypeScript 或 JSX），生成新的 ESM 代码。</li>
<li>编译速度极快，通常在毫秒级别完成。</li>
</ul>
</li>
<li>增量更新：<ul>
<li>Vite 只处理变化的模块及其直接依赖，不会重新编译整个项目。</li>
</ul>
</li>
<li>浏览器缓存：<ul>
<li>未变化的模块直接使用浏览器缓存，减少网络请求。</li>
</ul>
</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Vite 为什么快？<ul>
<li>原生 ESM：开发模式下不打包，直接利用浏览器支持的 ESM 按需加载模块，启动速度快。</li>
<li>Esbuild 预编译：使用 Esbuild 快速编译 TypeScript&#x2F;JSX 和依赖，性能远超传统工具。</li>
<li>依赖预构建：将第三方依赖转换为 ESM 并合并，减少 HTTP 请求。</li>
<li>按需加载和缓存：只编译和加载需要的模块，充分利用浏览器缓存。</li>
<li>生产环境 Rollup：在生产模式下使用 Rollup 优化打包结果。</li>
</ul>
</li>
<li>热更新（HMR）如何实现？<ul>
<li>WebSocket 通信：服务器通过 WebSocket 通知客户端文件变化。</li>
<li>模块依赖图：跟踪模块依赖关系，确定受影响的模块。</li>
<li>按需更新：只编译和加载变化的模块，客户端动态替换。</li>
<li>React Fast Refresh：集成 React 特定优化，保留状态并只刷新受影响的组件。</li>
<li>边界处理：处理无法热更新的情况，必要时触发全页面刷新。</li>
<li>性能优化：利用 Esbuild 和增量更新机制，确保 HMR 快速高效。</li>
</ul>
</li>
</ul>
<h1 id="为什么选择-Vite？"><a href="#为什么选择-Vite？" class="headerlink" title="为什么选择 Vite？"></a>为什么选择 Vite？</h1><ul>
<li>开发体验：快速启动和热更新，显著提升开发效率。</li>
<li>现代性：基于 ESM，符合未来的 Web 开发趋势。</li>
<li>简单性：配置简单，插件生态强大，适合中小型项目。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HMR</tag>
        <tag>Vite</tag>
      </tags>
  </entry>
  <entry>
    <title>Understanding Node.js V8 Garbage Collection Mechanisms</title>
    <url>/2025/01/13/Understanding-Node-js-V8-Garbage-Collection-Mechanisms/</url>
    <content><![CDATA[<p>Node.js is built on Google’s V8 engine, and V8’s garbage collection mechanism is one of its core performance features. In this article, we’ll explore the three primary garbage collection algorithms used in V8: <code>Mark-Sweep</code>, <code>Mark-Compact</code>, and <code>Scavenge</code>, along with their working principles and application scenarios.</p>
<h1 id="V8’s-Memory-Partition-Model"><a href="#V8’s-Memory-Partition-Model" class="headerlink" title="V8’s Memory Partition Model"></a>V8’s Memory Partition Model</h1><p>Before diving into garbage collection algorithms, we need to understand V8’s memory partition model. V8 divides memory into two main regions:</p>
<h2 id="Young-Generation"><a href="#Young-Generation" class="headerlink" title="Young Generation"></a>Young Generation</h2><ul>
<li>Contains objects with short lifespans.</li>
<li>Typically small in size (e.g., a few MB).</li>
<li>Uses the Scavenge algorithm for garbage collection.</li>
</ul>
<h2 id="Old-Generation"><a href="#Old-Generation" class="headerlink" title="Old Generation"></a>Old Generation</h2><ul>
<li>Contains objects with longer lifespans.</li>
<li>Typically larger in size (e.g., hundreds of MB).</li>
<li>Uses the Mark-Sweep and Mark-Compact algorithms for garbage collection.</li>
</ul>
<span id="more"></span>

<h1 id="Scavenge-Algorithm"><a href="#Scavenge-Algorithm" class="headerlink" title="Scavenge Algorithm"></a>Scavenge Algorithm</h1><p>The <code>Scavenge algorithm</code> is a highly efficient garbage collection method used for young generation memory. Its core idea is copy-and-swap.</p>
<p><strong>How It Works</strong></p>
<ol>
<li><strong>Partitioning</strong>: The young generation is divided into two spaces: From-space and To-space.</li>
<li><strong>Copying</strong>:<ul>
<li>Active objects are copied from the From-space to the To-space.</li>
<li>Garbage objects (unreferenced objects) are discarded.</li>
</ul>
</li>
<li><strong>Swapping</strong>: After copying, the From-space and To-space swap roles.</li>
</ol>
<p><strong>Advantages</strong></p>
<ul>
<li>Efficient: Focuses only on active objects, skipping garbage objects.</li>
<li>Fast allocation: Reduces fragmentation through partitioning.</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Wasted space: Half of the memory is reserved for the To-space.</li>
<li>Unsuitable for large objects: Copying large objects increases overhead.</li>
</ul>
<h1 id="Mark-Sweep-Algorithm"><a href="#Mark-Sweep-Algorithm" class="headerlink" title="Mark-Sweep Algorithm"></a>Mark-Sweep Algorithm</h1><p>The <code>Mark-Sweep algorithm</code> is used for garbage collection in the old generation memory. Its core idea is mark-and-sweep.</p>
<p><strong>How It Works</strong></p>
<ol>
<li><strong>Marking</strong>: Starting from root objects, all reachable objects are marked.</li>
<li><strong>Sweeping</strong>: Unmarked objects are reclaimed.</li>
</ol>
<p><strong>Advantages</strong></p>
<ul>
<li>No extra space required: Unlike <code>Scavenge</code>, it doesn’t allocate additional memory.</li>
<li>Efficient: Suitable for long-lived objects.</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Memory fragmentation: Cleared memory may become fragmented into small blocks.</li>
</ul>
<h1 id="Mark-Compact-Algorithm"><a href="#Mark-Compact-Algorithm" class="headerlink" title="Mark-Compact Algorithm"></a>Mark-Compact Algorithm</h1><p>To optimize the memory fragmentation issue of the <code>Mark-Sweep</code> algorithm, V8 uses the <code>Mark-Compact</code> algorithm, which focuses on <strong>mark-and-compact</strong>.</p>
<p><strong>How It Works</strong></p>
<ol>
<li><strong>Marking</strong>: Same as the <code>Mark-Sweep</code> algorithm, marking all reachable objects.</li>
<li><strong>Compacting</strong>: Moves all live objects to one end of the memory, freeing up contiguous space.</li>
</ol>
<p><strong>Advantages</strong></p>
<ul>
<li>Eliminates fragmentation: Achieves memory compactness by moving objects.</li>
</ul>
<p><strong>Disadvantages</strong></p>
<ul>
<li>Higher overhead: Moving objects requires additional computation.</li>
</ul>
<h1 id="Comparison-of-the-Three-Algorithms"><a href="#Comparison-of-the-Three-Algorithms" class="headerlink" title="Comparison of the Three Algorithms"></a>Comparison of the Three Algorithms</h1><table>
<thead>
<tr>
<th align="center">Algorithm</th>
<th align="center">Scope</th>
<th align="center">Advantages</th>
<th align="center">Disadvantages</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Scavenge</td>
<td align="center">Young generation</td>
<td align="center">Efficient, fast allocation</td>
<td align="center">Wasted space, unsuitable for large objects</td>
</tr>
<tr>
<td align="center">Mark-Sweep</td>
<td align="center">Old generation</td>
<td align="center">No extra space required, efficient</td>
<td align="center">Memory fragmentation</td>
</tr>
<tr>
<td align="center">Mark-Compact</td>
<td align="center">Old generation</td>
<td align="center">Eliminates memory fragmentation</td>
<td align="center">Higher overhead</td>
</tr>
</tbody></table>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>V8’s garbage collection mechanism combines <code>Scavenge</code>, <code>Mark-Sweep</code>, and <code>Mark-Compact</code> algorithms to effectively balance performance and memory utilization. Understanding these algorithms can help developers optimize Node.js applications and avoid performance issues caused by garbage collection.</p>
<p>I hope this article helps you gain a deeper understanding of V8’s garbage collection mechanism. If you have any questions or additional insights, feel free to leave a comment!</p>
]]></content>
      <tags>
        <tag>Node.js</tag>
        <tag>V8</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue中对Array拓展的方法</title>
    <url>/2021/10/14/Vue%E4%B8%AD%E5%AF%B9Array%E6%8B%93%E5%B1%95%E7%9A%84%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过改写<code>[].__proto__</code>上的方法，实现对<code>Array</code>原生方法的拦截。</p>
<p>源码位置为 <code>/core/instance/observer/array.js</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// cache the original Array.prototype</span></span><br><span class="line"><span class="keyword">const</span> originalPrototype = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// create an object from original Array.prototype</span></span><br><span class="line"><span class="keyword">const</span> arrayMethods = <span class="title class_">Object</span>.<span class="title function_">create</span>(originalPrototype)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> methodsToPatch = [</span><br><span class="line">  <span class="string">&quot;push&quot;</span>,</span><br><span class="line">  <span class="string">&quot;pop&quot;</span>,</span><br><span class="line">  <span class="string">&quot;shift&quot;</span>,</span><br><span class="line">  <span class="string">&quot;unshift&quot;</span>,</span><br><span class="line">  <span class="string">&quot;splice&quot;</span>,</span><br><span class="line">  <span class="string">&quot;sort&quot;</span>,</span><br><span class="line">  <span class="string">&quot;reverse&quot;</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">methodsToPatch.<span class="title function_">forEach</span>(<span class="function">(<span class="params">method</span>) =&gt;</span> &#123;</span><br><span class="line">  arrayMethods[method] = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="comment">// use original Array methods to get the result</span></span><br><span class="line">    <span class="keyword">const</span> result = originalPrototype[method].<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// proxy here</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`catch <span class="subst">$&#123;method&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">a.<span class="property">__proto__</span> = arrayMethods</span><br><span class="line"></span><br><span class="line">a.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">a.<span class="title function_">reverse</span>()</span><br><span class="line">a.<span class="title function_">pop</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue总结（一）</title>
    <url>/2019/02/26/Vue%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h3 id="class-绑定"><a href="#class-绑定" class="headerlink" title=":class 绑定"></a>:class 绑定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1 :class=&quot;[&#x27;italic&#x27;, &#x27;red&#x27;, &#123;&#x27;active&#x27;: flag&#125;]&quot;&gt;Test H1 Message&lt;/h1&gt;</span><br><span class="line">    &lt;h1 :class=&quot;classObj&quot;&gt;Test H1 Message&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    flag: true,</span><br><span class="line">    classObj: &#123; red: true, thin: true, italic: true, active: false &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="style-绑定"><a href="#style-绑定" class="headerlink" title=":style 绑定"></a>:style 绑定</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1 :style=&quot;[styleObj, styleObj2]&quot;&gt;This is H1&lt;/h1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    styleObj: &#123;</span><br><span class="line">      color: &quot;red&quot;,</span><br><span class="line">      &quot;font-weight&quot;: &quot;280&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    styleObj2: &#123;</span><br><span class="line">      &quot;font-style&quot;: &quot;italic&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="preventDefault"><a href="#preventDefault" class="headerlink" title="preventDefault"></a>preventDefault</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot; @click=&quot;divHandler&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;click me&quot; @click.stop=&quot;btnHandler&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;http://github.io&quot; @click.prevent=&quot;linkClick&quot;&gt;link&lt;/a&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot; @click.capture=&quot;divHandler&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;click me&quot; @click.stop=&quot;btnHandler&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;inner&quot; @click.self=&quot;divHandler&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;click me&quot; @click.self=&quot;btnHandler&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;&#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            divHandler() &#123;</span><br><span class="line">                console.log(&#x27;inner div&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            btnHandler() &#123;</span><br><span class="line">                console.log(&#x27;btn click&#x27;)</span><br><span class="line">            &#125;,</span><br><span class="line">            linkClick() &#123;</span><br><span class="line">                console.log(&#x27;link click&#x27;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">  display: none !important;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div id=&quot;app&quot; v-cloak&gt;</span><br><span class="line">    &lt;p&gt;&#123; &#123; msg &#125; &#125;&lt;/p&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;msg&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &quot;ss&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;p v-for=&quot;item in list&quot;&gt;&#123; &#123; item.id &#125; &#125; --- &#123; &#123; item.name &#125; &#125;&lt;/p&gt;</span><br><span class="line">    &lt;p v-for=&quot;(value, key) in user&quot;&gt;&#123; &#123; key &#125; &#125; -- &#123; &#123; value &#125; &#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    list: [</span><br><span class="line">      &#123;</span><br><span class="line">        id: 1,</span><br><span class="line">        name: &quot;name1&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 2,</span><br><span class="line">        name: &quot;name2&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 3,</span><br><span class="line">        name: &quot;name3&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        id: 4,</span><br><span class="line">        name: &quot;name4&quot;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    user: &#123;</span><br><span class="line">      id: 1,</span><br><span class="line">      name: &quot;Hello world&quot;,</span><br><span class="line">      gender: &quot;male&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>eg:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;id&quot;&gt;Id:</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;id&quot;&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;label for=&quot;name&quot;&gt;Name:</span><br><span class="line">            &lt;input type=&quot;text&quot; v-model=&quot;name&quot;&gt;</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=&quot;button&quot; value=&quot;add&quot; @click=&quot;add&quot;&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p v-for=&quot;(item, index) in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;input type=&quot;checkbox&quot; name=&quot;&quot; id=&quot;&quot;&gt;&#123; &#123; item.id &#125; &#125; --- &#123; &#123; item.name &#125; &#125;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var vm = new Vue(&#123;</span><br><span class="line">        el: &#x27;#app&#x27;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: &#x27;&#x27;,</span><br><span class="line">            name: &#x27;&#x27;,</span><br><span class="line">            list: [&#123;</span><br><span class="line">                    id: 1,</span><br><span class="line">                    name: &#x27;孔子&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: 2,</span><br><span class="line">                    name: &#x27;孟子&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    id: 3,</span><br><span class="line">                    name: &#x27;韩非子&#x27;</span><br><span class="line">                &#125;,</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line">            add() &#123;</span><br><span class="line">                this.list.unshift(&#123;</span><br><span class="line">                    id: this.id,</span><br><span class="line">                    name: this.name</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="v-if"><a href="#v-if" class="headerlink" title="v-if"></a>v-if</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;toggle&quot; @click=&quot;flag = !flag&quot;&gt;</span><br><span class="line">    &lt;h3 v-if=&quot;flag&quot;&gt;V-IF&lt;/h3&gt;</span><br><span class="line">    &lt;h3 v-show=&quot;flag&quot;&gt;V-SHOW&lt;/h3&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    flag: true,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript 初探</title>
    <url>/2020/02/25/TypeScript-%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<h3 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h3><ul>
<li>boolean:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">done</span>: <span class="built_in">boolean</span> = <span class="literal">true</span></span><br></pre></td></tr></table></figure></li>
<li>number:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">count</span>: <span class="built_in">number</span> = <span class="number">20</span></span><br></pre></td></tr></table></figure></li>
<li>string:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;Edward Wang&quot;</span></span><br></pre></td></tr></table></figure></li>
<li>array:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list1</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list2</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
<li>tuple:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>] = [<span class="string">&quot;test&quot;</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure></li>
<li>enum:<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="variable constant_">NUMBER</span> &#123;</span><br><span class="line">  <span class="variable constant_">ONE</span>,</span><br><span class="line">  <span class="variable constant_">TWO</span>,</span><br><span class="line">  <span class="variable constant_">THREE</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> a = <span class="variable constant_">NUMBER</span>.<span class="property">TWO</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">title</span>: <span class="built_in">string</span> = <span class="variable constant_">NUMBER</span>[<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
</ul>
<span id="more"></span>

<ul>
<li><p>any:</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: <span class="built_in">any</span> = <span class="number">4</span></span><br><span class="line">x = <span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">any</span>[] = [<span class="number">1</span>, <span class="literal">true</span>, <span class="string">&quot;string&quot;</span>]</span><br></pre></td></tr></table></figure>
</li>
<li><p>void:<br>表示没有返回类型，只能被赋予 null 和 undefined。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">warning</span>(<span class="params"></span>): <span class="built_in">void</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;warning&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span></span><br></pre></td></tr></table></figure></li>
<li><p>null &amp; undefined:<br>默认情况下 null 和 undefined 是所有类型的子类型。如果使用了<code>--strictNullChecks</code>标记,null、undefined、void 只能赋值给他们自己。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure></li>
<li><p>never:<br>表示永不存在值的类型。</p>
<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>object:<br>除 number、string、boolean、symbol、null 或 undefined 之外的类型。</p>
</li>
</ul>
<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><ul>
<li>&lt;&gt;断言<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">text</span>: <span class="built_in">any</span> = <span class="string">&quot;some text&quot;</span></span><br><span class="line"><span class="keyword">let</span> strLength = (&lt;<span class="built_in">string</span>&gt;text).<span class="property">length</span></span><br></pre></td></tr></table></figure></li>
<li>as 断言<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">text</span>: <span class="built_in">any</span> = <span class="string">&quot;some text&quot;</span></span><br><span class="line"><span class="keyword">let</span> strLength = (text <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>TypeScript</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue总结（三）</title>
    <url>/2019/02/26/Vue%E6%80%BB%E7%BB%93%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;+</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;=</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &quot;&quot;,</span><br><span class="line">    lastName: &quot;&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    // 使用计算属性不需要()</span><br><span class="line">    // 只要此function中使用的任何数据发生变化，就会重新计算值</span><br><span class="line">    fullName: function () &#123;</span><br><span class="line">      return this.firstName + &quot;-&quot; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot; @keyup=&quot;getFullName&quot;&gt;+</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot; @keyup=&quot;getFullName&quot;&gt;=</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt;+</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt;=</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;fullName&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: &quot;&quot;,</span><br><span class="line">    lastName: &quot;&quot;,</span><br><span class="line">    fullName: &quot;&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    getFullName() &#123;</span><br><span class="line">      this.fullName = this.firstName + &quot;-&quot; + this.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: function (newValue, oldValue) &#123;</span><br><span class="line">      this.fullName = newValue + &quot;-&quot; + this.lastName</span><br><span class="line">      console.log(oldValue)</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: function (newValue) &#123;</span><br><span class="line">      this.fullName = this.firstName + &quot;-&quot; + newValue</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="全局组件"><a href="#全局组件" class="headerlink" title="全局组件"></a>全局组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;my-component&gt;&lt;/my-component&gt;</span><br><span class="line">    &lt;my-component2&gt;&lt;/my-component2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;tmp1&quot;&gt;</span><br><span class="line">  &lt;h1&gt;template 1&lt;/h1&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var com1 = Vue.extend(&#123;</span><br><span class="line">  template: `&lt;h3&gt;Vue.extend&lt;/h3&gt;`,</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&quot;my-component2&quot;, &#123;</span><br><span class="line">  template: &quot;#tmp1&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&quot;my-component&quot;, com1)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="私有组件"><a href="#私有组件" class="headerlink" title="私有组件"></a>私有组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;login&gt;&lt;/login&gt;</span><br><span class="line">    &lt;test-component&gt;&lt;/test-component&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;tmp1&quot;&gt;</span><br><span class="line">  &lt;div&gt;Message&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    login: &#123;</span><br><span class="line">      template: &quot;&lt;h1&gt;private component&lt;/h1&gt;&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">    testComponent: &#123;</span><br><span class="line">      template: &quot;#tmp1&quot;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;com1 v-bind:parent-msg=&quot;msg&quot;&gt;&lt;/com1&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &quot;parent message&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    com1: &#123;</span><br><span class="line">      props: [&quot;parentMsg&quot;], // 父组件的数据 readonly</span><br><span class="line">      template: &#x27;&lt;h1 @click=&quot;change&quot;&gt;fff --- &#123; &#123; parentMsg &#125; &#125;&lt;/h1&gt;&#x27;,</span><br><span class="line">      data() &#123;</span><br><span class="line">        // 组件私有的，ajax请求的数据可以放在组件的data上 readwrite</span><br><span class="line">        return &#123;</span><br><span class="line">          title: &quot;abd&quot;,</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        change() &#123;</span><br><span class="line">          this.parentMsg = &quot;changed&quot;</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件传递-method"><a href="#组件传递-method" class="headerlink" title="组件传递 method"></a>组件传递 method</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;com2 v-on:func=&quot;show&quot;&gt;&lt;/com2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;child template&lt;/h1&gt;</span><br><span class="line">    &lt;input type=&quot;button&quot; value=&quot;child button&quot; v-on:click=&quot;myClick&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var com2 = &#123;</span><br><span class="line">  template: &quot;#tmpl&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      childMsg: &#123;</span><br><span class="line">        name: &quot;Edward&quot;,</span><br><span class="line">        age: 3,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    myClick() &#123;</span><br><span class="line">      console.log(&quot;myClick called&quot;)</span><br><span class="line">      this.$emit(&quot;func&quot;, this.childMsg)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    dataFromChild: null,</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    com2,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    show(data) &#123;</span><br><span class="line">      this.dataFromChild = data // 子组件向父组件传值</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="组件切换"><a href="#组件切换" class="headerlink" title="组件切换"></a>组件切换</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; v-on:click.prevent=&quot;flag = true&quot;&gt;Login in&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; v-on:click.prevent=&quot;flag = false&quot;&gt;Sign in&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">    &lt;login v-if=&quot;flag&quot;&gt;&lt;/login&gt;</span><br><span class="line">    &lt;register v-else&gt;&lt;/register&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;a href=&quot;&quot; v-on:click.prevent=&quot;comName = &#x27;login&#x27;&quot;&gt;Login in&lt;/a&gt;</span><br><span class="line">    &lt;a href=&quot;&quot; v-on:click.prevent=&quot;comName = &#x27;register&#x27;&quot;&gt;Sign in&lt;/a&gt;</span><br><span class="line">    &lt;component :is=&quot;comName&quot;&gt;&lt;/component&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">Vue.component(&quot;login&quot;, &#123;</span><br><span class="line">  template: &quot;&lt;h3&gt;Login&lt;/h3&gt;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(&quot;register&quot;, &#123;</span><br><span class="line">  template: &quot;&lt;h3&gt;Register&lt;/h3&gt;&quot;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    flag: true,</span><br><span class="line">    comName: &quot;login&quot;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- tag改变展示元素 --&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login&quot; tag=&quot;span&quot;&gt;Login&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt;</span><br><span class="line">    &lt;transition mode=&quot;out-in&quot;&gt;</span><br><span class="line">        &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">    &lt;/transition&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var login = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;login&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line">var register = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;register&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line">const routerObj = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    // 路由匹配规则 path, component必须参数</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/&quot;,</span><br><span class="line">      redirect: &quot;/login&quot;,</span><br><span class="line">    &#125;, // redirect 重定向</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/login&quot;,</span><br><span class="line">      component: login,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/register&quot;,</span><br><span class="line">      component: register,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">  linkActiveClass: &quot;myactive&quot;,</span><br><span class="line">&#125;)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  router: routerObj,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/login?id=10&amp;name=zhangsan&quot;&gt;Login&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/register&quot;&gt;Register&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var login = &#123;</span><br><span class="line">  template:</span><br><span class="line">    &quot;&lt;h1&gt;Login --- &#123; &#123; $route.query.id &#125; &#125; --- &#123; &#123; $route.query.name &#125; &#125;&lt;/h1&gt;&quot;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &quot;123&quot;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    // 组件的生命周期</span><br><span class="line">    console.log(this.$route.query.id)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">var register = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;Register&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/login&quot;,</span><br><span class="line">      component: login,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/register&quot;,</span><br><span class="line">      component: register,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  router,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="路由嵌套"><a href="#路由嵌套" class="headerlink" title="路由嵌套"></a>路由嵌套</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;router-link to=&quot;/account&quot;&gt;Account&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;template id=&quot;tmpl&quot;&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h1&gt;Account component&lt;/h1&gt;</span><br><span class="line">    &lt;router-link to=&quot;/account/login&quot;&gt;Login&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=&quot;/account/register&quot;&gt;Register&lt;/router-link&gt;</span><br><span class="line">    &lt;router-view&gt;&lt;/router-view&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var account = &#123;</span><br><span class="line">  template: &quot;#tmpl&quot;,</span><br><span class="line">&#125;</span><br><span class="line">var login = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;Login&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line">var register = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;Register&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &quot;/account&quot;,</span><br><span class="line">      component: account,</span><br><span class="line">      children: [</span><br><span class="line">        // 子路由path不带 &#x27;/&#x27; 否则以根目录还是匹配</span><br><span class="line">        &#123;</span><br><span class="line">          path: &quot;login&quot;,</span><br><span class="line">          component: login,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: &quot;register&quot;,</span><br><span class="line">          component: register,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  router,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="render-渲染组件"><a href="#render-渲染组件" class="headerlink" title="render 渲染组件"></a>render 渲染组件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div id=&quot;app&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var login = &#123;</span><br><span class="line">  template: &quot;&lt;h1&gt;Login&lt;/h1&gt;&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  el: &quot;#app&quot;,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  render: function (createElements) &#123;</span><br><span class="line">    // 将指定的模板渲染成 html</span><br><span class="line">    return createElements(login) // return 的结果会替换 el 指定的容器</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue总结（二）</title>
    <url>/2019/02/26/Vue%E6%80%BB%E7%BB%93%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    <content><![CDATA[<h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;msgFormat&quot;</span>, <span class="keyword">function</span> (<span class="params">msg, arg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> msg.<span class="title function_">replace</span>(<span class="regexp">/test/g</span>, arg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">filter</span>(<span class="string">&quot;test&quot;</span>, <span class="keyword">function</span> (<span class="params">msg</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> msg + <span class="string">&quot;====&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123; <span class="attr">msg</span>: <span class="string">&quot;test1 test2 test3&quot;</span> &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="privateFilter"><a href="#privateFilter" class="headerlink" title="privateFilter"></a>privateFilter</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">dt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">dateFormate</span>: <span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr)</span><br><span class="line">      <span class="keyword">var</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">      <span class="keyword">var</span> m = dt.<span class="title function_">getMonth</span>() + <span class="number">1</span></span><br><span class="line">      <span class="keyword">var</span> d = dt.<span class="title function_">getDate</span>()</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pattern.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;yyyy-mm-dd&quot;</span>) <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> hh = dt.<span class="title function_">getHours</span>()</span><br><span class="line">        <span class="keyword">var</span> mm = dt.<span class="title function_">getMinutes</span>()</span><br><span class="line">        <span class="keyword">var</span> ss = dt.<span class="title function_">getSeconds</span>()</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>** eg: **</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">dt</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">filters</span>: &#123;</span><br><span class="line">    <span class="attr">dateFormate</span>: <span class="keyword">function</span> (<span class="params">dateStr, pattern = <span class="string">&quot;&quot;</span></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> dt = <span class="keyword">new</span> <span class="title class_">Date</span>(dateStr)</span><br><span class="line">      <span class="keyword">var</span> y = dt.<span class="title function_">getFullYear</span>()</span><br><span class="line">      <span class="keyword">var</span> m = (dt.<span class="title function_">getMonth</span>() + <span class="number">1</span>).<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">      <span class="keyword">var</span> d = dt.<span class="title function_">getDate</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (pattern.<span class="title function_">toLowerCase</span>() == <span class="string">&quot;yyyy-mm-dd&quot;</span>) <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> hh = dt.<span class="title function_">getHours</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> mm = dt.<span class="title function_">getMinutes</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">var</span> ss = dt.<span class="title function_">getSeconds</span>().<span class="title function_">toString</span>().<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span> <span class="subst">$&#123;hh&#125;</span>:<span class="subst">$&#123;mm&#125;</span>:<span class="subst">$&#123;ss&#125;</span>`</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Lifecycle"><a href="#Lifecycle" class="headerlink" title="Lifecycle"></a>Lifecycle</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">msg</span>: <span class="string">&quot;ok&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">show</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run show&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// data 和 methods 数据都未初始化</span></span><br><span class="line">    <span class="comment">// console.log(this.msg)</span></span><br><span class="line">    <span class="comment">// this.show()</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">show</span>()</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeMount</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 编译好了模板，还未挂载到页面中</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;h3&quot;</span>).<span class="property">innerText</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 模板已经挂载到页面中</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;h3&quot;</span>).<span class="property">innerText</span>)</span><br><span class="line">    <span class="comment">// mounted 之后表示 Vue 实例已经被完全创建好了</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeUpdate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据改变，页面未变</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;h3&quot;</span>).<span class="property">innerText</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 数据和页面都改变了</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// data 和 methods 都可以使用</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">destroyed</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 完全销毁</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>图像位移</title>
    <url>/2020/06/18/WebGL%E5%9B%BE%E5%83%8F%E4%BD%8D%E7%A7%BB/</url>
    <content><![CDATA[<h3 id="位移原理"><a href="#位移原理" class="headerlink" title="位移原理"></a>位移原理</h3><p>与在普通的坐标系中一样，只需在需要位移的坐标位置加入相应的矢量即可。<br><code>(x1, y1, z1, w1) + (x2, y2, z2, w2) -&gt; (x1 + x2, y1 + y2, z1 + z2, w1 + w2)</code><br>平移矩阵：</p>
<p>$$<br>\begin{bmatrix}<br>    x’ \<br>    y’ \<br>    z’ \<br>    1<br>\end{bmatrix} &#x3D;<br>\begin{bmatrix}<br>    1 &amp; 0 &amp; 0 &amp; Tx \<br>    0 &amp; 1 &amp; 0 &amp; Ty \<br>    0 &amp; 0 &amp; 1 &amp; Tz \<br>    0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix} ×<br>\begin{bmatrix}<br>    x \<br>    y \<br>    z \<br>    1 \<br>\end{bmatrix}<br>$$</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// position = P + ▲P</span></span><br><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform vec4 u_Translation;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = a_Position + u_Translation;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Displacement</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tx</span> = <span class="number">0.4</span>,</span><br><span class="line">  <span class="title class_">Ty</span> = -<span class="number">0.2</span>,</span><br><span class="line">  <span class="title class_">Tz</span> = <span class="number">0.3</span></span><br><span class="line"><span class="title class_">Tw</span> = <span class="number">0.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#canvas&#x27;</span>).<span class="title function_">getContext</span>(<span class="string">&#x27;webgl&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> u_Translation = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&#x27;u_Translation&#x27;</span>)</span><br><span class="line">  gl.<span class="title function_">uniform4f</span>(u_Translation, <span class="title class_">Tx</span>, <span class="title class_">Ty</span>, <span class="title class_">Tz</span>, <span class="title class_">Tw</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initVertexBuffers</span>(<span class="params">gl</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([<span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>])</span><br><span class="line">  <span class="keyword">let</span> n = vertices.<span class="property">length</span> / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> vertexBuffer = gl.<span class="title function_">createBuffer</span>()</span><br><span class="line">  <span class="keyword">if</span> (!vertexBuffer) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;failed to create buffer&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">bindBuffer</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertexBuffer)</span><br><span class="line">  gl.<span class="title function_">bufferData</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertices, gl.<span class="property">STATIC_DRAW</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&#x27;a_Position&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Position, <span class="number">2</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Position)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>使用矩阵进行变换</title>
    <url>/2020/06/19/WebGL%E4%BD%BF%E7%94%A8%E7%9F%A9%E9%98%B5%E8%BF%9B%E8%A1%8C%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<p><strong>WebGL 中的矩阵是列主序的。</strong></p>
<h3 id="平移变换"><a href="#平移变换" class="headerlink" title="平移变换"></a>平移变换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform mat4 u_xFormMatrix;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = u_xFormMatrix * a_Position;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Tx</span> = <span class="number">0.5</span>,</span><br><span class="line">  <span class="title class_">Ty</span> = <span class="number">0.2</span>,</span><br><span class="line">  <span class="title class_">Tz</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) reutrn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> xFormMatrix = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="number">1.0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1.0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1.0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Tx</span>,</span><br><span class="line">    <span class="title class_">Ty</span>,</span><br><span class="line">    <span class="title class_">Tz</span>,</span><br><span class="line">    <span class="number">1.0</span>,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">let</span> u_xFormMatrix = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;u_xFormMatrix&quot;</span>)</span><br><span class="line">  gl.<span class="title function_">uniformMatrix4fv</span>(u_xFormMatrix, <span class="literal">false</span>, xFormMatrix)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="旋转变换"><a href="#旋转变换" class="headerlink" title="旋转变换"></a>旋转变换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform mat4 u_xFormMatrix;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = u_xFormMatrix * a_Position;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">ANGLE</span> = <span class="number">30</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) reutrn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> radian = (<span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable constant_">ANGLE</span>) / <span class="number">180.0</span></span><br><span class="line">  <span class="keyword">let</span> sinB = <span class="title class_">Math</span>.<span class="title function_">sin</span>(radian),</span><br><span class="line">    cosB = <span class="title class_">Math</span>.<span class="title function_">cos</span>(radian)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> xFormMatrix = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="comment">// column major order</span></span><br><span class="line">    cosB,</span><br><span class="line">    sinB,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    -sinB,</span><br><span class="line">    cosB,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">let</span> u_xFormMatrix = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;u_xFormMatrix&quot;</span>)</span><br><span class="line">  gl.<span class="title function_">uniformMatrix4fv</span>(u_xFormMatrix, <span class="literal">false</span>, xFormMatrix)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缩放变换"><a href="#缩放变换" class="headerlink" title="缩放变换"></a>缩放变换</h3><p>缩放矩阵：</p>
<p>$$<br>\begin{bmatrix}<br>    x’ \<br>    y’ \<br>    z’ \<br>    1 \<br>\end{bmatrix} &#x3D;<br>\begin{bmatrix}<br>    Sx &amp; 0 &amp; 0 &amp; 0 \<br>    0 &amp; Sy &amp; 0 &amp; 0 \<br>    0 &amp; 0 &amp; Sz &amp; 0 \<br>    0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix} ×<br>\begin{bmatrix}<br>    x \<br>    y \<br>    z \<br>    1 \<br>\end{bmatrix}<br>$$</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform mat4 u_xFormMatrix;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = u_xFormMatrix * a_Position;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Sx</span> = <span class="number">1.0</span>,</span><br><span class="line">  <span class="title class_">Sy</span> = <span class="number">1.5</span>,</span><br><span class="line">  <span class="title class_">Sz</span> = <span class="number">1.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) reutrn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> xFormMatrix = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="title class_">Sx</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Sy</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="title class_">Sz</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">let</span> u_xFormMatrix = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;u_xFormMatrix&quot;</span>)</span><br><span class="line">  gl.<span class="title function_">uniformMatrix4fv</span>(u_xFormMatrix, <span class="literal">false</span>, xFormMatrix)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>WebGL制作动画</title>
    <url>/2020/06/20/WebGL%E5%88%B6%E4%BD%9C%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h3 id="绘制流程"><a href="#绘制流程" class="headerlink" title="绘制流程"></a>绘制流程</h3><ol>
<li>计算变换后的位置坐标。</li>
<li>清空画板。</li>
<li>绘制</li>
<li>循环 1-3 操作。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>使用库函数简化数学计算</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform mat4 u_ModelMatrix;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = u_ModelMatrix * a_Position;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(0.0, 1.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) reutrn</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">rotating</span>(gl, n, <span class="number">360</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">rotating</span> = (<span class="params">gl, n, ANGLE_STEP = <span class="number">30</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> currentAngle = <span class="number">0</span></span><br><span class="line">  <span class="keyword">let</span> modelMatrix = <span class="keyword">new</span> <span class="title class_">Matrix4</span>()</span><br><span class="line">  <span class="keyword">let</span> u_ModelMatrix = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;u_ModelMatrix&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> tick = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    currentAngle = <span class="title function_">animate</span>(currentAngle, <span class="variable constant_">ANGLE_STEP</span>)</span><br><span class="line">    <span class="title function_">draw</span>(gl, n, currentAngle, modelMatrix, u_ModelMatrix)</span><br><span class="line">    <span class="title function_">requestAnimationFrame</span>(tick)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">tick</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">draw</span> = (<span class="params">gl, n, currentAngle, modelMatrix, u_ModelMatrix</span>) =&gt; &#123;</span><br><span class="line">  modelMatrix.<span class="title function_">setRotate</span>(currentAngle, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">// Set rotation matrix.</span></span><br><span class="line">  <span class="comment">// modelMatrix.translate(0.5, 0, 0);</span></span><br><span class="line">  gl.<span class="title function_">uniformMatrix4fv</span>(u_ModelMatrix, <span class="literal">false</span>, modelMatrix.<span class="property">elements</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>) <span class="comment">// Clear canvas.</span></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n) <span class="comment">// Draw triangle.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g_last = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the new angle.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> currentAngle &#123;number&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ANGLE_STEP &#123;number&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">number</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">animate</span> = (<span class="params">currentAngle, ANGLE_STEP</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> now = <span class="title class_">Date</span>.<span class="title function_">now</span>()</span><br><span class="line">  <span class="keyword">let</span> temp = now - g_last</span><br><span class="line">  g_last = now</span><br><span class="line">  <span class="keyword">return</span> (currentAngle + (<span class="variable constant_">ANGLE_STEP</span> * temp) / <span class="number">1000</span>) % <span class="number">360</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>绘制不同颜色</title>
    <url>/2020/06/22/WebGL%E7%BB%98%E5%88%B6%E4%B8%8D%E5%90%8C%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<h3 id="绘制过程"><a href="#绘制过程" class="headerlink" title="绘制过程"></a>绘制过程</h3><ol>
<li>执行 Vertex Shader，配置顶点。</li>
<li>调用<code>gl.drawArrays()</code>，装配图形。</li>
<li>光栅化，将图形转换为 Fragment。</li>
<li>执行 Fragment Shader。</li>
</ol>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p><strong>使用<code>varying</code>标识符</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    attribute vec4 a_Color;</span></span><br><span class="line"><span class="string">    varying vec4 v_Color;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = a_Position;</span></span><br><span class="line"><span class="string">        gl_PointSize = 10.0;</span></span><br><span class="line"><span class="string">        v_Color = a_Color;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    precision mediump float;</span></span><br><span class="line"><span class="string">    varying vec4 v_Color;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = v_Color;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">main</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// gl.drawArrays(gl.LINE_LOOP, 0, n);</span></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">initVertexBuffers</span> = (<span class="params">gl</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> verticesColor = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="comment">// [x, y, r, g, b]</span></span><br><span class="line">    <span class="number">0</span>, <span class="number">0.5</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">let</span> n = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> vertexColorBuffer = gl.<span class="title function_">createBuffer</span>()</span><br><span class="line">  <span class="keyword">if</span> (!vertexColorBuffer) <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  gl.<span class="title function_">bindBuffer</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertexColorBuffer)</span><br><span class="line">  gl.<span class="title function_">bufferData</span>(gl.<span class="property">ARRAY_BUFFER</span>, verticesColor, gl.<span class="property">STATIC_DRAW</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="variable constant_">SIZE</span> = verticesColor.<span class="property">BYTES_PER_ELEMENT</span></span><br><span class="line">  <span class="keyword">let</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;a_Position&quot;</span>)</span><br><span class="line">  <span class="keyword">let</span> a_Color = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;a_Color&quot;</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Position, <span class="number">2</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="variable constant_">SIZE</span> * <span class="number">5</span>, <span class="number">0</span>)</span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Position)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Color, <span class="number">3</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="variable constant_">SIZE</span> * <span class="number">5</span>, <span class="variable constant_">SIZE</span> * <span class="number">2</span>)</span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Color)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows VL 激活</title>
    <url>/2021/11/12/Windows-VL-%E6%BF%80%E6%B4%BB/</url>
    <content><![CDATA[<h3 id="激活-Windows"><a href="#激活-Windows" class="headerlink" title="激活 Windows"></a>激活 Windows</h3><ol>
<li>查看 OS 版本：<ul>
<li><code>run.exe</code>: <code>slmgr.vbs -dlv</code>，查看产品密钥通道。</li>
<li>OEM：出厂版本</li>
<li>Retail：零售版本</li>
<li>VL(Vol)：批量激活版本</li>
</ul>
</li>
<li>只有 VL 版本可以激活。</li>
<li>使用 cmd：<code>slmgr /skms kms.03k.org</code>，把<code>skms</code>地址设置为 <code>kms.03k.org</code></li>
<li><code>slmgr /ato</code>，手动激活</li>
</ol>
<h3 id="激活-Office"><a href="#激活-Office" class="headerlink" title="激活 Office"></a>激活 Office</h3><p><strong>Office 必须是 VL 版本</strong></p>
<ol>
<li>进入 <code>Office</code> 安装地址，找到 <code>OSPP.VBS</code></li>
<li><code>cmd</code>：<code>cscript ospp.vbs /sethst:kms.03k.org</code>，指定<code>kms</code>服务地址</li>
<li><code>cscript ospp.vbs /act</code>，手动激活</li>
</ol>
<p>工具网站：<code>office tool plus</code></p>
]]></content>
      <tags>
        <tag>Windows</tag>
        <tag>Office</tag>
      </tags>
  </entry>
  <entry>
    <title>What is OpenID?</title>
    <url>/2024/11/07/What-is-OpenID/</url>
    <content><![CDATA[<h1 id="What-is-OpenID"><a href="#What-is-OpenID" class="headerlink" title="What is OpenID?"></a>What is OpenID?</h1><p>OpenID 是一种用于标识用户身份的协议，它允许用户在多个网站上使用同一个用户名和密码。它是由一组标准定义的，包括一个身份提供者（IdP）和一个身份验证服务（AS）。IdP 是网站或服务，它提供用户的身份信息，并将其发送给 AS。AS 是另一个网站或服务，它验证 IdP 发送的身份信息，并确认用户的身份。</p>
<h1 id="OpenID-工作流程"><a href="#OpenID-工作流程" class="headerlink" title="OpenID 工作流程"></a>OpenID 工作流程</h1><ol>
<li>用户选择 OpenID 提供商: 比如 Google&#x2F;Tencent 或其他支持 OpenID 的服务来管理他们的身份。</li>
<li>用户访问应用网站，点击登录按钮。</li>
<li>重定向到 OpenID 提供商，验证用户身份。</li>
<li>用户认证成功后，OpenID 提供商将用户信息发送给应用网站。</li>
<li>应用网站验证用户信息，确认用户身份。</li>
<li>应用网站允许用户访问受保护的资源。</li>
</ol>
<span id="more"></span>

<h1 id="OpenID-特点"><a href="#OpenID-特点" class="headerlink" title="OpenID 特点"></a>OpenID 特点</h1><ul>
<li>去中心化：OpenID 不依赖于任何中心化的身份提供者，用户可以选择自己喜欢的提供商。</li>
<li>账户控制：用户可以选择自己喜欢的 OpenID 提供商，而不需要在多个网站上使用同一个用户名和密码。</li>
<li>账户管理：通过一个 OpenID 来访问多个网站，简化了账户管理。</li>
<li>安全性：OpenID 提供商使用 HTTPS 和其他安全技术来确保用户信息的安全。</li>
</ul>
<h1 id="OpenID-和-OAuth-的区别"><a href="#OpenID-和-OAuth-的区别" class="headerlink" title="OpenID 和 OAuth 的区别"></a>OpenID 和 OAuth 的区别</h1><ul>
<li>OpenID 专注于用户身份验证。</li>
<li>OAuth 专注于授权，用于允许应用程序在用户的许可下访问用户的资源，而不需要暴露用户的密码。</li>
</ul>
<p>尽管 OpenID 很流行，但随着技术的演进，OAuth2.0 和 OpenID Connect 已经成为主流的身份验证协议。</p>
<h1 id="OpenID-Connect"><a href="#OpenID-Connect" class="headerlink" title="OpenID Connect"></a>OpenID Connect</h1><p>OpenID Connect 是 OAuth2.0 的一部分，它在 OAuth2.0 的基础上增加了身份认证的能力。它定义了如何向 OAuth2.0 服务器请求用户的身份信息，并验证用户的身份。</p>
<p>OpenID Connect 包括以下标准：</p>
<ul>
<li>OAuth2.0 授权框架：定义了如何向 OAuth2.0 服务器请求用户的授权。</li>
<li>OpenID Connect 发现：定义了如何发现 OpenID 提供商的配置信息。</li>
<li>OpenID Connect 注册：定义了如何注册 OpenID 提供商。</li>
<li>OpenID Connect 身份验证：定义了如何向 OpenID 提供商请求用户的身份信息。</li>
<li>OpenID Connect 回话管理：定义了如何管理用户的会话。</li>
<li>OpenID Connect 跨域身份验证：定义了如何跨域验证用户的身份信息。</li>
</ul>
<h1 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h1><ul>
<li>单点登录（Single Sign-On）：用户只需要登录一次，就可以访问多个网站。</li>
<li>跨域身份验证（Cross-domain authentication）：用户可以在不同网站上使用同一个用户名和密码。</li>
<li>第三方登录（Third-party login）：用户可以使用第三方账号登录网站。</li>
</ul>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>const</title>
    <url>/2018/08/10/const/</url>
    <content><![CDATA[<h3 id="一旦声明，值不可变"><a href="#一旦声明，值不可变" class="headerlink" title="一旦声明，值不可变"></a>一旦声明，值不可变</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="variable constant_">PI</span> = <span class="number">3</span> <span class="comment">//TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>

<p>只声明不赋值也会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo; <span class="comment">//SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<h3 id="实质为变量指向的内存地址不可变动"><a href="#实质为变量指向的内存地址不可变动" class="headerlink" title="实质为变量指向的内存地址不可变动"></a>实质为变量指向的内存地址不可变动</h3><p>const 只能保证这个指针是固定的，不能控制数据结构的变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;</span><br><span class="line">foo.<span class="property">prop</span> = <span class="number">123</span> <span class="comment">//Success</span></span><br><span class="line">foo = &#123;&#125; <span class="comment">//TypeError: &#x27;foo&#x27; is read-only</span></span><br></pre></td></tr></table></figure>

<h3 id="对象冻结方法"><a href="#对象冻结方法" class="headerlink" title="对象冻结方法"></a>对象冻结方法</h3><p>使用 Object.freeze 函数，冻结对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;&#125;)</span><br></pre></td></tr></table></figure>

<p>冻结属性的函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">makeConstant</span> = (<span class="params">obj</span>) =&gt; &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">freeze</span>(obj)</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function">(<span class="params">key, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">makeConstant</span>(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>data自定义数据</title>
    <url>/2018/08/15/data%E8%87%AA%E5%AE%9A%E4%B9%89%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>data 自定义数据在 query、mobile 常用。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">data-test</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">data-test-last</span>=<span class="string">&quot;world&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">dataset</span>.<span class="property">test</span> <span class="comment">//&#x27;hello&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">dataset</span>.<span class="property">testLast</span> <span class="comment">//&#x27;world&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>绘制多个点</title>
    <url>/2020/06/18/WebGL%E7%BB%98%E5%88%B6%E5%A4%9A%E4%B8%AA%E7%82%B9/</url>
    <content><![CDATA[<h3 id="绘制步骤"><a href="#绘制步骤" class="headerlink" title="绘制步骤"></a>绘制步骤</h3><ol>
<li>创建顶点数组。</li>
<li>创建一个 Buffer。</li>
<li>将 WebGL 的 ARRAY_BUFFER 指向所创建的 Buffer。</li>
<li>将顶点数组赋值到 Buffer 中。</li>
<li>将 Buffer 分配给 Vertex Shader 中的 Attribute。</li>
<li>让 Vertex Shader 访问 Buffer。</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = a_Position;</span></span><br><span class="line"><span class="string">        gl_PointSize = 5.0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed to set positions&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">POINTS</span>, <span class="number">0</span>, n) <span class="comment">// (type, first, count = n)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initVertexBuffers</span>(<span class="params">gl</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> vertices = <span class="keyword">new</span> <span class="title class_">Float32Array</span>([</span><br><span class="line">    <span class="comment">// Create points array.</span></span><br><span class="line">    <span class="number">0.0</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>, -<span class="number">0.5</span>, <span class="number">0.5</span>, -<span class="number">0.5</span>,</span><br><span class="line">  ])</span><br><span class="line">  <span class="keyword">let</span> n = vertices.<span class="property">length</span> / <span class="number">2</span> <span class="comment">// Compute the n.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> vertexBuffer = gl.<span class="title function_">createBuffer</span>() <span class="comment">// Create buffer.</span></span><br><span class="line">  <span class="keyword">if</span> (!vertexBuffer) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed to create buffer&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">bindBuffer</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertexBuffer) <span class="comment">// Bind buffer.</span></span><br><span class="line">  gl.<span class="title function_">bufferData</span>(gl.<span class="property">ARRAY_BUFFER</span>, vertices, gl.<span class="property">STATIC_DRAW</span>) <span class="comment">// Draw data into buffer.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;a_Position&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// size = 2 because of the [x, y] components</span></span><br><span class="line">  gl.<span class="title function_">vertexAttribPointer</span>(a_Position, <span class="number">2</span>, gl.<span class="property">FLOAT</span>, <span class="literal">false</span>, <span class="number">0</span>, <span class="number">0</span>) <span class="comment">// Set data into &#x27;a_Position&#x27;.</span></span><br><span class="line">  gl.<span class="title function_">enableVertexAttribArray</span>(a_Position) <span class="comment">// Link attribute and Buffer.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> n</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>document.cookie</title>
    <url>/2019/05/06/document-cookie/</url>
    <content><![CDATA[<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * set the cookie</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">value</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Number</span>&#125; <span class="variable">day</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">setCookie</span> = (<span class="params">name, value, day</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line">  date.<span class="title function_">setDate</span>(date.<span class="title function_">getDate</span>() + day)</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">cookie</span> = name + <span class="string">&quot;=&quot;</span> + value + <span class="string">&quot;;expires=&quot;</span> + date</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get the cookie by name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">String</span>&#125; <span class="variable">name</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">getCookie</span> = (<span class="params">name</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> str = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;; &quot;</span>).<span class="title function_">filter</span>(<span class="function">(<span class="params">i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> result = i.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> result[<span class="number">0</span>] == name</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">return</span> str.<span class="property">length</span> ? str[<span class="number">0</span>].<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>)[<span class="number">1</span>] : <span class="string">&quot;&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * check user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">checkCookie</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> username = <span class="variable language_">document</span>.<span class="property">cookie</span> ? <span class="title function_">getCookie</span>(<span class="string">&quot;username&quot;</span>) : <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">if</span> (username != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">    <span class="title function_">alert</span>(<span class="string">&quot;Welcome &quot;</span> + username)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    username = <span class="title function_">prompt</span>(<span class="string">&quot;please input your username&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (username &amp;&amp; username != <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">      <span class="title function_">setCookie</span>(<span class="string">&quot;username&quot;</span>, username, <span class="number">7</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">checkCookie</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getCookie</span>(<span class="string">&quot;username&quot;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>macOS打不开非官方dmg文件</title>
    <url>/2021/01/01/macOS%E6%89%93%E4%B8%8D%E5%BC%80%E9%9D%9E%E5%AE%98%E6%96%B9dmg%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="直接使用-su-权限移除镜像的-quarantine-标志"><a href="#直接使用-su-权限移除镜像的-quarantine-标志" class="headerlink" title="直接使用 su 权限移除镜像的 quarantine 标志"></a>直接使用 su 权限移除镜像的 quarantine 标志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo xattr -rd com.apple.quarantine /Applications/&lt;application-name&gt;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>macOS</tag>
      </tags>
  </entry>
  <entry>
    <title>google 告警调试符号文件</title>
    <url>/2024/05/16/google-%E5%91%8A%E8%AD%A6%E8%B0%83%E8%AF%95%E7%AC%A6%E5%8F%B7%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="aab-包上传到-google-play-时，会出现以下警告："><a href="#aab-包上传到-google-play-时，会出现以下警告：" class="headerlink" title="aab 包上传到 google play 时，会出现以下警告："></a>aab 包上传到 google play 时，会出现以下警告：</h3><p><strong>此 App Bundle 包含原生代码，您尚未上传调试符号文件。我们建议您上传调试符号文件，这样会便于针对崩溃和 ANR 问题进行分析和调试。</strong></p>
<p>解决方法：首先需要安装项目对应的 ndk：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ndkVersion = &quot;20.1.5948944&quot;</span><br></pre></td></tr></table></figure>

<p>SDK Tools 记得要开启 Show Package Details，然后下载对应版本的 NDK。<br>Android Studio -&gt; SDK Manager -&gt; SDK Tools -&gt; NDK (Side by side) -&gt; 20.1.5948944</p>
<p>然后在项目的 build.gradle 文件中配置：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">//...</span></span><br><span class="line">            minifyEnabled <span class="keyword">true</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">&#x27;proguard-android.txt&#x27;</span>), <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">            <span class="comment">// 新增配置</span></span><br><span class="line">            ndk &#123;</span><br><span class="line">                debugSymbolLevel <span class="string">&#x27;FULL&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>debugSymbolLevel 配置为 FULL，表示生成的符号文件包含所有调试信息。</p>
<p>最后，重新打包 aab 包，上传到 google play，即可解决此问题。</p>
]]></content>
      <categories>
        <category>React Native</category>
      </categories>
      <tags>
        <tag>React Native</tag>
        <tag>Debugging</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>module导入script方式</title>
    <url>/2021/07/19/module%E5%AF%BC%E5%85%A5script%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="type-module"><a href="#type-module" class="headerlink" title="type=&quot;module&quot;"></a><code>type=&quot;module&quot;</code></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// will not block the button</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// undefined</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>) <span class="comment">// the url of import file</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// will block the button</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// window</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;http://example.com/test.js&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// will run immediate when the file is load</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// example.com needs the Access-Control-Allow-Origin flag</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">import</span> &#123;sayHi&#125; <span class="keyword">from</span> <span class="string">&#x27;sayHi&#x27;</span> <span class="comment">// this will get error because no path import in this module block.</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">nomodule</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">alert</span>(<span class="string">&quot;The Browser can not support the module import.&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>let</title>
    <url>/2018/08/10/let/</url>
    <content><![CDATA[<h3 id="let-声明的变量在代码块内有效"><a href="#let-声明的变量在代码块内有效" class="headerlink" title="let 声明的变量在代码块内有效"></a>let 声明的变量在代码块内有效</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  a[i] = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">a[<span class="number">6</span>](); <span class="comment">//6</span></span><br></pre></td></tr></table></figure>

<h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><p>var 命令的变量可以在声明之前使用，值为 undefined</p>
<h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p>在代码块内，使用 let 命令声明变量之前，该变量都是不可用的。TDZ(temporal dead zone)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> temp = <span class="number">123</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  temp = <span class="string">&quot;abc&quot;</span> <span class="comment">//ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有些死区是不易发现的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x = y, y = <span class="number">2</span></span>) &#123;</span><br><span class="line">  <span class="comment">//y is not defined</span></span><br><span class="line">  <span class="keyword">return</span> [x, y]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = x <span class="comment">//ReferenceError: x is not defined</span></span><br></pre></td></tr></table></figure>

<h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> a</span><br><span class="line">  <span class="keyword">let</span> a</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Waves svg</title>
    <url>/2021/01/12/Waves-svg/</url>
    <content><![CDATA[<p><img src="/svgs/waves.svg" alt="Waves"></p>
]]></content>
      <tags>
        <tag>svg</tag>
      </tags>
  </entry>
  <entry>
    <title>图像旋转</title>
    <url>/2020/06/19/WebGL%E5%9B%BE%E5%83%8F%E6%97%8B%E8%BD%AC/</url>
    <content><![CDATA[<h3 id="旋转原理"><a href="#旋转原理" class="headerlink" title="旋转原理"></a>旋转原理</h3><p>将 WebGL 坐标系转为极坐标，然后通过角度计算得出旋转后的左标位置。<br>旋转矩阵：</p>
<p>$$<br>\begin{bmatrix}<br>    x’ \<br>    y’ \<br>    z’ \<br>    1 \<br>\end{bmatrix} &#x3D;<br>\begin{bmatrix}<br>    \cos \beta &amp; -\sin \beta &amp; 0 &amp; 0 \<br>    \sin \beta &amp; \cos \beta &amp; 0 &amp; 0 \<br>    0 &amp; 0 &amp; 1 &amp; 0 \<br>    0 &amp; 0 &amp; 0 &amp; 1 \<br>\end{bmatrix} ×<br>\begin{bmatrix}<br>    x \<br>    y \<br>    z \<br>    1 \<br>\end{bmatrix}<br>$$</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>使用<code>u_SinBCosB</code>存放<code>SinB</code>与<code>CosB</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2d rotate</span></span><br><span class="line"><span class="comment"> * x&#x27; = x * cosB - y * sinB</span></span><br><span class="line"><span class="comment"> * y&#x27; = x * sinB + y * cosB</span></span><br><span class="line"><span class="comment"> * z&#x27; = z</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    uniform vec2 u_SinBCosB;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position.x = a_Position.x * u_SinBCosB.y - a_Position.y * u_SinBCosB.x;</span></span><br><span class="line"><span class="string">        gl_Position.y = a_Position.x * u_SinBCosB.x + a_Position.y * u_SinBCosB.y;</span></span><br><span class="line"><span class="string">        gl_Position.z = a_Position.z;</span></span><br><span class="line"><span class="string">        gl_Position.w = 1.0;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">ANGLE</span> = <span class="number">30.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> gl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>).<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> n = <span class="title function_">initVertexBuffers</span>(gl)</span><br><span class="line">  <span class="keyword">if</span> (n &lt; <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> radian = (<span class="title class_">Math</span>.<span class="property">PI</span> * <span class="variable constant_">ANGLE</span>) / <span class="number">180.0</span> <span class="comment">// Transform to radian.</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">SinB</span> = <span class="title class_">Math</span>.<span class="title function_">sin</span>(radian)</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">CosB</span> = <span class="title class_">Math</span>.<span class="title function_">cos</span>(radian)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> u_SinBCosB = gl.<span class="title function_">getUniformLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;u_SinBCosB&quot;</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">uniform2f</span>(u_SinBCosB, <span class="title class_">SinB</span>, <span class="title class_">CosB</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1.0</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">drawArrays</span>(gl.<span class="property">TRIANGLES</span>, <span class="number">0</span>, n)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>new Study</title>
    <url>/2018/10/30/new-Study/</url>
    <content><![CDATA[<h1 id="开始新一轮的学习"><a href="#开始新一轮的学习" class="headerlink" title="开始新一轮的学习"></a>开始新一轮的学习</h1><p>大晴天，白天上课，晚上班会。在傍晚时发现了有一丝的腰疼。晚上回到寝室突然又有点心绞痛的迹象···。<br>年纪轻轻应该不会有大碍，应该吧···毕竟也没有去检查过身体。<br>今天开始应该会把兼职辞了，开始新的学习吧。驾照什么的···就留着寒暑假有空再说吧。</p>
<p><strong>date: <em>22:35 2018&#x2F;10&#x2F;30</em></strong></p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>React Reconciler Diff Example</title>
    <url>/2021/07/19/react-reconciler-diff/</url>
    <content><![CDATA[<ul>
<li>before: abcd</li>
<li>after: acdb</li>
</ul>
<h3 id="第一轮遍历开始"><a href="#第一轮遍历开始" class="headerlink" title="&#x3D;&#x3D;&#x3D;第一轮遍历开始&#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D;&#x3D;第一轮遍历开始&#x3D;&#x3D;&#x3D;</h3><p>a（之后）vs a（之前）<br>key 不变，可复用<br>此时 a 对应的 oldFiber（之前的 a）在之前的数组（abcd）中索引为 0<br>所以 <code>lastPlacedIndex = 0;</code></p>
<p>继续第一轮遍历…</p>
<p>c（之后）vs b（之前）<br>key 改变，不能复用，跳出第一轮遍历<br>此时 <code>lastPlacedIndex === 0;</code><br>&#x3D;&#x3D;&#x3D;第一轮遍历结束&#x3D;&#x3D;&#x3D;</p>
<p>&#x3D;&#x3D;&#x3D;第二轮遍历开始&#x3D;&#x3D;&#x3D;<br><code>newChildren === cdb</code>，没用完，不需要执行删除旧节点<br><code>oldFiber === bcd</code>，没用完，不需要执行插入新节点</p>
<p>将剩余 oldFiber（bcd）保存为 map</p>
<p>&#x2F;&#x2F; 当前 oldFiber：bcd<br>&#x2F;&#x2F; 当前 newChildren：cdb</p>
<p>继续遍历剩余 newChildren</p>
<p><code>key === c</code> 在 oldFiber 中存在<br><code>const oldIndex = c（之前）.index;</code><br>此时 <code>oldIndex === 2;</code> &#x2F;&#x2F; 之前节点为 abcd，所以 c.index &#x3D;&#x3D;&#x3D; 2<br>比较 oldIndex 与 lastPlacedIndex;</p>
<p>如果 <code>oldIndex &gt;= lastPlacedIndex</code> 代表该可复用节点不需要移动<br>并将 <code>lastPlacedIndex = oldIndex;</code><br>如果 <code>oldIndex &lt; lastplacedIndex</code> 该可复用节点之前插入的位置索引小于这次更新需要插入的位置索引，代表该节点需要向右移动</p>
<p>在例子中，<code>oldIndex 2 &gt; lastPlacedIndex 0</code>，<br>则 <code>lastPlacedIndex = 2;</code><br>c 节点位置不变</p>
<p>继续遍历剩余 newChildren</p>
<p>&#x2F;&#x2F; 当前 oldFiber：bd<br>&#x2F;&#x2F; 当前 newChildren：db</p>
<p><code>key === d</code> 在 oldFiber 中存在<br><code>const oldIndex = d（之前）.index;</code><br><code>oldIndex 3 &gt; lastPlacedIndex 2</code> &#x2F;&#x2F; 之前节点为 abcd，所以 d.index &#x3D;&#x3D;&#x3D; 3<br>则 <code>lastPlacedIndex = 3;</code><br>d 节点位置不变</p>
<p>继续遍历剩余 newChildren</p>
<p>&#x2F;&#x2F; 当前 oldFiber：b<br>&#x2F;&#x2F; 当前 newChildren：b</p>
<p><code>key === b</code> 在 oldFiber 中存在<br><code>const oldIndex = b（之前）.index;</code><br><code>oldIndex 1 &lt; lastPlacedIndex 3</code> &#x2F;&#x2F; 之前节点为 abcd，所以 b.index &#x3D;&#x3D;&#x3D; 1<br>则 b 节点需要向右移动<br>&#x3D;&#x3D;&#x3D;第二轮遍历结束&#x3D;&#x3D;&#x3D;</p>
<p>最终 acd 3 个节点都没有移动，b 节点被标记为移动</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Fiber</tag>
      </tags>
  </entry>
  <entry>
    <title>shopify开店Day1</title>
    <url>/2022/08/08/shopify%E5%BC%80%E5%BA%97Day1/</url>
    <content><![CDATA[<h3 id="开店第一天"><a href="#开店第一天" class="headerlink" title="开店第一天"></a>开店第一天</h3><ul>
<li>确定了店名，就叫 <code>Edward Store</code>，暂时当个杂货铺吧，后期需要转型的话也方便。</li>
<li>注册域名。</li>
<li>开 <code>Shopify</code> 店铺。</li>
</ul>
<h3 id="已完成事件"><a href="#已完成事件" class="headerlink" title="已完成事件"></a>已完成事件</h3><ul>
<li><input checked="" disabled="" type="checkbox"> 注册域名</li>
<li><input checked="" disabled="" type="checkbox"> 注册 shopify 店铺</li>
</ul>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>Webpack配置</title>
    <url>/2019/02/25/webpack%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="项目文件目录"><a href="#项目文件目录" class="headerlink" title="项目文件目录"></a>项目文件目录</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-Demo</span><br><span class="line">|--build</span><br><span class="line">|--dist</span><br><span class="line">|--css</span><br><span class="line">|--js</span><br><span class="line">|--view</span><br><span class="line">|--node_modules</span><br><span class="line">|--src</span><br><span class="line">|--</span><br><span class="line">|--package.json</span><br><span class="line">|--webpack.config.js</span><br><span class="line">|--webpack.production.config.js</span><br></pre></td></tr></table></figure>

<ul>
<li>src：代码开发目录</li>
<li>build：开发环境 webpack 输出目录</li>
<li>dist：生产环境 webpack 输出目录</li>
<li>package.json：项目配置</li>
<li>webpack.config.js：开发环境配置</li>
<li>webpack.production.config.js：生产环境配置</li>
</ul>
<h3 id="webpack-配置文件"><a href="#webpack-配置文件" class="headerlink" title="webpack 配置文件"></a>webpack 配置文件</h3><p>需命名为 webpack.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>) <span class="comment">// 模块</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./src/main.js&quot;</span>), <span class="comment">// 入口文件</span></span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;./dist&quot;</span>), <span class="comment">// 输出文件</span></span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 插件</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      <span class="comment">// 路由规则</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif|bmp|jpeg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;url-loader?limit=1111&amp;name=[hash:8]-[name].[ext]&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;url-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="webpack-dev-server"><a href="#webpack-dev-server" class="headerlink" title="webpack-dev-server"></a>webpack-dev-server</h3><ul>
<li>通过 npm 安装：npm i webpack-dev-server</li>
<li>运行命令：webpack-dev-server –devtool eval –port 9876 –progress –colors – compress –hot –inline –content-base .&#x2F;build<br>可以在 package.json 中的 script 加一个启动项。</li>
<li>–devtool eval：在报错时精确到文件的行号</li>
<li>–progress：显示编译的输出内容进度</li>
<li>–compress：启用 gzip 压缩</li>
<li>–hot：热更新，无需刷新浏览器</li>
<li>–colors：显示编译的输出内容颜色</li>
<li>–inline：自动刷新模式。默认为 iframe。</li>
<li>–content-base：设置输出目录。</li>
</ul>
]]></content>
      <tags>
        <tag>Config</tag>
        <tag>Webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>useRef</title>
    <url>/2021/01/11/useRef/</url>
    <content><![CDATA[<h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><ul>
<li>mutable ref</li>
<li>presist</li>
</ul>
<p>eg: 实现一个需求：点击按钮时 input 自动聚焦。</p>
<ul>
<li>createRef 实现</li>
</ul>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> input = createRef&lt;<span class="title class_">HTMLInputElement</span>&gt;()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="property">current</span>) &#123;</span><br><span class="line">      input.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;input&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>focus<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>useRef 实现</li>
</ul>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> input = useRef&lt;<span class="title class_">HTMLInputElement</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handle</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (input.<span class="property">current</span>) &#123;</span><br><span class="line">      input.<span class="property">current</span>.<span class="title function_">focus</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#123;input&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;handle&#125;</span>&gt;</span>focus<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两者的区别在于：createRef 每次渲染会返回一个新的引用，而 useRef 返回的是相同的引用（persist）。对于函数式组件，每次 useState 会造成整个组件的重新渲染，但是 uesRef 可以保证引用不变，不会触发 re-render。</p>
<span id="more"></span>

<p>eg：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [index, setIndex] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">click</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 2</span></span><br><span class="line"><span class="comment">       * 3</span></span><br><span class="line"><span class="comment">       * 4</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(index)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>current: &#123;index&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIndex((prev) =&gt; prev + 1)&#125;&gt;increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;click&#125;</span>&gt;</span>log index<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>log 出来的并不是实时的 index，每次触发 setState 都会重新渲染，timeout 中拿到的都是当时的 index。使用 useRef 就可以拿到实时更改的结果：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [index, setIndex] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;<span class="built_in">number</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.<span class="property">current</span> = index</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">click</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 4</span></span><br><span class="line"><span class="comment">       * 4</span></span><br><span class="line"><span class="comment">       * 4</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ref.<span class="property">current</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>current: &#123;index&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIndex((prev) =&gt; prev + 1)&#125;&gt;increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;click&#125;</span>&gt;</span>log index<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useRef-还可拿到前一个值"><a href="#useRef-还可拿到前一个值" class="headerlink" title="useRef 还可拿到前一个值"></a>useRef 还可拿到前一个值</h3><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">HomePage</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [index, setIndex] = <span class="title function_">useState</span>(<span class="number">1</span>)</span><br><span class="line">  <span class="keyword">const</span> ref = useRef&lt;<span class="built_in">number</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.<span class="property">current</span> = index</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>current: &#123;index&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>prev: &#123;ref.current&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> setIndex((prev) =&gt; prev + 1)&#125;&gt;increase<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React 渲染 JSX 比 useEffect 快，所以已经渲染完成，才给 ref.current 赋值，ref 引用不变，不引起 re-render，所以渲染出来的是上一个值。<br>通过这个特性可以封装一个 usePrevious：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">usePrevious</span> = (<span class="params">value: <span class="built_in">any</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="attr">ref</span>: <span class="built_in">any</span> = <span class="title function_">useRef</span>()</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ref.<span class="property">current</span> = value</span><br><span class="line">  &#125;, [value])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> ref.<span class="property">current</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个特别的用处，可以用于记录 timer：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = useRef&lt;<span class="title class_">NodeJS</span>.<span class="property">Timeout</span> | <span class="literal">null</span>&gt;(<span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  timer.<span class="property">current</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> <span class="built_in">clearInterval</span>(timer.<span class="property">current</span> <span class="keyword">as</span> <span class="title class_">NodeJS</span>.<span class="property">Timeout</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>What is the Pure Function</title>
    <url>/2019/03/27/whatIsPureFunction/</url>
    <content><![CDATA[<h3 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h3><p>function has special rules:</p>
<ol>
<li>It must work for every possible input value</li>
<li>And it has only one relationship for each input value</li>
</ol>
<p>Although each input will only have one output, but for different inputs may have the same output.</p>
<h3 id="Pure-function"><a href="#Pure-function" class="headerlink" title="Pure function"></a>Pure function</h3><p><em><code>Given all these, pure functions have a big set of advantages. They are easier to read and understand, as they do one thing. There is no need to look outside the function code and check for variables. There is no need to think how changing the value of the variable will affect other functions. No mutations in other functions will affect the result of the pure function for a specific input.</code></em><br>Pure functions are easier to test, as all dependencies are in the function definition and they do one thing.<br>For Example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// Pure</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br><span class="line">arr.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">3</span>) <span class="comment">// [3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Impure</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [1, 2]</span></span><br><span class="line">arr.<span class="title function_">splice</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">// [3]</span></span><br></pre></td></tr></table></figure>

<p>Another Example:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Impure</span></span><br><span class="line"><span class="keyword">var</span> sign = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The return value depends on the system status</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">isBigger</span> = (<span class="params">num</span>) =&gt; num &gt; <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Pure</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">isBigger</span> = (<span class="params">num</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">var</span> sign = <span class="number">3</span></span><br><span class="line">  <span class="keyword">return</span> num &gt; sign</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>上证指数开盘涨停</title>
    <url>/2024/10/08/%E4%B8%8A%E8%AF%81%E6%8C%87%E6%95%B0%E5%BC%80%E7%9B%98%E6%B6%A8%E5%81%9C/</url>
    <content><![CDATA[<h3 id="见证历史了吧"><a href="#见证历史了吧" class="headerlink" title="见证历史了吧"></a>见证历史了吧</h3><p>上证指数开盘涨停。</p>
<p>国家这次真算得上破釜成舟了。</p>
<p>就是不知道，半年&#x2F;多年后回过头来看，这是起大厦的首日，还是倾大厦的首日呢？</p>
<p>不得而知。 楼他们是不打算救了，可以考虑购买房子了。</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>一點總結</title>
    <url>/2020/09/11/%E4%B8%80%E9%BB%9E%E7%B8%BD%E7%B5%90/</url>
    <content><![CDATA[<h3 id="工作以來的感受"><a href="#工作以來的感受" class="headerlink" title="工作以來的感受"></a>工作以來的感受</h3><p>最大的感受就是，需要學習的還有很多很多。獨立思考可以讓你的思維更加開放、活躍，同時可以激發更多的靈感。<br>目前的技術棧：<code>React+Mobx+TypeScirpt</code></p>
<p>從前對狀態管理沒有什麽概念，自從接觸到工程項目之後，對爲何要進行 State Management 越來越清晰。<br>當然也產生了一定的不良影響 -&gt; 只要上手就會想如何設計 State，導致有的地方代碼實在冗餘。</p>
<p>同時在項目代碼中瞭解了許多新知識，如何去設計一個可繼承、可復用的 Function；如何將 Store 封裝，便於使用；如何對請求進行封裝；何時使用 Interface、何時使用 Type；等等……</p>
<h3 id="接下來需要做的"><a href="#接下來需要做的" class="headerlink" title="接下來需要做的"></a>接下來需要做的</h3><ul>
<li>思考之前的代碼如何優化</li>
<li>思考目前的代碼是否還能拆分</li>
<li>閲讀 State Management 的文章</li>
<li>……</li>
</ul>
<h3 id="課餘時間的活動"><a href="#課餘時間的活動" class="headerlink" title="課餘時間的活動"></a>課餘時間的活動</h3><ul>
<li><p>書籍</p>
<ul>
<li>熵的世界</li>
<li>我的簡史 - 霍金</li>
</ul>
</li>
<li><p>日常</p>
<ul>
<li>陰陽師</li>
<li>B 站</li>
<li>手游 - 跑跑卡丁車</li>
<li>音樂</li>
</ul>
</li>
<li><p>綜藝</p>
<ul>
<li>説唱新世代</li>
<li>中國新説唱</li>
</ul>
</li>
<li><p>影視劇</p>
<ul>
<li>甜蜜蜜</li>
<li>投名狀</li>
<li>親愛的</li>
<li>八佰</li>
<li>Mulan</li>
<li>信條</li>
</ul>
</li>
</ul>
<h3 id="挖坑"><a href="#挖坑" class="headerlink" title="挖坑"></a>挖坑</h3><p>考慮用點什麽搭一個自己的博客。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>useMemo</title>
    <url>/2021/01/13/useMemo/</url>
    <content><![CDATA[<h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><p>useMemo 是拿来保持一个对象引用不变的。useMemo 和 useCallback 都是 React 提供来做性能优化的。比起 classes， Hooks 给了开发者更高的灵活度和自由，但是对开发者要求也更高了，因为 Hooks 使用不恰当很容易导致性能问题。</p>
<p>假设有个 component，在 dataConfig 变化的时候重新去 fetchData：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">&lt;<span class="title class_">Child</span></span><br><span class="line">  fetchData=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// fetch data</span></span><br><span class="line">  &#125;&#125;</span><br><span class="line">  dataConfig=&#123;&#123; <span class="attr">id</span>: <span class="title function_">getId</span>(queryId) &#125;&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>如果是个 Class Component，会这么写：</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&lt;<span class="title class_">Props</span>&gt; &#123;</span><br><span class="line">  <span class="title function_">componentWillReceiveProps</span>(<span class="params">nextProps: Props</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nextProps.<span class="property">dataConfig</span> !== <span class="variable language_">this</span>.<span class="property">props</span>.<span class="property">dataConfig</span>) &#123;</span><br><span class="line">      nextProps.<span class="title function_">fetchData</span>(nextProps.<span class="property">dataConfig</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Hooks 后长这样：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params">&#123; fetchData, dataConfig &#125;: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">fetchData</span>(dataConfig)</span><br><span class="line">  &#125;, [fetchData, dataConfig])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用 Class Component 时我们需要手动管理依赖，但是使用 Hooks 时会带来副作用：React 使用的是<code>Object.is()</code>，如果<code>fetchData</code>的 reference 变了，也会触发 <code>useEffect</code>。<br>虽然逻辑上 React 的处理是合理的，但是还是需要手动去解决它导致的性能问题：官方提供了 useCallback 这个 hooks，用于解决函数引用问题。</p>
<span id="more"></span>

<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> fetchData = <span class="title function_">useCallback</span>(</span><br><span class="line">    <span class="function">(<span class="params">config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">queryList</span>(config)</span><br><span class="line">    &#125;,</span><br><span class="line">    [queryList]</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">fetchData</span>=<span class="string">&#123;fetchData&#125;</span> <span class="attr">dataConfig</span>=<span class="string">&#123;&#123;</span> <span class="attr">id:</span> <span class="attr">getId</span>(<span class="attr">queryId</span>) &#125;&#125; /&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是这个时候还有一个地方没有解决——Props。只要 props 更新，组件还是会重新 fetchData，因为 dataConfig 也是一个会变化的 prop。memo 是一个最容易被忽略的 Hooks，即使我们有意不在 JSX 中做计算，写成这样：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">queryList</span>(config)</span><br><span class="line">  &#125;,</span><br><span class="line">  [queryList]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataConfig = <span class="title function_">queryConfig</span>(id)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">fetchData</span>=<span class="string">&#123;fetchData&#125;</span> <span class="attr">dataConfig</span>=<span class="string">&#123;dataConfig&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>由于习惯函数式编程，我们已经习惯了这种写法。但是组件是有状态的，状态更新了就得处理相关逻辑，触发 re-render。我们需要告诉 React 什么时候该处理这个状态，这时候 useMemo 就登场了。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fetchData = <span class="title function_">useCallback</span>(</span><br><span class="line">  <span class="function">(<span class="params">config: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">queryList</span>(config)</span><br><span class="line">  &#125;,</span><br><span class="line">  [queryList]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dataConfig = <span class="title function_">useMemo</span>(</span><br><span class="line">  <span class="function">() =&gt;</span> (&#123; ...config, <span class="attr">id</span>: <span class="title function_">getId</span>(queryId) &#125;),</span><br><span class="line">  [getId, queryId]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">fetchData</span>=<span class="string">&#123;fetchData&#125;</span> <span class="attr">dataConfig</span>=<span class="string">&#123;dataConfig&#125;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>这样 dataConfig 只有在 getId 或 queryId 变化时才重新生成，组件才会在必要的时候重新 fetchData</p>
<h3 id="memo"><a href="#memo" class="headerlink" title="memo"></a>memo</h3><p>只使用 useMemo 和 useCallback 来进行优化是有可能达不到效果的，原因在于如果 props 引用不发生变化，虽然不会重新渲染，但它依然会重新执行。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params">&#123; name &#125;: Props</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run&quot;</span>) <span class="comment">// will log every second</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// some complex calculations</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [name] = <span class="title function_">useState</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果 Child 中的计算量非常大，这时候的性能主要就耗在重新执行的这个过程了。如果想要阻断这一过程重新执行，React 有一个 API：memo，它相当于一个 PureComponent，是一个 HOC，默认对 props 进行一次浅比较，如果 props 不变，则不会重新执行。<br>现在给 Child 套上 memo：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">memo</span>(<span class="function">(<span class="params">&#123; name &#125;: Props</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;run&quot;</span>) <span class="comment">// will log only once</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// some complex calculations</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>或者使用 useMemo 包裹：</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">App</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> [name] = <span class="title function_">useState</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">setCount</span>(<span class="function">(<span class="params">prev</span>) =&gt;</span> prev + <span class="number">1</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;, [])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> memoChild = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&#123;name&#125;</span> /&gt;</span></span>, [name])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;count&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;memoChild&#125;</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="何时何处使用？"><a href="#何时何处使用？" class="headerlink" title="何时何处使用？"></a>何时何处使用？</h3><ol>
<li>开销大的组件可以考虑使用 memo。因为有的组件重新渲染的开销可能比用 memo 做浅比较的开销还小，但是如果组件的重新执行开销很大，使用 memo 一定可以加快性能。</li>
<li>用 useMemo 和 useCallback 来控制 props 的引用，和 memo 配套使用效果最佳。性能优化是一个整体的过程，不是单独在某个组件里就可以改善的。</li>
<li>useMemo 避免昂贵计算，useCallback 解决 reference 问题，memo 解决 shouldComponentUpdate 问题。</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>《乡土中国》记录</title>
    <url>/2021/12/09/%E3%80%8A%E4%B9%A1%E5%9C%9F%E4%B8%AD%E5%9B%BD%E3%80%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h3><blockquote>
<p>农业和游牧或工业不同，它是直接取资与土地的。<br>游牧的人飘忽不定，工业可以择地而居。<br>而种地的人却搬不动地。</p>
</blockquote>
<blockquote>
<p>从农业本身来看，是无需群居的。最小的社区可以只有一户人家。<br>夫妻和孩子聚集，满足两性与抚养的需要。<br>无论在什么性质的社会里，家庭总是最基本的抚养社群。</p>
</blockquote>
<p>中国农民聚集而居原因：</p>
<ol>
<li>耕地面积小，小农经营。住所与耕地不会相隔太远</li>
<li>需要水利，所以大家一起合作。</li>
<li>合作弊害。</li>
<li>土地继承。</li>
</ol>
<p>农村属于 <code>face to face group</code>，所以 <code>文字</code> 在农村并没有太大意义。</p>
<p>社会学中通常两种不同性质的社会：</p>
<ol>
<li>共同体：没有主要的目的聚集。</li>
<li>社会：有主要的目的聚集。</li>
</ol>
<blockquote>
<p>孝是什么，孔子并没有抽象地加以说明。最后归结到“心安”二字。<br>做子女的在日常接触中熟悉父母的性格，然后承他们的欢，做到心安。</p>
</blockquote>
<span id="more"></span>

<h3 id="文字下乡"><a href="#文字下乡" class="headerlink" title="文字下乡"></a>文字下乡</h3><p>大家口中的愚，并不是觉得农村人不聪明，只是因为农村人不识字。<br>主要的原因还是在于农村环境下，接触到文字的地方很少。<br>但是并不代表农村人学习能力差。</p>
<blockquote>
<p>不善用文字 -&gt; 学习机会少 -&gt; 文盲</p>
</blockquote>
<blockquote>
<p>乡下孩子不像教授们的孩子到处看见书籍，到处接触字。 并不见得他们的孩子有什么善于辨字的能力，显而易见的是他们有易于识字的环境。</p>
</blockquote>
<blockquote>
<p>文字，一种双方约定好代表一种意义的记号。<br>文字所能表达的情感有限，所以需要使用文法，还原意境。</p>
</blockquote>
<p>由于文字是用于双方交流，所以不能有个人的语言，只能有社会的语言。<br>要让大多数人能对同一象征具有同一意义，他们必须有相同的经历（文化沉淀）。</p>
<blockquote>
<p>在每个特殊的生活团体中，必有他们特色的语言，其他语言无法翻译。</p>
</blockquote>
<p>群体愈大，人群的经验愈复杂，发生语言的共同基础也必愈有限，于是语言会趋于简单化（文言文 -&gt; 繁体 -&gt; 简体（同化））。<br>在社群使用的通用语言之外，必然会产生一些少数人使用的语言（行话）。行话是同行人中的话，外行人因为没有经验，无法理解。</p>
<blockquote>
<p>最普遍的特殊语言发生在母亲和孩子之间。</p>
</blockquote>
<p>在亲密社群中可用来做象征体系的原料比较多。表情、动作，在面对面的情境中，有时比声音更容易传情达意。</p>
<h3 id="再论文字下乡"><a href="#再论文字下乡" class="headerlink" title="再论文字下乡"></a>再论文字下乡</h3><blockquote>
<p>文字是发生在人和人传情达意的过程中受到了空间和时间的阻隔的情境里。</p>
</blockquote>
<p>时间上的隔阂：</p>
<ol>
<li>今夕之隔</li>
<li>社会的世代之隔</li>
</ol>
<blockquote>
<p>小白鼠并不向其他老鼠学习，每只老鼠都在自己的具体情境里，从“试验”中得到个别的经验。<br>他们并不能相互传递经验，相互学习。</p>
</blockquote>
<p>文化：社会世代共同的经验累积。</p>
<blockquote>
<p>大多数记忆，是由于当前的需要，而追忆过去。<br>记忆并非无所为的，而是实用的，为了生活。<br>乡土社会是一个很安定的社会，在一个地方出生，就在这个地方生长直到死。</p>
</blockquote>
<blockquote>
<p>极端的乡土社会是老子的理想社会，“鸡犬相闻，老死不相往来”</p>
</blockquote>
<p>由于乡土社会安定，所以社会积累的经验永远不会更新。经验无需积累，只需保存。<br>语言在这种社会里，算是可以传递世代的经验。</p>
<blockquote>
<p>大家在同一环境里，你先走，他后走，靠的是口口相传，哪里需要文字。</p>
</blockquote>
<p>中国是乡土社会，为什么会产生文字呢？</p>
<blockquote>
<p>中国社会从基层上看是乡土性，但是文字并不是从基层上发生。<br>在乡土社会，面对面的接触中，并不是愚昧到字都不认识，而是文字没有帮助他们生活的必要。</p>
</blockquote>
<h3 id="差序格局"><a href="#差序格局" class="headerlink" title="差序格局"></a>差序格局</h3><blockquote>
<p>中国人可以为了自己牺牲家，可以为了家牺牲族。<br>只要一件物品是公家的，意味着可以“不负责”。</p>
</blockquote>
<p>家庭在西方是界限分明的团体，一般只由父母、孩子组成。<br>中国人的家，可以大到一片地方都属于自己家，也可以小到自己就是自己家。</p>
<blockquote>
<p>家族，地缘关系的体现。不是一个固定的团体，而是一个范围。有势力的人家的街坊可以遍及全村，穷苦人家的街坊只是比邻的两三家。</p>
</blockquote>
<p>西方社会里争的是权力，而中国社会却多的是攀关系、讲交情。<br>西方社会的团体是按照资格划分：有资格的进入群体，没资格的自动脱离群体。</p>
<ul>
<li>个人主义：基于团体的概念，个人是团体的一份子。</li>
<li>自我主义：以自我为中心。</li>
</ul>
<blockquote>
<p>在传统的社会结构里最基本的概念，人来人往所构成的网格中的纲纪，就是一个差序，也就是伦。《礼记》大传里说：“亲亲也，尊尊也，长长也，男女有别，此其不可得与民变革者也”。社会的架构是不变的，变得只是利用这架构做的事情。</p>
</blockquote>
<p>在差序格局中，社会关系是通过一个个人推出去的，是私人关系的增加，社会范围是一根根私人联系所构成的网格。社会道德在私人关系中才有意义，所以现代社会需要法律来进行约束。</p>
<blockquote>
<p>在差序格局里，公和私是相对而言的，站在任何一圈里，在外看是私，在内看就成了公。</p>
</blockquote>
<h3 id="维系着私人关系的道德"><a href="#维系着私人关系的道德" class="headerlink" title="维系着私人关系的道德"></a>维系着私人关系的道德</h3><blockquote>
<p>中国人的道德和法律，具有伸缩性，要看对象和子的关系而定。<br>在一个安居的乡土社会，每个人可以在土地上自食其力地生活时，只在偶然和临时的非常状态中才感觉到伙伴的需要。和别人的关系是次要的，而且在不同场合下需要不同的结合，并不需要一个经常性的团体，因此社会采用了“差序格局”。<br>道德是社会对个人行为的执行力。</p>
</blockquote>
<p>执行团体的意志时，需要代理者（例如：牧师、发言人、算命先生）。团体不能为任何个人所有。<strong>如果代理者违反了这些“不证自明的真理”，代理者就失去了代理的资格。</strong><br>为了防止代理者滥用权力，所以发生了<strong>宪法</strong>。</p>
<blockquote>
<p>宪法观念是和西洋公务观念相配合的。国家可以要求人民服务，但是国家也得保证不侵害人民的权力，在公道和爱护的范围内行使权力。</p>
</blockquote>
<p>但是在中国这种差序格局中，不容易找到个人对团体的道德因素。在西洋团体格局的社会中，公务、履行义务是一个清除明白的行为规范。孝悌忠信，都是私的关系。道德仅存于私人关系之间。</p>
<h3 id="家族"><a href="#家族" class="headerlink" title="家族"></a>家族</h3><p>在西方，家是团体性社群，夫妇是主轴，经营的事务很少，主要是生儿育女。但在中国的乡土社会里，“家”在结构上俨然是一个氏族，根据单系（父亲）亲属原则所组成的社群，且构成的分子不仅限于亲子关系，因而具有生育和事业的双重功能。</p>
<ul>
<li>家庭（Family）：西方观念，由亲子（双系，父母双方）构成的生育社群。主要是为了生育。孩子成长之后，脱离父母抚育，去成立新的家庭。所以“家庭”是暂时性的，抚养孩子的目的就在于抚养结束。</li>
<li>家族（Extended Family）：乡土社会中的基本社群，具有生育之外的功能，夫妻之间的合作不因停止抚育孩子而停止，是长期的稳定的合作。</li>
<li>大家庭：结构复杂（父母、子女、婿、媳、堂、表等组成），不按数量区分。</li>
<li>小家庭：结构简单。</li>
</ul>
<blockquote>
<p>中国家族的扩大是单系的：大部分的家并不能同时包括儿媳和女婿。在父系原则下，女婿和结了婚的女儿都是外家人。在社会学里，单系亲属组成的叫做“氏族”，但是氏族是由许多家族组成，所以中国的家族，实际上是“小氏族”，结构原则上一样。</p>
</blockquote>
<p>人类学上的说法，氏族是一个事业组织，再扩大就可以成为部落。具有政治、经济、宗教等复杂功能。中国乡土社会采取差序格局，利用亲属的伦常去结合社群，经营各种事业，把基本的家变成了氏族性。</p>
<p>在乡土社会中，家是个连续性的事业社群，他的主轴是父子之间，婆媳之间，是纵的。夫妻之间，异性之间，属于副轴。一切事业都不能脱离高效率，高效率就得有纪律，就不能有私情。所以夫妻之间“相敬如宾”，女子“三从四德”，亲子间讲究负责和服从，都是事业性社群的特点。夫妻俩各自之间有各自的工作，属于合作关系，感情占比不大。同时同性和同性之间联系比较多，性别和年龄组之间保持着很大距离，这是将生育之外的功能拉入这社群之后的结果。</p>
<h3 id="男女有别"><a href="#男女有别" class="headerlink" title="男女有别"></a>男女有别</h3><p>从社会关系上来说，感情是具有破环和创造作用的。感情的激动改变了原有的关系。如果要维持固定的社会关系，就得避免感情的激动。</p>
<p>两种文化模式：</p>
<ol>
<li>阿波罗（Apollonian）：宇宙有一个完善的秩序，人只是去接受它。</li>
<li>浮士德（Faustian）：冲突是存在的基础。文化就是无尽创造的过程，不断改变。</li>
</ol>
<blockquote>
<p>乡土社会是阿波罗式的，现代社会是浮士德式的。</p>
</blockquote>
<p>乡土社会靠亲密和长期的共同生活来相互配合，社会是熟习的，每个人对彼此都足够了解。完全的道义必须有充分的了解，无所隔，但是由于两性关系，性别的鸿沟是基本的阻碍。所以乡土社会选择对<code>性</code>进行抹杀。<br>浮士德是感情的象征，把感情的激动，不断地变化，作为生命的主脉。</p>
<p>在乡土社会，不需要创造新的社会关系，社会关系是生下来就决定的。社会结构多的是同性之间的组合。<code>家庭</code>受到同性组合的影响，不易维护，于是家族代替了家庭，成了以同性为主、异性为辅的单系组合。乡土社会是个男女有别的社会，也是一个安稳的社会。</p>
<h3 id="礼治秩序"><a href="#礼治秩序" class="headerlink" title="礼治秩序"></a>礼治秩序</h3><p>乡土社会属于<code>无政府</code>社会，一种不需要规律的秩序，自动的秩序，无治而治。礼制社会并不一定是君子国，并没有<code>文明</code>的意思，礼制也可以很野蛮。<br>礼是社会公认合式的行为规范。法则是由国家权力执行的规章制度。在乡土社会中传统效力更大。但是在一个变化快的社会，传统的效力是无法保证的，礼制社会是不能在变迁快的时代出现的。所以当现代社会的<code>法</code>进入乡土社会后，破坏了他们的<code>礼</code>，甚至认为律师是帮着<code>法</code>说话的坏人。</p>
<h3 id="无讼"><a href="#无讼" class="headerlink" title="无讼"></a>无讼</h3><p>法律属于专业知识，所以在都市中存在<code>律师</code>、<code>法律顾问</code>等职位。但在乡土社会里，不懂礼就成了<code>坏人</code>。打官司，必然是有人破坏了传统规矩，父母官应该做的是<code>教化</code>，而不是<code>折狱</code>。</p>
<blockquote>
<p>理想的礼治是每个人都自动的遵守规矩，不必有外在的监督。社会假定每个人是知礼的，至少社会有责任使每个人知礼，这也是乡土社会中通行连坐的证据。</p>
</blockquote>
<p>与礼不同的是，法不考虑伦理问题，只保护应有的权力不受侵犯。所以在不同的场合下，往往有不同的判决方法，导致无法<code>沉淀</code>。</p>
<p>在<code>差序格局</code>中，不认为具有一套人人通用的法。所以现行的司法制度在乡间发生了很特殊的副作用，它破坏了原有的礼治秩序，但并不能有效的建立起法制秩序。</p>
<h3 id="无为政治"><a href="#无为政治" class="headerlink" title="无为政治"></a>无为政治</h3><p>权力：</p>
<ul>
<li>社会冲突来看（横暴权力）：权力是冲突的持续，性质还在，但被支配的一方认输，属于压迫性质。</li>
<li>社会合作来看（同意权力）：干涉别人是权力，被别人干涉是义务，权力的基础是同意制度。</li>
</ul>
<blockquote>
<p>权力之所以诱人，最主要的应当是经济利益。在同意权力下，有权利者并不是为了保障自己的特殊权益，所以必须用荣誉和高薪来延揽。但在横暴权力下，统治者要用暴力来维持他们的地位，维护自己的利益。</p>
</blockquote>
<blockquote>
<p>一个只生产他生存必需品的人是没有资格做奴隶的。在农业民族的斗争中，最主要的方式就是把土著赶走而占据他们的土地自己来耕种。</p>
</blockquote>
<p>和平发展 -&gt; 积累力量 -&gt; 扩大势力 -&gt; 民不聊生 -&gt; 内乱 -&gt; 伤亡惨重 -&gt; 和平发展</p>
<p>乡土社会可以自给自足，是同意权力扩大的阻碍。所以皇帝长远来看，是<code>无为</code>的。</p>
<h3 id="长老统治"><a href="#长老统治" class="headerlink" title="长老统治"></a>长老统治</h3><p>中国除了横暴权力、同意权力，还存在一种<code>教化性的权力</code>。</p>
<blockquote>
<p>在被教化的古城镇并不发生这个问题，被教化者并没有选择的机会。文化，是先他而存在的。</p>
</blockquote>
<h3 id="血缘和地缘"><a href="#血缘和地缘" class="headerlink" title="血缘和地缘"></a>血缘和地缘</h3><p>年长对年幼有强制的权利，这是血缘社会的基础。血缘的意思是人和人的权利和义务根据亲属关系决定。职业、财富、地位都存在继承。生育没有社会化之前，血缘作用的强弱是以社会变迁的速率决定。</p>
<blockquote>
<p>血缘是稳定的力量。血缘是先人而存在的，地缘是血缘的投影</p>
</blockquote>
<p>一个地方的人口发展到一定的规模，就不得不去另寻住处。但不论怎么发展，与最开始都保持着地缘关系，即使后来成为了其他乡的人。</p>
<blockquote>
<p>在亲密的血缘社会中商业是无法存在的。他们之间的交易是以人情来维持的，是相互馈赠的方式。外乡客成了商业的媒介，商业是在血缘之外发展的。</p>
</blockquote>
<p>所以大家会聚集在<code>集市</code>贸易，抛开彼此的血缘、地缘关系。</p>
<blockquote>
<p>地缘是从商业里发展出来的社会关系。血缘是身份社会的基础，地缘是契约社会的基础。</p>
</blockquote>
<h3 id="名实的分离"><a href="#名实的分离" class="headerlink" title="名实的分离"></a>名实的分离</h3><p>社会变迁快，长老权利小；社会变迁慢，长老权利大。社会结构自身也存在变迁。<br>由旧结构到新结构之间，会出现时势权利（苏联：形式上是独裁的，但是从苏联人民的立场来看，苏联的独裁和沙皇的独裁并不一样）。</p>
<blockquote>
<p>长老权利是建立在教化作用之上的，教化是有知对无知，如果所传递的文化是有效的，被教的自然没有反对的必要。<br>在横暴权利下，没有反对，只有反抗。<br>在时势权利中，反对是发生于对同一种问题不同的答案上。</p>
</blockquote>
<p>面子就是表面的无违，名实之间的距离随着社会变迁速率增加。</p>
<h3 id="从欲望到需要"><a href="#从欲望到需要" class="headerlink" title="从欲望到需要"></a>从欲望到需要</h3><ol>
<li>乡土社会，欲望驱动。</li>
<li>现代社会，需要驱动。</li>
</ol>
<blockquote>
<p>欲望 -&gt; 紧张 -&gt; 动作 -&gt; 满足 -&gt; 愉快，那是人类的行为过程。欲望如果要通过意志对行为有所控制，它必须是行为者所自觉的。</p>
</blockquote>
<p>人类现有行为，后有思想。决定行为的是从试验与错误的公式中累计出来的经验，思想只有保留这些经验的作用，自觉的欲望是文化的命令。<br>社会变迁快，文化无法满足于生活，逐渐重视起<code>功能</code>，从<code>欲望</code>到了<code>需要</code>。</p>
<blockquote>
<p>在现代社会里只是即是权利，因为在这种社会里生活的人要依他们的需要做计划。从知识中得来的权利是时势权利。乡土社会是靠经验的，他们不必计划，因为在积累的过程中，自然替他们选择出了一个足以依赖的传统生活方案，各人遵照执行即可。</p>
</blockquote>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>中国计划生育协会2022年工作要点</title>
    <url>/2022/02/10/%E4%B8%AD%E5%9B%BD%E8%AE%A1%E5%88%92%E7%94%9F%E8%82%B2%E5%8D%8F%E4%BC%9A2022%E5%B9%B4%E5%B7%A5%E4%BD%9C%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h3 id="2022-首个魔幻文件"><a href="#2022-首个魔幻文件" class="headerlink" title="2022 首个魔幻文件"></a>2022 首个魔幻文件</h3><p>日前，中国计划生育协会官网公布的《中国计划生育协会 2022 年工作要点》（以下简称《工作要点》）提到，2022 年，要实施生殖健康促进行动，重点解决青少年、育龄人群及其他特定人群生殖健康的突出问题，开展未婚人群人工流产干预专项行动，减少青少年意外怀孕和人工流产，提高群众生殖健康水平。<br>在新型婚育文化的建设上，上述《工作要点》称，要以“尊重生育的社会价值，提倡适龄婚育、优生优育，鼓励夫妻共担育儿责任，破除高价彩礼等陈规陋习”为重点，加强对青年婚恋观、家庭观引导，重塑多子女家庭养育文化，淡化教育焦虑，弘扬“孝”、“和”家庭价值观，推动构建积极正向的新型婚育文化。开展新型婚育文化建设项目试点，大力推广新宣传标语口号，倡导将新型婚育文化内容纳入村规民约，修订与中央《决定》精神不一致、不适应的内容。发挥“5.29 会员活动日”宣传品牌、文化社等作用，打造新环境宣传载体，注重运用网络和新媒体等青年群体喜爱的方式，在潜移默化中培育新型婚育观念。</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>世事无常-小舅子CCU的经历</title>
    <url>/2024/07/15/%E4%B8%96%E4%BA%8B%E6%97%A0%E5%B8%B8-%E5%B0%8F%E8%88%85%E5%AD%90CCU%E7%9A%84%E7%BB%8F%E5%8E%86/</url>
    <content><![CDATA[<h3 id="section-1"><a href="#section-1" class="headerlink" title="section 1"></a>section 1</h3><p>小舅子目前阶段的学习生涯结束了，在下一段学习之前，他决定去赚点零花钱。</p>
<p>他在惠州，干了奶茶店&#x2F;进厂打工&#x2F;跑外卖。后面还是决定去深圳，跟着他表哥去跑外送。</p>
<p>从小体质就差，再加上深圳鱼龙混杂，病毒也多，没几天就感染了。</p>
<ul>
<li>2024&#x2F;7&#x2F;7 日，送到深圳。</li>
<li>2024&#x2F;7&#x2F;11 日凌晨，肚子痛，叫救护车。诊断为胆囊炎。</li>
<li>2024&#x2F;7&#x2F;12 日，夜间 11h 左右，未好转，转院到惠州三院，抢救+进入 CCU 治疗。</li>
<li>2024&#x2F;7&#x2F;12 日，医生告病重，同时拍片结果显示，前纵隔存在一个畸胎瘤。</li>
<li>2024&#x2F;7&#x2F;13 日，未好转，感染指标依旧高，检查过杆菌&#x2F;结核菌&#x2F;DNA 序列检测，未找到原因。</li>
<li>2024&#x2F;7&#x2F;14 日，感染指标下降，医生说畸胎瘤必须要切除，病理报告未收到，建议先等待。</li>
<li>2024&#x2F;7&#x2F;15 日，感染指标下降，右侧积水增多，已经联系好广州三甲医院，先去看心血管方面的情况。积水估计还是要上引流管。</li>
<li>2024&#x2F;7&#x2F;16 日，医生说考虑是恶性肿瘤，等待病理结果。</li>
<li>2024&#x2F;7&#x2F;17 日，病理结果未出，检测报告拿到广州肿瘤防治中心，医生推测为恶性肿瘤。身体指标好转。</li>
<li>2024&#x2F;7&#x2F;18 日，出院，转入中山大学孙逸仙纪念医院（越秀）。</li>
<li>2024&#x2F;7&#x2F;21 日，高烧 39 度。</li>
<li>2024&#x2F;7&#x2F;22 日，术前准备，状态尚可。</li>
<li>2024&#x2F;7&#x2F;23 日，手术很成功，肿瘤大小目测 10cm<em>10cm</em>5cm。</li>
</ul>
<p>畸胎瘤，生殖细胞肿瘤，医生说出生的时候就携带了，但是不清楚是什么时候发展的。三院无法处理，建议转去更高级医院。医生综合评估，目前的腹部和胸腔还是存在积水，积水的原因很可能就是畸胎瘤导致的，所以建议优先处理畸胎瘤。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Web3？</title>
    <url>/2024/08/07/%E4%BB%80%E4%B9%88%E6%98%AFWeb3%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="Web1-20-世纪-80-年代-21-世纪早期"><a href="#Web1-20-世纪-80-年代-21-世纪早期" class="headerlink" title="Web1(20 世纪 80 年代 - 21 世纪早期)"></a>Web1(20 世纪 80 年代 - 21 世纪早期)</h1><p>互联网的第一个阶段，Web1，主要是为普通消费者提供在线内容和信息。</p>
<p>由于消费者只能在线阅读信息或内容，不能与之互动，Web1 是非常静态的。</p>
<p>当你想到 Web1 时，可以联想到 Internet Explorer、Yahoo 或 Netscape。虽然 Web1 是只读的，但我们与 Web1 相关的公司是建立在开放协议上的（这意味着几乎任何个人或组织都可以在互联网上进行开发，并知道他们遵循的规则与其他人或组织相同）。</p>
<h1 id="Web2-现在"><a href="#Web2-现在" class="headerlink" title="Web2(现在)"></a>Web2(现在)</h1><p>Web2 是我们大多数人今天使用的互联网版本。与静态和“只读”的 Web1 不同，Web2 是“读写”的，并且具有互动性。在 Web2 下，互联网变得更加可用：Web2 是动态的，用户不仅可以消费、互动，还可以创建互联网内容。</p>
<p>在这个过程中，互联网变得主要由我们今天所知的四大巨头主导——苹果、亚马逊、Facebook 和谷歌。Web2 还伴随着智能手机的爆炸式增长，大多数互联网使用是通过这些公司构建的移动应用和硬件进行的。虽然这意味着更多的人可以参与互联网，但也意味着互联网越来越受到主要数字平台的控制。</p>
<p>为什么这是一个问题？在我们今天所知的集中化互联网中，苹果可以对所有付费应用下载和应用内购买抽取 30% 的佣金，Twitter 和 Facebook 可以将美国总统逐出平台，而普通消费者对其在线信息的隐私、安全和控制权比以往任何时候都要少。</p>
<p>我们还看到 Web2 中发生了大量的数据泄露，导致个人数据的安全性和隐私性降低。当用户的数据被泄露时，他们很容易成为身份盗窃、贩卖个人信息等的受害者。</p>
<span id="more"></span>

<h1 id="Web3-未来"><a href="#Web3-未来" class="headerlink" title="Web3(未来)"></a>Web3(未来)</h1><p>Web3，即我们正在迈向的未来互联网，是一个去中心化的互联网。在 Web3 下，互联网由集体“我们”共享和治理，而不是由集中化实体拥有。Web3 世界的基础是开源协议。Web3 的目标是重新构建互联网服务和产品，使它们能够惠及人们，而不是仅仅服务于实体。</p>
<p>Web3 通过以下方式提升了我们今天所知的网络：</p>
<ul>
<li><strong>去中心化</strong>（Decentralized）：网络不再依赖于单一的集中化实体，而是由多个分布式节点共同维护。</li>
<li><strong>分布式</strong>（Distributed）：数据和服务分布在多个节点上，而不是集中在一个服务器上。</li>
<li><strong>开放</strong>（Open）：基于开源协议和技术，任何人都可以参与、贡献和使用。</li>
<li><strong>无信任</strong>（Trustless）：通过智能合约和加密技术，系统可以在没有中介信任的情况下运行。</li>
<li><strong>无需许可</strong>（Permissionless）：任何人都可以参与网络，无需获得批准或许可。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>Web1: 读 📖：你无法创造数据。</li>
<li>Web2: 读写 📖 🖊️：你可以创造数据，并且与他人互动，但是数据的所有者不是你。</li>
<li>Web3: 读写拥有 📖 🖊️ 🔑: 你可以创造数据，并且与他人互动，数据的所有者是你，并且你可以控制它。</li>
</ul>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Web3</tag>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>使用clash進行科學上網</title>
    <url>/2020/11/08/%E4%BD%BF%E7%94%A8clash%E9%80%B2%E8%A1%8C%E7%A7%91%E5%AD%B8%E4%B8%8A%E7%B6%B2/</url>
    <content><![CDATA[<h3 id="之前使用的是-trojan-奈何找不到好的管理程序-現使用-clash"><a href="#之前使用的是-trojan-奈何找不到好的管理程序-現使用-clash" class="headerlink" title="之前使用的是 trojan, 奈何找不到好的管理程序, 現使用 clash"></a>之前使用的是 trojan, 奈何找不到好的管理程序, 現使用 clash</h3><p>clash 的 config 使用的是 yaml 文件, 所以比較好寫.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">port:</span> <span class="number">7890</span></span><br><span class="line"><span class="attr">socks-port:</span> <span class="number">7891</span></span><br><span class="line"><span class="attr">mixed-port:</span> <span class="number">7892</span> <span class="comment"># 混合端口</span></span><br><span class="line"><span class="attr">allow-lan:</span> <span class="literal">true</span> <span class="comment"># 允許局域網連接</span></span><br><span class="line"><span class="attr">log-level:</span> <span class="string">info</span></span><br><span class="line"><span class="attr">external-controller:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9090</span> <span class="comment"># 外部控制端口</span></span><br><span class="line"><span class="attr">extarnal-ui:</span> <span class="string">dashborad</span> <span class="comment"># 使用的ui</span></span><br><span class="line"><span class="attr">proxies:</span> <span class="comment"># clash官方文檔有更清楚的寫法</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">type:</span> <span class="string">ss</span>,</span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;TEST-SS&quot;</span>,</span><br><span class="line">      <span class="attr">server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,</span><br><span class="line">      <span class="attr">port:</span> <span class="number">2020</span>,</span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span>,</span><br><span class="line">      <span class="attr">plugin:</span> <span class="string">obfs</span>,</span><br><span class="line">      <span class="attr">plugin-opts:</span> &#123; <span class="attr">mode:</span> <span class="string">http</span> &#125;,</span><br><span class="line">    &#125; <span class="comment"># 公司使用的是ss協議</span></span><br><span class="line">  <span class="bullet">-</span> &#123;</span><br><span class="line">      <span class="attr">type:</span> <span class="string">trojan</span>,</span><br><span class="line">      <span class="attr">name:</span> <span class="string">&quot;TEST-TROJAN&quot;</span>,</span><br><span class="line">      <span class="attr">server:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>,</span><br><span class="line">      <span class="attr">port:</span> <span class="number">443</span>,</span><br><span class="line">      <span class="attr">password:</span> <span class="number">123456</span>,</span><br><span class="line">      <span class="comment">#sni</span></span><br><span class="line">      <span class="attr">skip-cert-verify:</span> <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="attr">proxy-groups:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">WORK</span>, <span class="attr">type:</span> <span class="string">select</span>, <span class="attr">proxies:</span> [<span class="string">&quot;TEST-SS&quot;</span>] &#125; <span class="comment"># 將所需的proxy單獨進行分組</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">Proxy</span>, <span class="attr">type:</span> <span class="string">select</span>, <span class="attr">proxies:</span> [<span class="string">&quot;TEST-TROJAN&quot;</span>] &#125;</span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,</span> <span class="number">10.8</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12,</span> <span class="string">WORK</span> <span class="comment"># 根據rule將不同的請求轉發到所需的分組去</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,</span> <span class="number">172.30</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12,</span> <span class="string">WORK</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,</span> <span class="number">100.64</span><span class="number">.0</span><span class="number">.0</span><span class="string">/10,</span> <span class="string">DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">IP-CIDR,</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8,</span> <span class="string">DIRECT</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">DOMAIN-SUFFIX,</span> <span class="string">google.com,</span> <span class="string">Proxy</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是JWT？</title>
    <url>/2024/11/04/%E4%BB%80%E4%B9%88%E6%98%AFJWT%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="什么是-JWT？"><a href="#什么是-JWT？" class="headerlink" title="什么是 JWT？"></a>什么是 JWT？</h1><p>JWT（JSON Web Token）是一个开放标准（RFC 7519），它定义了一种紧凑且自包含的方式，用于在各方之间安全地传输信息。该信息可以是声明（claim）、有效期、签名或密钥。JWT 可以使用 HMAC 算法或 RSA 算法进行签名。</p>
<p>JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用性和伸缩性，大大减轻了服务端的压力。</p>
<p><strong>可以看出，JWT 更符合设计 RESTful API 时的「Stateless（无状态）」原则 。</strong></p>
<span id="more"></span>

<h1 id="JWT-拆分"><a href="#JWT-拆分" class="headerlink" title="JWT 拆分"></a>JWT 拆分</h1><p>JWT 本质上就是一组字串，通过（.）切分成三个为 Base64 编码的部分：</p>
<ul>
<li>Header（头部）：包含 JWT 的类型（JWT）、加密算法（如 HMAC SHA256 或 RSA）、以及签名（如 HMAC SHA256 或 RSA 签名）。</li>
<li>Payload（负载）：包含声明（claim）、有效期、以及其他一些信息。</li>
<li>Signature（签名）：由 Header 和 Payload 组合生成的签名，用于验证消息的完整性和身份。</li>
</ul>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>

<p>你可以在 <a href="https://jwt.io/">jwt.io</a> 这个网站上对 JWT 进行解码，解码之后得到的就是 Header、Payload、Signature 这三部分。</p>
<p>Header 和 Payload 都是 JSON 格式的数据，Signature 由 Payload、Header 和 Secret(密钥)通过特定的计算公式和加密算法得到。</p>
<h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>Header 部分包含了 JWT 的类型（JWT）、加密算法（如 HMAC SHA256 或 RSA）、以及签名（如 HMAC SHA256 或 RSA 签名）。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>typ 字段表示 JWT 类型，alg 字段表示加密算法。</p>
<h2 id="Payload"><a href="#Payload" class="headerlink" title="Payload"></a>Payload</h2><p>Payload 部分包含声明（claim）、有效期、以及其他一些信息。声明是关于用户身份和其他属性的声明，有效期是声明的生效时间和失效时间。</p>
<p>claims 分为三种类型：</p>
<ul>
<li>Registered claims：这些是预定义的声明，一般情况下，这些声明都是可选的，但建议使用。</li>
<li>Public claims：这些声明是公开的，任何人都可以定义。</li>
<li>Private claims：这些声明是私有的，只能在特定的场景下使用。</li>
</ul>
<p>一些常见的声明：</p>
<ul>
<li>iss（issuer）：签发人</li>
<li>sub（subject）：主题</li>
<li>aud（audience）：受众</li>
<li>exp（expiration time）：过期时间</li>
<li>nbf（not before）：生效时间</li>
<li>iat（issued at）：签发时间</li>
<li>jti（JWT ID）：JWT 唯一标识符</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;sub&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1234567890&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;John Doe&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;iat&quot;</span><span class="punctuation">:</span> <span class="number">1516239022</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p><strong>Payload 部分默认是不加密的，建议不要在其中存储敏感信息。</strong></p>
<h2 id="Signature"><a href="#Signature" class="headerlink" title="Signature"></a>Signature</h2><p>Signature 部分由 Header 和 Payload 组合生成的签名，用于验证消息的完整性和身份。</p>
<p>签名的计算公式为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">HMACSHA256(</span><br><span class="line">  base64UrlEncode(header) + &quot;.&quot; +</span><br><span class="line">  base64UrlEncode(payload),</span><br><span class="line">  &lt;SECRET_KEY&gt;)</span><br></pre></td></tr></table></figure>

<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c</span><br></pre></td></tr></table></figure>

<p>算出以上三个结果后，把 Header&#x2F;Payload&#x2F;Signature 三个部分用.连接起来就是完整的 JWT 字符串。</p>
<h1 id="如何基于-JWT-实现用户认证？"><a href="#如何基于-JWT-实现用户认证？" class="headerlink" title="如何基于 JWT 实现用户认证？"></a>如何基于 JWT 实现用户认证？</h1><ol>
<li>用户注册：用户填写注册信息，服务器生成 JWT，并返回给用户。</li>
<li>用户登录：用户输入用户名和密码，服务器验证用户名和密码，生成 JWT，并返回给用户。</li>
<li>用户访问受保护资源：用户携带 JWT 访问受保护资源，服务器验证 JWT 有效性，并允许访问。</li>
</ol>
<p>建议：</p>
<ol>
<li>JTW 存放在 <code>localStorage</code> 中，防止 CSRF 攻击。</li>
<li>常见做法是放在<code>HTTP Header</code>中，如<code>Authorization: Bearer &lt;JWT&gt;</code>。</li>
</ol>
<h1 id="如何加强-JWT-的安全性？"><a href="#如何加强-JWT-的安全性？" class="headerlink" title="如何加强 JWT 的安全性？"></a>如何加强 JWT 的安全性？</h1><p>JWT 包含了用户身份信息，如果被篡改，那么用户的身份就可能被伪造。</p>
<ul>
<li>签名验证：服务器在生成 JWT 时，会把 Header、Payload、Signature 三个部分用.连接起来，然后用密钥生成签名。如果签名验证失败，则说明 JWT 被篡改。</li>
<li>有效期验证：服务器在生成 JWT 时，会设置一个有效期，如果 JWT 过期，则说明 JWT 被篡改。</li>
<li>黑名单验证：服务器可以维护一个黑名单，如果发现 JWT 被加入黑名单，则说明 JWT 被篡改。</li>
</ul>
<p><strong>JWT 安全的核心在于签名，签名的核心在于密钥。</strong></p>
]]></content>
      <categories>
        <category>Backend</category>
      </categories>
      <tags>
        <tag>Backend</tag>
      </tags>
  </entry>
  <entry>
    <title>使用generator處理無限數據流</title>
    <url>/2020/10/07/%E4%BD%BF%E7%94%A8generator%E8%99%95%E7%90%86%E7%84%A1%E9%99%90%E6%95%B8%E6%93%9A%E6%B5%81/</url>
    <content><![CDATA[<h3 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h3><p>假設現在有一個數據非常多的數組,但是我們只需要它的前幾個數據,并且進行一定的操作,這時候可以使用 generator 來進行 take 的操作.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">from</span> = (<span class="params">arr</span>) =&gt; arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">filter</span> = (<span class="params">f</span>) =&gt;</span><br><span class="line">  <span class="keyword">function</span>* (iter) &#123;</span><br><span class="line">    <span class="keyword">let</span> v = iter.<span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">while</span> (!v.<span class="property">done</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_">f</span>(v.<span class="property">value</span>)) <span class="keyword">yield</span> v.<span class="property">value</span></span><br><span class="line">      v = iter.<span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">multipy</span> = (<span class="params">n</span>) =&gt;</span><br><span class="line">  <span class="keyword">function</span>* (iter) &#123;</span><br><span class="line">    <span class="keyword">let</span> v = iter.<span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">while</span> (!v.<span class="property">done</span>) &#123;</span><br><span class="line">      <span class="keyword">yield</span> v.<span class="property">value</span> * n</span><br><span class="line">      v = iter.<span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">take</span> = (<span class="params">n</span>) =&gt;</span><br><span class="line">  <span class="keyword">function</span>* (iter) &#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> v = iter.<span class="title function_">next</span>()</span><br><span class="line">    <span class="keyword">while</span> (!v.<span class="property">done</span> &amp;&amp; i &lt; n) &#123;</span><br><span class="line">      <span class="keyword">yield</span> v.<span class="property">value</span></span><br><span class="line">      i++</span><br><span class="line">      v = iter.<span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">pipe</span> = (<span class="params">...arr</span>) =&gt; arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">acc, func</span>) =&gt;</span> <span class="title function_">func</span>(acc))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([</span><br><span class="line">  ...<span class="title function_">pipe</span>(</span><br><span class="line">    <span class="title function_">from</span>(arr),</span><br><span class="line">    <span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v % <span class="number">2</span> === <span class="number">0</span>),</span><br><span class="line">    <span class="title function_">multipy</span>(<span class="number">3</span>),</span><br><span class="line">    <span class="title function_">take</span>(<span class="number">30</span>),</span><br><span class="line">    <span class="title function_">filter</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> v &gt; <span class="number">15</span>)</span><br><span class="line">  ),</span><br><span class="line">]) <span class="comment">// [18, 24, 30, 36]</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>全球央行数字货币进展调研</title>
    <url>/2019/12/16/%E5%85%A8%E7%90%83%E5%A4%AE%E8%A1%8C%E6%95%B0%E5%AD%97%E8%B4%A7%E5%B8%81%E8%BF%9B%E5%B1%95%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><p>随着消费者支付习惯的改变，现金的存在作用在不断弱化。无现金交易将成为下一个支付前沿。目前多国央行在筹备发行数字货币，数字货币的稳定性和安全性，是各国央行研发的重中之重。</p>
<span id="more"></span>

<h1 id="Report"><a href="#Report" class="headerlink" title="Report"></a>Report</h1><h2 id="多家央行准备发行数字货币"><a href="#多家央行准备发行数字货币" class="headerlink" title="多家央行准备发行数字货币"></a>多家央行准备发行数字货币</h2><p>IBM 和国际货币金融机构（OMFIF）联合发布的最新调查报告显示，首个央行数字货币（CBDC）预计将在未来五年内发行。</p>
<p>报告显示，多国央行考虑开发和发行央行数字货币（CBDC），未来五年内可能会有面向消费者的 CBDC 推出，而面向消费者的 CBDC 可能需要某种形式的公司合作。CBDC 是由中央银行发行的一种用来支付和结算的数字资产。央行数字货币预计分为两种：零售型和批发型。零售型主要供社会大众和公司使用，目的或将替代现有的法定货币 M0；批发型则用于银行间结算服务，这将有效提高支付效率，并降低与现有支付系统相关的成本和复杂性。</p>
<p>IBM 和 OMFIF 还根据调查得出结论，首个 CBDC 预计在未来五年内从一个小经济体中产生，并以明确的用途响应一个特定的政策目标。这个调查，从 2019 年 7 月开始，历时三个月，调查对象涉及 13 个发达经济体和 10 个新兴市场的央行官员。其中 73% 的受访者表示支持 CBDC，认为某些情况下，CBDC 将是现金的良好替代品。</p>
<h2 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h2><p>中国目前走在数字货币发行的前沿。据《财经》报道，由人民银行牵头，工、农、中、建四大国有商业银行，中国移动、中国电信、中国联通三大电信运营商共同参与的央行法定数字货币试点项目有望在深圳、苏州等地落地。</p>
<p>这距离首次法定数字货币试行间隔近三年，相较于上次试点，本次央行法定数字货币试点将走出央行系统，进入交通、教育、医疗等服务场景，触及 C 端用户，进入频繁应用阶段，试点银行可根据自身条件进行场景选择。该试点项目由央行货币金银局牵头，数字货币研究所具体落实。去年年底，央行货币金银局下的防伪处改为数字货币与防伪管理处，作为央行数字货币唯一的官方权威处室。</p>
<p>并且，法定数字货币的相关标准以及支付系统接入等测试工作也在同步推进中。</p>
<h2 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h2><p>10 月，美联储一份名为《数字货币、稳定币以及不断发展的支付格局》的报告中提到，央行数字货币可以是一种灵活的中央银行发行的货币形式，甚至可能有助于解决美元面临的特里芬困境。</p>
<p>但根据彭博社报道，美国财长 Steven Mnuchin 在众议院金融服务委员会的听证会上称，五年内美联储没有发行数字货币的必要，也不反对 Facebook 创建数字货币，但 Facebook 的数字货币 Libra 需要完全遵守银行保密和反洗钱规定，并且绝不能用于资助恐怖主义。</p>
<p>目前而言，美国对发行央行数字货币还持有一种观望状态。</p>
<h2 id="欧洲"><a href="#欧洲" class="headerlink" title="欧洲"></a>欧洲</h2><p>有消息称，如果欧洲内部支付成本仍然居高不下，私有支付系统不能解决支付成本问题，欧洲央行将推出数字货币用于内部支付结算，并称现金使用减少的迹象也将加速数字货币的实施。</p>
<h2 id="法国"><a href="#法国" class="headerlink" title="法国"></a>法国</h2><p>外媒称，法兰西银行行长宣布，法国将于 2020 年开始试验一种提供给金融机构的央行数字货币。并称将在 2020 年第一季度结束之前，开始试验并发布项目信息。并且有报道称，法国央行支付监督和市场基础设施局将改名为基础设施、创新和支付局。新的机构将负责央行在数字货币、支付和基础设施方面的创新。</p>
<h2 id="印度"><a href="#印度" class="headerlink" title="印度"></a>印度</h2><p>在距离印度央行下令禁止银行、电子钱包和支付网关提供商为加密货币交易所和其他与加密货币交易相关业务提供支持 18 个月后，其态度似乎在转变。印度央行已计划开发央行数字货币（CBDC），但尚未公布具体实施计划和时间。印度央行行长 Shaktikanta Das 表示随着技术发展，印度储备银行将在适当时候认真对待央行数字货币，但目前还处于起步阶段。</p>
<h2 id="泰国"><a href="#泰国" class="headerlink" title="泰国"></a>泰国</h2><p>2019 年 5 月，泰国中央银行和香港金融管理局签署了谅解备忘录，并表示香港和泰国的货币当局准备推出两层结构的数字货币，这是使用金融技术或金融科技为两个经济体之间的跨境资金转移创建原型的过程的一部分。</p>
<p>原型的第一层，称为 LionRock-Inathanon 项目。这将涉及到向参与试点计划的香港银行发行数字货币。香港金融管理局发言人称，第二层涉及银行将数字货币分发给其企业客户，以便与其他银行或其他公司进行批发付款。</p>
<p>这项计划的主要目的是，以研究「央行数字货币」在跨境支付领域里的应用，从而促进香港与泰国两地银行之间的双币种外汇交易同步交付，预计有关的联合报告将会于 2020 年第一季公布。该项「央行数字货币计划」与中国人民银行正在开发的数字货币相比，是不同的使用案例。央行专注于替换流通中的现金，而 LionRock 项目的重点则是简化银行与公司之间的跨境转账和付款。</p>
<h2 id="突尼斯"><a href="#突尼斯" class="headerlink" title="突尼斯"></a>突尼斯</h2><p>突尼斯已经宣布推出本国货币 Dinar 的数字版本「E-Dinar」，这个北非小国成为全国第一个发行中央银行数字货币（CBDC）的国家。突尼斯已经与俄罗斯公司 Universa 建立合作，通过 Universa 的区块链平台发行 E-Dinar。在上线时，突尼斯中央银行行长 Marouane EI Abassi 与国际货币基金组织（IMF）的代表之间象征性的进行了一次转账。</p>
<h1 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h1><p>全世界各国都对央行数字货币（CBDC）表现出了兴趣，但目前尚未出现有决定意义的央行数字货币。随着技术的进步，以及科技金融在整体金融框架中所占地位越来越重，央行数字货币的出现，将会对货币政策和金融系统稳定性产生重大影响。央行数字货币的发行除了需要技术的辅助，也需要有足够的框架来确保治理和风险管理，才能保证其健康稳定的发展。</p>
<p>本文来自：<a href="https://mp.weixin.qq.com/s/smwDr0QN-YQStOHBXAK-Cg">全球央行数字货币进展调研｜标准共识</a></p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>News</tag>
      </tags>
  </entry>
  <entry>
    <title>创建对象的多种方式</title>
    <url>/2020/07/29/%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A4%9A%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>缺点：对象无法区分，所有的实例指向一个原型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  o.<span class="property">name</span> = name</span><br><span class="line">  o.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Edward&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Person</span>) <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Object</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h3><p>缺点：每次创建实例时，每个方法需要被创建一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// create function</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Prototype"><a href="#Prototype" class="headerlink" title="Prototype"></a>Prototype</h3><p>缺点：</p>
<ol>
<li>所有的属性和方法都共享</li>
<li>不能初始化值</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Person</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Edward&quot;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Constructor-Prototype"><a href="#Constructor-Prototype" class="headerlink" title="Constructor &amp; Prototype"></a>Constructor &amp; Prototype</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">constructor</span>: <span class="title class_">Person</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Safe-constructor"><a href="#Safe-constructor" class="headerlink" title="Safe constructor"></a>Safe constructor</h3><p>没有公共属性，方法也不使用<code>this</code>对象，无法识别对象所属类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line">  o.<span class="property">name</span> = name</span><br><span class="line">  o.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> name <span class="comment">// formal parameter</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;Edward&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()) <span class="comment">// Edward</span></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&quot;Jack&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="title function_">getName</span>()) <span class="comment">// also Edward</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>函数的扩展</title>
    <url>/2018/08/13/%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="函数的默认值"><a href="#函数的默认值" class="headerlink" title="函数的默认值"></a>函数的默认值</h3><p>在 ES6 之前，不能直接为函数指定默认值，只能采用变通的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (y === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    y = <span class="string">&quot;world&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>) <span class="comment">//hello test</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment">//hello</span></span><br></pre></td></tr></table></figure>

<p>ES6 允许为函数的参数设置默认值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">log</span>(<span class="params">x, y = <span class="string">&quot;world&quot;</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>) <span class="comment">//hello world</span></span><br><span class="line"><span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;&quot;</span>) <span class="comment">//hello</span></span><br><span class="line"></span><br><span class="line"><span class="attr">eg</span>: <span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">0</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Point</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">x</span> + <span class="string">&quot; &quot;</span> + p.<span class="property">y</span>) <span class="comment">//0 0</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>参数的默认值是 lazy evaluation 的，每次都重新计算默认值</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">f = x + <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(f)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">//2</span></span><br><span class="line">x = <span class="number">3</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h3 id="解构赋值与默认值结合使用"><a href="#解构赋值与默认值结合使用" class="headerlink" title="解构赋值与默认值结合使用"></a>解构赋值与默认值结合使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">&#123; x, y = <span class="number">5</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(&#123;&#125;) <span class="comment">//undefined 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span> &#125;) <span class="comment">//1 5</span></span><br><span class="line"><span class="title function_">foo</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;) <span class="comment">//1 2</span></span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">//TypeError: Cannot destructure property `x` of &#x27;undefined&#x27; or &#x27;null&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>写法不同，默认值不同</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">m1</span>(<span class="params">&#123; x = <span class="number">0</span>, y = <span class="number">0</span> &#125; = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="comment">//默认值是空对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">m2</span>(<span class="params">&#123; x, y &#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">m1</span>() <span class="comment">//0 0</span></span><br><span class="line"><span class="title function_">m2</span>() <span class="comment">//0 0</span></span><br><span class="line"><span class="title function_">m1</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;) <span class="comment">//1 2</span></span><br><span class="line"><span class="title function_">m2</span>(&#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;) <span class="comment">//1 2</span></span><br><span class="line"><span class="title function_">m1</span>(&#123;&#125;) <span class="comment">//0 0</span></span><br><span class="line"><span class="title function_">m2</span>(&#123;&#125;) <span class="comment">//undefined undefined</span></span><br></pre></td></tr></table></figure>

<p>如果传入 undefined，将触发该参数等于默认值，null 没有效果</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">x = <span class="number">1</span>, y = <span class="number">2</span></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(<span class="literal">undefined</span>, <span class="literal">null</span>) <span class="comment">//1 null</span></span><br></pre></td></tr></table></figure>

<p><strong>利用默认参数可以指定某一个参数不得省略，省略就报错</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throwIfMissing</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Missing parameter&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">mustBeProvided = throwIfMissing()</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> mustBeProvided</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>() <span class="comment">//Error: Missing parameter</span></span><br></pre></td></tr></table></figure>

<p><strong>可以将参数默认值设为 undefined，表明这个参数是可以省略的</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">optional = <span class="literal">undefined</span></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数的-length-属性"><a href="#函数的-length-属性" class="headerlink" title="函数的 length 属性"></a>函数的 length 属性</h3><p>length 不计从默认参数开始的参数个数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;(<span class="keyword">function</span> (<span class="params">a</span>) &#123;&#125;).<span class="property">length</span> <span class="comment">//1</span></span><br><span class="line">;(<span class="keyword">function</span> (<span class="params">a = <span class="number">5</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">//0</span></span><br><span class="line">;(<span class="keyword">function</span> (<span class="params">a, b = <span class="number">1</span></span>) &#123;&#125;).<span class="property">length</span> <span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h3 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h3><p>ES6 引入了 rest 参数，用于获取函数的多余参数，这样就不用使用 arguments 对象了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">...values</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> value <span class="keyword">of</span> values) sum += value</span><br><span class="line">  <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">//10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//arguments变量的写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sortNumbers</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>).<span class="title function_">sort</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//rest参数的写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">sortNumbers</span> = (<span class="params">...numbers</span>) =&gt; numbers.<span class="title function_">sort</span>()</span><br></pre></td></tr></table></figure>

<p><strong>函数的 length 属性也不包括 rest 参数</strong></p>
<h3 id="name-属性"><a href="#name-属性" class="headerlink" title="name 属性"></a>name 属性</h3><p>函数的 name 属性返回该函数的函数名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">foo.<span class="property">name</span> <span class="comment">//&#x27;foo&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6</span></span><br><span class="line">f.<span class="property">name</span> <span class="comment">//&#x27;f&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = <span class="keyword">function</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">bar.<span class="property">name</span> <span class="comment">//&#x27;baz&#x27;</span></span><br></pre></td></tr></table></figure>

<p>Function 构造函数返回的函数实例，name 属性的值为 anonymous。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Function</span>().<span class="property">name</span> <span class="comment">//&#x27;anonymous&#x27;</span></span><br></pre></td></tr></table></figure>

<p>bind 返回的函数，name 属性值会加上 bound 前缀。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">foo.<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">//&#x27;bound foo&#x27;</span></span><br><span class="line">;(<span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;).<span class="title function_">bind</span>(&#123;&#125;).<span class="property">name</span> <span class="comment">//&#x27;bound &#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params">v</span>) =&gt; v</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">function</span> (<span class="params">v</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果箭头函数的代码块多于一条语句，就要使用大括号括起来。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">num1, num2</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于大括号被解释为代码块，所以如果直接返回一个对象，必须在对象外加上括号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">get</span> = (<span class="params">id</span>) =&gt; (&#123; <span class="attr">id</span>: id, <span class="attr">name</span>: <span class="string">&quot;get&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>可以与变量解构结合使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">full</span> = (<span class="params">&#123; first, last &#125;</span>) =&gt; first + <span class="string">&quot;,&quot;</span> + last</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">full</span>(<span class="params">person</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> person.<span class="property">first</span> + <span class="string">&quot;,&quot;</span> + person.<span class="property">last</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项</strong></p>
<ul>
<li>函数体内的 this 对象就是定义时所在的对象，而不是使用时所在的对象。</li>
<li>不可当做构造函数，不能使用 new 命令。</li>
<li>不可使用 arguments 对象，该对象在函数体内不存在，可以使用 rest 参数代替。</li>
<li>不可以使用 yield 命令，因此不能做 Generator 函数。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;id:&quot;</span>, <span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> id = <span class="number">21</span></span><br><span class="line">foo.<span class="title function_">call</span>(&#123; <span class="attr">id</span>: <span class="number">4</span> &#125;) <span class="comment">//id: 4</span></span><br></pre></td></tr></table></figure>

<h3 id="嵌套的箭头函数"><a href="#嵌套的箭头函数" class="headerlink" title="嵌套的箭头函数"></a>嵌套的箭头函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">insert</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">into</span>: <span class="keyword">function</span> (<span class="params">array</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">after</span>: <span class="keyword">function</span> (<span class="params">afterValue</span>) &#123;</span><br><span class="line">          array.<span class="title function_">splice</span>(array.<span class="title function_">indexOf</span>(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value)</span><br><span class="line">          <span class="keyword">return</span> array</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">insert</span>(<span class="number">2</span>).<span class="title function_">into</span>([<span class="number">1</span>, <span class="number">3</span>]).<span class="title function_">after</span>(<span class="number">1</span>) <span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="comment">//箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">insert</span> = (<span class="params">value</span>) =&gt; (&#123;</span><br><span class="line">  <span class="attr">into</span>: <span class="function">(<span class="params">array</span>) =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">after</span>: <span class="function">(<span class="params">afterValue</span>) =&gt;</span> &#123;</span><br><span class="line">      array.<span class="title function_">splice</span>(array.<span class="title function_">indexOf</span>(afterValue) + <span class="number">1</span>, <span class="number">0</span>, value)</span><br><span class="line">      <span class="keyword">return</span> array</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="apply-的简易实现"><a href="#apply-的简易实现" class="headerlink" title="apply 的简易实现"></a>apply 的简易实现</h3><p><code>Function.apply(thisArg: any, argArray?: any)</code>第一个参数用于接受 this 对象，剩余参数为<code>arguments</code>。<br>所以可以根据思路：</p>
<ul>
<li>将<code>this</code>挂载到<code>thisArg.fn</code>上</li>
<li>通过<code>thisArg.fn</code>传递参数，获取返回值</li>
<li>删除<code>thisArg.fn</code></li>
<li>返回</li>
</ul>
<p><strong>在浏览器中，如果第一个参数为<code>this</code>，那么需要将<code>thisArg</code>设置为<code>window</code>对象。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">my_apply</span> = <span class="keyword">function</span> (<span class="params">context, array</span>) &#123;</span><br><span class="line">  context = <span class="title class_">Object</span>(context) || <span class="variable language_">window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> result</span><br><span class="line">  <span class="keyword">if</span> (!array) &#123;</span><br><span class="line">    result = context.<span class="title function_">fn</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> args = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = array.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">      args.<span class="title function_">push</span>(<span class="string">`array[<span class="subst">$&#123;i&#125;</span>]`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    result = <span class="built_in">eval</span>(<span class="string">`context.fn(<span class="subst">$&#123;args&#125;</span>)`</span>) <span class="comment">// context.fn(array[0], array[1])</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="call-的简易实现"><a href="#call-的简易实现" class="headerlink" title="call 的简易实现"></a>call 的简易实现</h3><p>与<code>apply</code>的实现类似，区别在于参数的获取方式不同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">my_call</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> args = []</span><br><span class="line">  context = <span class="title class_">Object</span>(context) || <span class="variable language_">window</span> <span class="comment">// if call(null) then point to window</span></span><br><span class="line">  context.<span class="property">fn</span> = <span class="variable language_">this</span> <span class="comment">// put current function into context.fn</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>, len = <span class="variable language_">arguments</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    args.<span class="title function_">push</span>(<span class="string">`arguments[<span class="subst">$&#123;i&#125;</span>]`</span>) <span class="comment">// push the arguments into args</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="built_in">eval</span>(<span class="string">`context.fn(<span class="subst">$&#123;args&#125;</span>)`</span>) <span class="comment">// call function with parameters</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span> context.<span class="property">fn</span></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bind-的简易实现"><a href="#bind-的简易实现" class="headerlink" title="bind 的简易实现"></a>bind 的简易实现</h3><p><code>bind</code>有个最大的特点，就是绑定后的函数也可以使用<code>new</code>操作符创建对象，这时<code>bind</code>中指定的<code>this</code>就会被忽略，转而指向被构造的对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> age = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">age</span>: <span class="number">12</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">first</span> = <span class="string">&quot;Edward&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">age</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(text)</span><br><span class="line">&#125;</span><br><span class="line">foo.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">last</span> = <span class="string">&quot;Snowden&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bindFoo = foo.<span class="title function_">bind</span>(person, <span class="string">&quot;some text&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title function_">bindFoo</span>()</span><br><span class="line"><span class="comment">// 12</span></span><br><span class="line"><span class="comment">// some text</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> newObj = <span class="keyword">new</span> <span class="title function_">bindFoo</span>()</span><br><span class="line"><span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// some text</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj.<span class="property">first</span>, newObj.<span class="property">last</span>) <span class="comment">// Edward Snowden</span></span><br></pre></td></tr></table></figure>

<p>在上面这个例子中，不管是<code>person</code>中的<code>age</code>还是<code>Global</code>中的<code>age</code>，都没有被打印出来，因为此时的<code>this</code>已经指向了<code>newObj</code>。所以需要通过修改返回值来实现。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">my_bind</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">this</span> !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`need to be function`</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _this = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">let</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>) <span class="comment">// get the rest of arguments</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fTemp = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> fBound = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> bindArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>) <span class="comment">// get the arguments from the return function</span></span><br><span class="line">    <span class="keyword">return</span> _this.<span class="title function_">apply</span>(</span><br><span class="line">      <span class="variable language_">this</span> <span class="keyword">instanceof</span> fTemp ? <span class="variable language_">this</span> : context,</span><br><span class="line">      args.<span class="title function_">concat</span>(bindArgs)</span><br><span class="line">    ) <span class="comment">// check if it is be a constructor</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fTemp.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">  fBound.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fTemp</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fBound</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>前后端通信</title>
    <url>/2019/03/12/%E5%89%8D%E5%90%8E%E7%AB%AF%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><ul>
<li>同源策略（MDN 解释）：限制从一个源加载的文档或脚本如何与来自另一个源的资源进行交互。这是一个用于隔离潜在恶意文件的关键的安全机制。</li>
<li>源：协议、域名、端口。</li>
<li>限制：无法获取 Cookie 、 LocalStorage 和 IndexDB ，无法操作 dom ，不能发送 Ajax 。</li>
</ul>
<span id="more"></span>

<h3 id="前后端通信方式"><a href="#前后端通信方式" class="headerlink" title="前后端通信方式"></a>前后端通信方式</h3><ul>
<li>Ajax：不支持跨域。</li>
<li>WebSocket：支持跨域。</li>
<li>CORS：支持跨域。</li>
</ul>
<h3 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h3><p>readyState：</p>
<ul>
<li>0：请求未初始化</li>
<li>1：服务器连接已建立</li>
<li>2：请求已接收</li>
<li>3：请求处理中</li>
<li>4：请求完成，响应就绪</li>
</ul>
<p>触发顺序：</p>
<ol>
<li>xhr.onreadystatechange</li>
<li>xhr.onloadstart</li>
<li>xhr.upload.onloadstart</li>
<li>xhr.upload.onprogress</li>
<li>xhr.upload.onload</li>
<li>xhr.upload.onloaded</li>
<li>xhr.onprogress</li>
<li>xhr.onload</li>
<li>xhr.onloaded</li>
</ol>
<p>Ajax 请求：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ajax = <span class="keyword">function</span> (<span class="params">param</span>) &#123;</span><br><span class="line">  <span class="comment">// 兼容性处理</span></span><br><span class="line">  <span class="keyword">var</span> xhr = <span class="title class_">XMLHttpRequest</span></span><br><span class="line">    ? <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    : <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> type = (param.<span class="property">type</span> || <span class="string">&quot;get&quot;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">  <span class="keyword">var</span> url = param.<span class="property">url</span></span><br><span class="line">  <span class="keyword">if</span> (!url) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> data = param.<span class="property">data</span>,</span><br><span class="line">    dataArr = []</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 构造数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">    dataArr.<span class="title function_">push</span>(key + <span class="string">&quot;=&quot;</span> + data[key])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (type === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">    url = url + <span class="string">&quot;?&quot;</span> + dataArr.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">    xhr.<span class="title function_">open</span>(type, url)</span><br><span class="line">    xhr.<span class="title function_">send</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">    xhr.<span class="title function_">open</span>(type, url)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// post 请求头</span></span><br><span class="line">    xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line"></span><br><span class="line">    xhr.<span class="title function_">send</span>(dataArr.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">  &#125;</span><br><span class="line">  xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (param.<span class="property">success</span> &amp;&amp; param.<span class="property">success</span> <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">          <span class="keyword">var</span> result = xhr.<span class="property">responseText</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> result === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">            result = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(result)</span><br><span class="line">            param.<span class="property">success</span>.<span class="title function_">call</span>(xhr, result)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>update: Promise 改造</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title function_">ajax</span> = (<span class="params">&#123; type, url, data, header &#125;</span>) =&gt;</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 兼容性处理</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="title class_">XMLHttpRequest</span></span><br><span class="line">      ? <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">      : <span class="keyword">new</span> <span class="title class_">ActiveXObject</span>(<span class="string">&quot;Microsoft.XMLHTTP&quot;</span>)</span><br><span class="line"></span><br><span class="line">    type = (type || <span class="string">&quot;get&quot;</span>).<span class="title function_">toUpperCase</span>()</span><br><span class="line">    <span class="keyword">if</span> (!url) <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">let</span> dataArr = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> data) &#123;</span><br><span class="line">      dataArr.<span class="title function_">push</span>(key + <span class="string">&quot;=&quot;</span> + data[key])</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (type === <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">      url = url + <span class="string">&quot;?&quot;</span> + dataArr.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>)</span><br><span class="line">      xhr.<span class="title function_">open</span>(type, url)</span><br><span class="line">      xhr.<span class="title function_">send</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">      xhr.<span class="title function_">open</span>(type, url)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// post 请求头</span></span><br><span class="line">      xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&quot;Content-type&quot;</span>, <span class="string">&quot;application/x-www-form-urlencoded&quot;</span>)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> header) xhr.<span class="title function_">setRequestHeader</span>(key, header[key])</span><br><span class="line"></span><br><span class="line">      xhr.<span class="title function_">send</span>(dataArr.<span class="title function_">join</span>(<span class="string">&quot;&amp;&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> == <span class="number">200</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">          resolve.<span class="title function_">call</span>(<span class="literal">undefined</span>, xhr.<span class="property">responseText</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> reject.<span class="title function_">call</span>(<span class="literal">undefined</span>, xhr)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="跨域通信的方式："><a href="#跨域通信的方式：" class="headerlink" title="跨域通信的方式："></a>跨域通信的方式：</h3><ul>
<li>JSONP：只支持 GET 请求，通过 script 的异步加载实现</li>
<li>WebSocket</li>
<li>CORS：跨域时，会在请求头增加 Origin 字段</li>
<li>Hash</li>
<li>postMessage： window.postMessage() 发送</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>parseInt()的奇幻现象</title>
    <url>/2021/06/18/parseInt-%E7%9A%84%E5%A5%87%E5%B9%BB%E7%8E%B0%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="parseInt-中塞-number"><a href="#parseInt-中塞-number" class="headerlink" title="parseInt 中塞 number"></a>parseInt 中塞 number</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.000001</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="number">0.0000001</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>为什么会得到这样的结果？</p>
<ol>
<li><code>parseInt(arg: string)</code>：接收的是一个<code>string</code>变量。</li>
<li><code>0.0000001</code>转成<code>string</code>会变为<code>1e-7</code>。</li>
<li><code>parseInt(&#39;1e-7&#39;)</code>结果为<code>1</code>。</li>
</ol>
<p><strong>所以要截取小数，最好还是使用<code>Math.trunc(n)</code></strong></p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Bug</tag>
      </tags>
  </entry>
  <entry>
    <title>前端 .gitignore文件的配置</title>
    <url>/2019/03/05/%E5%89%8D%E7%AB%AF-gitignore%E6%96%87%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="gitignore-文件的配置"><a href="#gitignore-文件的配置" class="headerlink" title=".gitignore 文件的配置"></a>.gitignore 文件的配置</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Numerous always-ignore extensions</span><br><span class="line"></span><br><span class="line">_.bak</span><br><span class="line">_.patch</span><br><span class="line">_.diff</span><br><span class="line">_.err</span><br><span class="line"></span><br><span class="line"># temp file for git conflict merging</span><br><span class="line"></span><br><span class="line">_.orig</span><br><span class="line">_.log</span><br><span class="line">_.rej</span><br><span class="line">_.swo</span><br><span class="line">_.swp</span><br><span class="line">_.zip</span><br><span class="line">_.vi</span><br><span class="line">_~</span><br><span class="line">_.sass-cache</span><br><span class="line">_.tmp.html</span><br><span class="line">\*.dump</span><br><span class="line"></span><br><span class="line"># OS or Editor folders</span><br><span class="line"></span><br><span class="line">.DS*Store</span><br><span class="line">.*_</span><br><span class="line">.cache</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.tmproj</span><br><span class="line">_.esproj</span><br><span class="line">_.sublime-project</span><br><span class="line">_.sublime-workspace</span><br><span class="line">nbproject</span><br><span class="line">thumbs.db</span><br><span class="line">\*.iml</span><br><span class="line"></span><br><span class="line"># Folders to ignore</span><br><span class="line"></span><br><span class="line">.hg</span><br><span class="line">.svn</span><br><span class="line">.CVS</span><br><span class="line">.idea</span><br><span class="line">node_modules/</span><br><span class="line">jscoverage_lib/</span><br><span class="line">bower_components/</span><br><span class="line">dist/</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链是什么？</title>
    <url>/2024/08/07/%E5%8C%BA%E5%9D%97%E9%93%BE%E6%98%AF%E4%BB%80%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="区块链是什么？"><a href="#区块链是什么？" class="headerlink" title="区块链是什么？"></a>区块链是什么？</h1><p>区块链是一种分布式的、数字化的、不可篡改的账本，用于以安全透明的方式记录交易和存储数据。它基于一个去中心化的节点网络，这些节点共同维护一个唯一的真实来源，使参与者能够在无需中介的情况下与系统进行交互。</p>
<p>区块是一个数据容器结构，用于聚合交易并将其包含在公共账本中，即区块链。链中的每个区块包含一组已通过共识过程由节点网络验证和记录的交易。一旦区块被添加到链中，它就不能被更改或删除，从而创建了一个网络上所有交易的不可篡改的记录。</p>
<p>区块链因匿名人士（或团体）中本聪（Satoshi Nakamoto）在 2009 年发布比特币网络时而普及。比特币是一种加密货币网络，主要处理 BTC 资产在网络上的转移，无需可信中介或权威，同时确保网络本身的安全且不可被黑客攻击。（附注：比特币网络也可能是世界上最大的漏洞赏金项目——如果你能破解它，你将立即成为万亿富翁）。</p>
<p>随着时间的推移，比特币的设计激发了其他更强大的区块链网络的出现，例如以太坊（Ethereum）。</p>
<span id="more"></span>

<h2 id="状态管理"><a href="#状态管理" class="headerlink" title="状态管理"></a>状态管理</h2><p><img src="/images/what_is_blockchain_1.png" alt="状态管理"></p>
<p>区块链在启动时会从一个创世状态（Genesis State）开始。比特币的创世状态发生在 2009 年，公共网络上线时。以太坊的创世状态发生在 2015 年。</p>
<p>区块链上的每笔交易都会修改跨所有节点复制的全局状态。</p>
<p>由于存在数百万笔交易，这些交易会被分组到区块中，因此得名区块链。这些区块以加密可验证的方式链接在一起，使其具有历史可追溯性。网络的当前状态可以随时通过从创世区块开始，根据每个区块的信息进行状态转换来重新计算。</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>区块链网络是通过点对点分布式计算节点网络自主管理的。简单来说，可以将网络中的每个节点视为保存了一份全局交易账本的副本。因此，每个节点都可以单独验证和审计网络上的交易，确保没有非法行为。</p>
<p>另一种节点称为挖矿节点，负责将网络上的新交易分组到区块中，验证这些交易，并向其他节点提议将该区块包含到全局账本中。挖矿是计算上非常困难且需要安全执行的重要任务，因此被接受的区块的矿工会因其辛勤工作而获得代币奖励。</p>
<p>中本聪提出的巧妙机制解决了长期存在的去中心化双重支付问题: 使用区块链确认每个单位的值只被转移一次。</p>
<h2 id="去中心化"><a href="#去中心化" class="headerlink" title="去中心化"></a>去中心化</h2><p>通过在点对点节点网络中存储数据，区块链成为一种去中心化网络。与传统的集中式存储方法相比，这具有显著的优势。以下是集中化带来的一些问题的典型例子：</p>
<ul>
<li>集中系统中的数据泄露会暴露大量数据。</li>
<li>集中系统可以审查和关闭言论。</li>
<li>依赖于中央意味着上游问题会影响下游消费者（例如，AWS 宕机意味着大部分互联网也会随之宕机）。</li>
</ul>
<p>另一方面，去中心化带来了相反的好处：</p>
<ul>
<li>无审查：因为没有单一的权威或中介可以进行审查，所以不会有审查问题。</li>
<li>无停机：整体网络分布在全球数千个节点上，因此几乎没有停机时间。</li>
<li>高度抗攻击：使得操控或破坏数据变得不切实际。</li>
</ul>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li><strong>加密货币</strong>（Cryptocurrency）</li>
<li><strong>智能合约</strong>（Smart Contracts）</li>
<li><strong>去中心化金融</strong>（Decentralized Finance）</li>
<li><strong>游戏</strong>（Gaming）</li>
<li><strong>供应链追踪</strong>（Supply Chain Tracking）</li>
<li><strong>防伪</strong>（Counterfeiting Protection）</li>
<li><strong>数据隐私</strong>（Data Privacy）</li>
<li><strong>去中心化治理</strong>（Decentralized Governance）</li>
<li><strong>资产的可验证所有权</strong>（Verifiable Ownership of Assets）</li>
</ul>
<p>以及更多其他应用…</p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Web3</tag>
        <tag>Blockchain</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链项目需要注意哪些司法新动向</title>
    <url>/2019/12/17/%E5%8C%BA%E5%9D%97%E9%93%BE%E9%A1%B9%E7%9B%AE%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E5%93%AA%E4%BA%9B%E5%8F%B8%E6%B3%95%E6%96%B0%E5%8A%A8%E5%90%91/</url>
    <content><![CDATA[<h1 id="警方虚拟币法律知识的更新"><a href="#警方虚拟币法律知识的更新" class="headerlink" title="警方虚拟币法律知识的更新"></a>警方虚拟币法律知识的更新</h1><p>继沿海几座大城市的网警朋友积极学习区块链技术（存证等方面）和相关法律知识之后，内陆的经济警察也开始相关法律知识的更新。</p>
<p>我们发现，浙江某市的区块链内部研讨会议和技术复盘会议中，也出现了警察叔叔参与讨论，而且其对技术本身的研究颇深，出乎大家意料。这与两年前在人民大学与公检法朋友们沟通时的情况（彼时他们对区块链的陌生）形成了鲜明的对比。</p>
<p>这充分说明，已经有案子出现了，并且呈现一定活跃态势，司法机关严阵以待，提前用相关法律知识武装自己，以便更好地适应或许会出现的涉币案件潮。</p>
<p>反观链圈，几乎每一个区块链项目方都有“发币”的冲动，虽然我们理解“激励机制”对项目自身的作用，然而，一旦发币 ICO，在我国现有法律框架下会被定性为“非法的公开融资行为”，涉嫌非法集资类犯罪或非法经营罪等。</p>
<span id="more"></span>

<h1 id="懂币圈的人越来越多"><a href="#懂币圈的人越来越多" class="headerlink" title="懂币圈的人越来越多"></a>懂币圈的人越来越多</h1><p>曾几何时，我们以为坐在对面的检察官朋友对币圈不甚了解，近期发现，并非如此。为了办案准确，他们深入调研，甚至暗访；对于 token 的价值，并不是全盘否定，而是认为如果 token 对应有权益等，则 token 自身是有价值的，不能把发行代币的行为认定为“诈骗”，在实务中，也做出了“不批捕”的决定。</p>
<p>同时，在认定是否涉嫌非法吸收公众存款罪的问题上，检方对于“投资者特定与否”的认定相对严格，如果确实“私募”，那么，不构成刑法第 176 条非法吸收公众存款罪。但是，不一定会按照无罪处理，而是有可能选择计算机类犯罪予以补白。</p>
<p>对于“境外发币，境内无实质销售”的行为，当下，司法机关采取的方式还是相对宽容的，基本不会主动“穿透式审判”，而是“等子弹再飞一会儿”。因此，类似的项目方暂时可以喘息，记住千万不要回国内进行“路演”等销售活动，以免遭遇刑事风险。</p>
<h1 id="组织领导传销罪，浮出水面"><a href="#组织领导传销罪，浮出水面" class="headerlink" title="组织领导传销罪，浮出水面"></a>组织领导传销罪，浮出水面</h1><p>与飒姐同在一所高校任职兼职硕导的资深检察官，谈到其学生在某区按摩店门口窥见一群老人家认真听课：什么是区块链什么是虚拟币及如何投资。</p>
<p>这不禁让我们联想起数年前的 P2P 线下推广，十几年前的纳米技术线下推广，新瓶装旧酒，还是那个配方：传销行为。</p>
<p>诚然，传销行为本身只是违法行为，不构成犯罪。但是，我们必须说明，组织者和领导者是构成犯罪的。其中，读者需要特别注意的是，传销活动中的“讲师”应归属于“组织者领导者”的范围之内，应当受到刑法第 224 条之一组织领导传销罪的处理。</p>
<p>目前，在内陆一些城市拿区块链技术蒙骗投资者的不法活动有所抬头，相信办案机关不会坐视不管，传说中的“剿匪”工作势在必行，务必保护好老百姓的钱袋子。在此，飒姐也提醒诸位读者，不要轻信项目方的忽悠，您看中的是“回报”，人家看上的是您的“本金”。</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>目前法律的态度非常坚决，发币是非法公开融资，涉币交易所不允许在境内存在，一旦发现立刻取缔。同时，针对区块链项目的备案，已经如火如荼进行中，但备案不是许可，并不能因此获得“法律金钟罩”，如果涉嫌违法犯罪，该处理的时候绝不会手软。</p>
<p>本文来源于 <a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYyNTkyMA==&mid=2651117085&idx=1&sn=4d94044651ea27d594485c2c4800cb69&chksm=849dd2b2b3ea5ba4c294302f5cf3e19eb666424d3e641e83213c77c9dbe3cf5e06584a8d217a&scene=0&xtrack=1">肖飒 lawyer</a></p>
]]></content>
      <categories>
        <category>Blockchain</category>
      </categories>
      <tags>
        <tag>Blockchain</tag>
        <tag>News</tag>
      </tags>
  </entry>
  <entry>
    <title>Start learning FP</title>
    <url>/2019/03/27/%E5%88%9D%E6%B6%89FP/</url>
    <content><![CDATA[<h3 id="Functional-Programming"><a href="#Functional-Programming" class="headerlink" title="Functional Programming"></a>Functional Programming</h3><p>经过这几天的了解，越觉得 FP 十分有趣<br>给个例子:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// a simple function</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// the same as</span></span><br><span class="line"><span class="keyword">let</span> add = <span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在 ES6 中，存在着箭头函数。所以上面的函数可以写成这个形式：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params">a, b</span>) =&gt; a + b</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="构造另一个-function"><a href="#构造另一个-function" class="headerlink" title="构造另一个 function"></a>构造另一个 function</h3><p>现在写一个新的 function :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title function_">multiply</span> = (<span class="params">x, y</span>) =&gt; x * y</span><br></pre></td></tr></table></figure>

<h3 id="Let’s-start"><a href="#Let’s-start" class="headerlink" title="Let’s start"></a>Let’s start</h3><p>现在我们用上面两个例子计算下 <code>2 * 3 + 2 * 4</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="title function_">multiply</span>(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line">result <span class="comment">// 14</span></span><br></pre></td></tr></table></figure>

<p>试试 <code>2 + (2 + 3) == (2 + 2) + 3</code>是正确的吗：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">add</span>(<span class="number">2</span>, <span class="title function_">add</span>(<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">add</span>(<span class="title function_">add</span>(<span class="number">2</span>, <span class="number">2</span>), <span class="number">3</span>)</span><br><span class="line">result1 === result2 <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以看出 add(a, add(b, c)) === add(add(a, b), c)</span></span><br></pre></td></tr></table></figure>

<p>再试试 <code>2 * 3 + 2 * 4 === (2 + 4) * 2</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">add</span>(<span class="title function_">multipy</span>(<span class="number">2</span>, <span class="number">3</span>), <span class="title function_">multipy</span>(<span class="number">2</span>, <span class="number">4</span>))</span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">multipy</span>(<span class="title function_">add</span>(<span class="number">3</span>, <span class="number">4</span>), <span class="number">2</span>)</span><br><span class="line">result1 === result2 <span class="comment">// true</span></span><br><span class="line"><span class="comment">// Nice Job</span></span><br></pre></td></tr></table></figure>

<h3 id="add-的链式调用"><a href="#add-的链式调用" class="headerlink" title="add 的链式调用"></a>add 的链式调用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> add.<span class="property">result</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    add.<span class="property">result</span> += n</span><br><span class="line">    <span class="keyword">return</span> add</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">add.<span class="property">result</span> = <span class="number">0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>)(<span class="number">1</span>)(<span class="number">1</span>)())</span><br></pre></td></tr></table></figure>

<p>result:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>原型模式</title>
    <url>/2019/07/11/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">LoopImages</span> = <span class="keyword">function</span> (<span class="params">imageArr, container</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">imageArr</span> = imageArr</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">container</span> = container</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">LoopImages</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">createImage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;create image&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">changeImage</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;change image&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SlideLoopImg</span> = <span class="keyword">function</span> (<span class="params">imageArr, container</span>) &#123;</span><br><span class="line">  <span class="title class_">LoopImages</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, imageArr, container)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SlideLoopImg</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">LoopImages</span>() <span class="comment">// 继承</span></span><br><span class="line"><span class="title class_">SlideLoopImg</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">changeImage</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 重写</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;slide loop change image&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">let</span> slideImage = <span class="keyword">new</span> <span class="title class_">SlideLoopImg</span>([<span class="string">&quot;1.jpg&quot;</span>, <span class="string">&quot;2.jpg&quot;</span>], <span class="string">&quot;slide&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(slideImage.<span class="property">container</span>)</span><br><span class="line">slideImage.<span class="title function_">changeImage</span>()</span><br></pre></td></tr></table></figure>

<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * copy object</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">prototypeExtend</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> F = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line">  <span class="comment">// let F = new Function()</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j <span class="keyword">in</span> <span class="variable language_">arguments</span>[i]) &#123;</span><br><span class="line">      F.<span class="property"><span class="keyword">prototype</span></span>[j] = <span class="variable language_">arguments</span>[i][j]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">let</span> car = <span class="title function_">prototypeExtend</span>(</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">speed</span>: <span class="number">20</span>,</span><br><span class="line">    <span class="attr">fast</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span>++</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is faster&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">slow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span>--</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is slower&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">stop</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">speed</span> = <span class="number">0</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;is stop&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">currentSpeed</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">speed</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">car.<span class="title function_">fast</span>()</span><br><span class="line">car.<span class="title function_">fast</span>()</span><br><span class="line">car.<span class="title function_">fast</span>()</span><br><span class="line">car.<span class="title function_">fast</span>()</span><br><span class="line"></span><br><span class="line">car.<span class="title function_">currentSpeed</span>()</span><br><span class="line">car.<span class="title function_">stop</span>()</span><br><span class="line"></span><br><span class="line">car.<span class="title function_">currentSpeed</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>复旦大学修改章程</title>
    <url>/2019/12/18/%E5%A4%8D%E6%97%A6%E5%A4%A7%E5%AD%A6%E4%BF%AE%E6%94%B9%E7%AB%A0%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="教育部关于同意复旦大学章程部分条款修改的批复-教政法函〔2019〕18-号"><a href="#教育部关于同意复旦大学章程部分条款修改的批复-教政法函〔2019〕18-号" class="headerlink" title="教育部关于同意复旦大学章程部分条款修改的批复 教政法函〔2019〕18 号"></a>教育部关于同意复旦大学章程部分条款修改的批复 教政法函〔2019〕18 号</h1><p>重点修改如下：</p>
<h2 id="序言第一段"><a href="#序言第一段" class="headerlink" title="序言第一段"></a>序言第一段</h2><p>“国人自主创办”改为“中国人自主创办”。</p>
<h2 id="序言第二段"><a href="#序言第二段" class="headerlink" title="序言第二段"></a>序言第二段</h2><p>删去“学校的办学理念是其校歌所传颂的……思想自由……强调以学术精神滋养师生，坚守价值，治学严谨，为学有恒。学校始终秉持团结、服务与牺牲的精神，强调学校、师生的社会责任和国家使命。”增加“敦行爱国奉献……海纳百川、追求卓越。学校倡导‘文明、健康、团结、奋发’的校风和‘刻苦、严谨、求实、创新’的学风，强调坚持理想、探究真理、正谊明道、守护文明。”</p>
<span id="more"></span>

<h2 id="序言第三段"><a href="#序言第三段" class="headerlink" title="序言第三段"></a>序言第三段</h2><p>新增“学校坚持中国共产党的领导，全面贯彻党的教育方针，坚持马克思主义指导地位和社会主义办学方向，扎根中国大地办大学，始终为人民服务，为中国共产党治国理政服务，为巩固和发展中国特色社会主义制度服务，为改革开放和社会主义现代化建设服务。立足中国特色社会主义新时代，学校落实立德树人根本任务，全面履行人才培养、科学研究、社会服务、文化传承创新、国际交流合作的使命……致力于培养德智体美劳全面发展的社会主义建设者和接班人，在实现中华民族伟大复兴的历史进程中建设中国特色世界顶尖大学”。</p>
<h2 id="原章程第四条"><a href="#原章程第四条" class="headerlink" title="原章程第四条"></a>原章程第四条</h2><p>删去“师生治学、民主管理”，新增“实行中国共产党复旦大学委员会（以下简称党委）领导下的校长负责制”。</p>
<h2 id="原章程第六条"><a href="#原章程第六条" class="headerlink" title="原章程第六条"></a>原章程第六条</h2><p>“师生依法独立自主开展学术研究”改为“鼓励师生依法自主开展学术研究”；新增“学校营造人心聚学的氛围”。</p>
<h2 id="原章程第八条"><a href="#原章程第八条" class="headerlink" title="原章程第八条"></a>原章程第八条</h2><p>“独立自主办学”修改为：“自主办学”。</p>
<h2 id="原章程第九条"><a href="#原章程第九条" class="headerlink" title="原章程第九条"></a>原章程第九条</h2><p>删去“学校实行中国共产党复旦大学委员会（简称学校党委）领导下的校长负责制”，“统一领导学校工作”改为“全面领导学校工作”，“校长独立负责地行使职权”改为“校长依法负责地行使职权”。</p>
<h2 id="原章程第九条-1"><a href="#原章程第九条-1" class="headerlink" title="原章程第九条"></a>原章程第九条</h2><h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>新增“（校长）贯彻执行党的教育方针……依靠全校师生员工推动学校科学发展，培养德智体美劳全面发展的社会主义建设者和接班人”。</p>
<h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><p>删去“（支持校长）审定学校基本管理制度”。</p>
<h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><p>新增“坚持党管干部原则，按照干部管理权限负责干部的选拔、教育、培养、考核和监督，讨论决定学校内部组织机构的设置及其负责人的人选，依照有关程序推荐校级领导干部和优秀年轻干部人选，做好老干部工作”。</p>
<h3 id="（四）"><a href="#（四）" class="headerlink" title="（四）"></a>（四）</h3><p>新增“坚持党管人才原则，讨论决定学校人才工作规划和重大人才政策，创新人才工作体制机制，优化人才成长环境，统筹推进学校教师队伍及其他各类人才队伍建设”。</p>
<h3 id="（五）"><a href="#（五）" class="headerlink" title="（五）"></a>（五）</h3><p>新增“坚持用习近平新时代中国特色社会主义思想武装师生员工头脑，在师生员工中培育和践行社会主义核心价值观，牢牢掌握学校意识形态工作的领导权、管理权、话语权，维护学校安全稳定，促进和谐校园建设”。</p>
<h3 id="（七）"><a href="#（七）" class="headerlink" title="（七）"></a>（七）</h3><p>新增“加强学校党委自身建设，加强对学院(系)等基层党组织的领导，做好发展党员和党员教育、管理、服务工作，扩大党内基层民主，充分发挥基层党组织的战斗堡垒作用和党员的先锋模范作用”。</p>
<h3 id="（八）"><a href="#（八）" class="headerlink" title="（八）"></a>（八）</h3><p>新增“落实全面从严治党主体责任，领导学校党的纪律检查工作，推进惩治和预防腐败体系建设”。</p>
<h3 id="（九）"><a href="#（九）" class="headerlink" title="（九）"></a>（九）</h3><p>新增“向党委报告重大决议执行情况，向教职工代表大会报告工作，组织处理教职工代表大会、学生（研究生）代表大会、工会会员代表大会和团员代表大会有关行政工作的提案，支持学校各级党组织、民主党派基层组织、群众组织和学术组织开展工作”。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li>新增“党委全体会议……主要对事关学校改革发展稳定和师生员工切身利益及党的建设等全局性重大问题作出决策。常务委员会……主要对学校改革发展稳定和教学、科研、行政管理及党的建设等方面的重要事项作出决定，按照干部管理权限和有关程序推荐、提名、决定任免干部。党委常委会由党委全委会选举产生……党委书记主持党委全面工作”。</li>
<li>复旦大学纪律检查委员会……根据相关规定履行职责”改为“依据党的章程和党内法规履行职责”。</li>
</ul>
<h2 id="原章程第十条"><a href="#原章程第十条" class="headerlink" title="原章程第十条"></a>原章程第十条</h2><p>新增“（校长）在学校党委领导下，贯彻党的教育方针，组织实施学校党委有关决议，行使高等教育法等规定的各项职权”。</p>
<h2 id="原章程第十一条"><a href="#原章程第十一条" class="headerlink" title="原章程第十一条"></a>原章程第十一条</h2><p>删去“学校党政领导不参加学术委员会”；新增“依据民主集中制产生（学术委员会）”。</p>
<h2 id="原章程第十二条"><a href="#原章程第十二条" class="headerlink" title="原章程第十二条"></a>原章程第十二条</h2><h3 id="（二）-1"><a href="#（二）-1" class="headerlink" title="（二）"></a>（二）</h3><p>新增“在国家授权范围内（审议学科专业）”。</p>
<h3 id="其他-1"><a href="#其他-1" class="headerlink" title="其他"></a>其他</h3><p>新增“依据民主集中制产生（学位评定委员会）……连任一般不超过两届”。</p>
<h2 id="原章程第十三条"><a href="#原章程第十三条" class="headerlink" title="原章程第十三条"></a>原章程第十三条</h2><p>“教学指导委员会委员……由校长聘任”改为“依照民主集中制原则产生”。<br>新增“院系教学指导分委员会，组成人员依照民主集中制原则产生”。</p>
<h2 id="原章程第十四条"><a href="#原章程第十四条" class="headerlink" title="原章程第十四条"></a>原章程第十四条</h2><p>删除“校务委员会领导下设各专门咨询委员会”以及专门咨询委员会的全部章程。</p>
<h2 id="新增一条第十四条"><a href="#新增一条第十四条" class="headerlink" title="新增一条第十四条"></a>新增一条第十四条</h2><p>“学校设置教材委员会。教材委员会在学校党委领导下，对学校教材建设、使用与管理工作进行指导、审议和监督……主要职责是：（一）贯彻党和国家关于教材工作的方针政策，指导和统筹全校教材工作……”。</p>
<h2 id="原章程第十五条"><a href="#原章程第十五条" class="headerlink" title="原章程第十五条"></a>原章程第十五条</h2><p>教职工代表大会“评议学校各级党政负责人”改为“参与评议”。<br>新增“（共青团复旦大学委员会）指导学生会和研究生会，指导和管理学生社团工作”。</p>
<h2 id="原章程第十七条"><a href="#原章程第十七条" class="headerlink" title="原章程第十七条"></a>原章程第十七条</h2><p>删去“学校是以学术为核心的共同体”。</p>
<h2 id="原章程第二十条"><a href="#原章程第二十条" class="headerlink" title="原章程第二十条"></a>原章程第二十条</h2><p>新增“学校构建以思想政治教育为根本……的教育教学体系”。</p>
<h2 id="原章程第二十一条"><a href="#原章程第二十一条" class="headerlink" title="原章程第二十一条"></a>原章程第二十一条</h2><p>自主设置与境外高校联合学位项目”改为“授予名誉博士学位须报国务院学位委员会批准”。</p>
<h2 id="原章程第二十四条"><a href="#原章程第二十四条" class="headerlink" title="原章程第二十四条"></a>原章程第二十四条</h2><p>新增“学院……落实立德树人根本任务”。</p>
<h2 id="原章程第二十六条"><a href="#原章程第二十六条" class="headerlink" title="原章程第二十六条"></a>原章程第二十六条</h2><p>“学校确定一名副校长兼任上海医学院院长”，改为“上海医学院党政主要领导由校领导兼任”。</p>
<h2 id="新增第二十八条"><a href="#新增第二十八条" class="headerlink" title="新增第二十八条"></a>新增第二十八条</h2><p>“学院（系）直属学校的实体研究机构设立党的组织，发挥政治核心作用，负责党的建设和思想政治工作，保证监督本单位贯彻落实党的路线方针政策及学校决定，支持行政班子在其职责范围内负责地开展工作。”第二十九条：“学院（系）依照有关规定通过党政联席会议，研究决定本单位重大事项，健全集体领导、党政分工合作、协调运行的工作机制。涉及办学方向、教师队伍建设、师生员工切身利益等重大事项，由党组织先研究再提交党政联席会议决定。”。</p>
<h2 id="原章程第三十二条"><a href="#原章程第三十二条" class="headerlink" title="原章程第三十二条"></a>原章程第三十二条</h2><p>教师的专职新增“教育”，从“教学科研”变为“教育教学科研”；“代表性成果为核心的晋升制度”修改为：“有基本标准要求与代表性成果相结合的评价制度”。</p>
<h2 id="原章程第三十五条加入增加第一款"><a href="#原章程第三十五条加入增加第一款" class="headerlink" title="原章程第三十五条加入增加第一款"></a>原章程第三十五条加入增加第一款</h2><p>“（教职员工负有义务）忠诚于党的教育事业，学习贯彻党和国家的教育方针，坚持立德树人根本任务，践行社会主义核心价值观”（此条直接引用），“为人师表，爱护学生、立德树人”修改为：“恪守师德规范，履行育人职责，为人师表，敬业爱生，引领学生健康成长”。</p>
<h2 id="第三十一条-原章程第四十三条（现第四十五条）"><a href="#第三十一条-原章程第四十三条（现第四十五条）" class="headerlink" title="第三十一条 原章程第四十三条（现第四十五条）"></a>第三十一条 原章程第四十三条（现第四十五条）</h2><p>学生在校，应当以学习为要务。”修改为：“学生在校，应当以学习为要务，注重价值观、知识和能力的全面协调发展，不断提升综合素养。”。</p>
<h2 id="第三十三条-原章程第四十八条（现第五十条）"><a href="#第三十三条-原章程第四十八条（现第五十条）" class="headerlink" title="第三十三条 原章程第四十八条（现第五十条）"></a>第三十三条 原章程第四十八条（现第五十条）</h2><p>“学生群体内部事务，原则上由学生自主管理、自我完善”修改为：“学生群体应不断提高自我教育、自我管理、自我服务、自我监督的意识和能力”。</p>
<h2 id="新增一条第三十七条"><a href="#新增一条第三十七条" class="headerlink" title="新增一条第三十七条"></a>新增一条第三十七条</h2><p>“学校根据需要，按照国家法律、法规和学校有关规定聘请外籍教师。外籍教师应遵守中国的法律、法规及学校的规章制度和纪律，对华友好，尊重中国的社会公德和风俗习惯，享有相应权利，履行相关义务。”。</p>
<h2 id="原章程第四十八条"><a href="#原章程第四十八条" class="headerlink" title="原章程第四十八条"></a>原章程第四十八条</h2><p>删去“复旦大学学生会……是学生自我服务、自我管理、自我教育、自我监督的组织”。<br>复旦大学学生会以及研究生会……是全校本（专）科学生以及研究生参与学生事务的最高权力机关”，改为“是全校本（专）科学生以及研究生参与学生事务的重要形式”。</p>
<h2 id="新增一条第五十二条"><a href="#新增一条第五十二条" class="headerlink" title="新增一条第五十二条"></a>新增一条第五十二条</h2><p>“学校招收外国留学生，提供学历教育和非学历教育，依照国家有关法律、法规和学校的规章制度对外国留学生进行教育和管理。外国留学生应遵守中国的法律、法规及学校的规章制度和纪律，尊重中国的社会公德和风俗习惯，享有相应权利，履行相关义务”。</p>
<h2 id="原章程第五十九条"><a href="#原章程第五十九条" class="headerlink" title="原章程第五十九条"></a>原章程第五十九条</h2><p>“（学校董事会旨在）健全监督机制”改为“共商共促学校发展”。</p>
<h1 id="复旦大学校歌"><a href="#复旦大学校歌" class="headerlink" title="复旦大学校歌"></a>复旦大学校歌</h1><blockquote><p>刘大白 词<br>丰子恺 曲<br>歌词：<br>复旦复旦旦复旦，巍巍学府文章焕，<br><strong>学术独立思想自由，政罗教网无羁绊</strong>，<br>无羁绊前程远，向前，向前，向前进展。<br>复旦复旦旦复旦，日月光华同灿烂。<br>复旦复旦旦复旦，师生一德精神贯，<br>巩固学校维护国家，先忧后乐交相勉，<br>交相勉前程远，向前，向前，向前进展。<br>复旦复旦旦复旦，日月光华同灿烂。<br>复旦复旦旦复旦，沪滨屹立东南冠，<br>作育国士恢廓学风，震欧铄美声名满，<br>声名满前程远，向前，向前，向前进展。<br>复旦复旦旦复旦，日月光华同灿烂。</p>
<footer><strong>百度百科</strong><cite><a href="https://baike.baidu.com/item/%E5%A4%8D%E6%97%A6%E5%A4%A7%E5%AD%A6%E6%A0%A1%E6%AD%8C">复旦大学校歌_百度百科</a></cite></footer></blockquote>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>图的邻接表表示法</title>
    <url>/2019/03/14/%E5%9B%BE%E7%9A%84%E9%82%BB%E6%8E%A5%E8%A1%A8%E8%A1%A8%E7%A4%BA%E6%B3%95/</url>
    <content><![CDATA[<h3 id="邻接表"><a href="#邻接表" class="headerlink" title="邻接表"></a>邻接表</h3><p>存储方式：表头存放节点，相邻节点存放于之后的链表中。<br>** 使用 Map 模拟 **</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Graph</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">point</span> = []</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span> = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addPoint</span>(<span class="params">point</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">point</span>.<span class="title function_">push</span>(point)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">set</span>(point, [])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 无向</span></span><br><span class="line">  <span class="title function_">addEdge</span>(<span class="params">pointA, pointB</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(pointA).<span class="title function_">push</span>(pointB)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(pointB).<span class="title function_">push</span>(pointA)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="variable language_">this</span>.<span class="property">point</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item + <span class="string">&quot; -&gt; &quot;</span> + <span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">get</span>(item).<span class="title function_">join</span>(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> graph = <span class="keyword">new</span> <span class="title class_">Graph</span>()</span><br><span class="line"><span class="keyword">var</span> topArr = [<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> topArr) &#123;</span><br><span class="line">  graph.<span class="title function_">addPoint</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;E&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;H&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;F&quot;</span>, <span class="string">&quot;G&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;B&quot;</span>)</span><br><span class="line">graph.<span class="title function_">addEdge</span>(<span class="string">&quot;I&quot;</span>, <span class="string">&quot;C&quot;</span>)</span><br><span class="line"></span><br><span class="line">graph.<span class="title function_">print</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串的扩展</title>
    <url>/2018/08/10/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="codePointAt"><a href="#codePointAt" class="headerlink" title="codePointAt()"></a>codePointAt()</h3><p>JavaScript-16 的格式储存，每个字符固定为两个字节。需要四个字节储存的字符，JavaScript 会认为那是两个字符。<br>ES6 提供了 codePointAt 方法，能够正确处理四个字节储存的字符，返回一个字符的码点。</p>
<h3 id="String-fromCodePoint"><a href="#String-fromCodePoint" class="headerlink" title="String.fromCodePoint()"></a>String.fromCodePoint()</h3><p>识别 UTF-32 字符。</p>
<h3 id="includes-、startsWith-、endsWith"><a href="#includes-、startsWith-、endsWith" class="headerlink" title="includes()、startsWith()、endsWith()"></a>includes()、startsWith()、endsWith()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line">s.<span class="title function_">startWith</span>(<span class="string">&quot;hello&quot;</span>) <span class="comment">//true</span></span><br><span class="line">s.<span class="title function_">endsWith</span>(<span class="string">&quot;d&quot;</span>) <span class="comment">//true</span></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&quot;o&quot;</span>) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">s.<span class="title function_">startsWith</span>(<span class="string">&quot;world&quot;</span>, <span class="number">6</span>) <span class="comment">//true;</span></span><br><span class="line">s.<span class="title function_">includes</span>(<span class="string">&quot;hello&quot;</span>, <span class="number">6</span>) <span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">repeat</span>(<span class="number">3</span>) <span class="comment">//&#x27;xxx&#x27;</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="number">0</span>) <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="number">2.9</span>) <span class="comment">//取整 -&gt; &#x27;nana&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="title class_">Infinity</span>) <span class="comment">//Error</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(-<span class="number">1</span>) <span class="comment">//Error</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(-<span class="number">0.9</span>) <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="title class_">NaN</span>) <span class="comment">//&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;na&quot;</span>.<span class="title function_">repeat</span>(<span class="string">&quot;3&quot;</span>) <span class="comment">//&#x27;nanana&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="padStart-padEnd"><a href="#padStart-padEnd" class="headerlink" title="padStart(), padEnd()"></a>padStart(), padEnd()</h3><p>首、尾补全</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>) <span class="comment">//&#x27;ababx&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&quot;ab&quot;</span>) <span class="comment">//&#x27;abax&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>, <span class="string">&quot;ab&quot;</span>) <span class="comment">//&#x27;xabab&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padStart</span>(<span class="number">5</span>) <span class="comment">//&#x27; x&#x27;</span></span><br><span class="line"><span class="string">&quot;x&quot;</span>.<span class="title function_">padEnd</span>(<span class="number">5</span>) <span class="comment">//&#x27;x &#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;1&quot;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&quot;0&quot;</span>) <span class="comment">//&#x27;0000000001&#x27;</span></span><br><span class="line"><span class="string">&quot;09-12&quot;</span>.<span class="title function_">padStart</span>(<span class="number">10</span>, <span class="string">&quot;YYYY-MM-DD&quot;</span>) <span class="comment">//&#x27;YYYY-09-12&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;test&quot;</span></span><br><span class="line">;<span class="string">`name : <span class="subst">$&#123;name&#125;</span>`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>,</span><br><span class="line">  y = <span class="number">2</span></span><br><span class="line">;<span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;x + y&#125;</span>`</span></span><br><span class="line"><span class="comment">//1 + 2 = 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;</span><br><span class="line">;<span class="string">`&#123;obj.x + obj.y&#125;`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">;<span class="string">`foo $(fn)`</span></span><br></pre></td></tr></table></figure>

<h3 id="String-raw"><a href="#String-raw" class="headerlink" title="String.raw()"></a>String.raw()</h3><p>String.raw 方法用来充当模板字符串的处理函数，返回一个斜线都被转义的字符串，对应于替换变量后的模板字符串。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">String</span>.<span class="title function_">raw</span>(<span class="string">`Hi\n<span class="subst">$&#123;<span class="number">1</span> + <span class="number">3</span>&#125;</span>`</span>)</span><br><span class="line"><span class="comment">//Hi\\n4</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>对象的扩展</title>
    <url>/2018/08/13/%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="属性名表达式"><a href="#属性名表达式" class="headerlink" title="属性名表达式"></a>属性名表达式</h3><p>JavaScript 定义属性有两种方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.<span class="property">foo</span> = <span class="literal">true</span></span><br><span class="line">obj[<span class="string">&quot;a&quot;</span> + <span class="string">&quot;bc&quot;</span>] = <span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>ES6 允许字面量定义对象时使用第二种方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> propKey = <span class="string">&quot;foo&quot;</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [propKey]: <span class="literal">true</span>,</span><br><span class="line">  [<span class="string">&quot;a&quot;</span> + <span class="string">&quot;bc&quot;</span>]: <span class="number">123</span>,</span><br><span class="line">  [<span class="string">&quot;he&quot;</span> + <span class="string">&quot;llo&quot;</span>]() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hi&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="方法的-name-属性"><a href="#方法的-name-属性" class="headerlink" title="方法的 name 属性"></a>方法的 name 属性</h3><p>方法的 name 属性也返回函数名。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">sayName</span>.<span class="property">name</span> <span class="comment">//&#x27;sayName&#x27;</span></span><br></pre></td></tr></table></figure>

<p><strong>如果对象的方法使用了 getter 和 setter，则 name 的属性不是在该方法上面，而是在该方法属性的描述对象的 get 和 set 属性上面，返回值是方法名前面加上 get 和 set</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">foo</span>() &#123;&#125;,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">foo</span>(<span class="params">x</span>) &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// obj.foo.name;   //TypeError: Cannot read property &#x27;name&#x27; of undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> descriptor = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&quot;foo&quot;</span>)</span><br><span class="line">descriptor.<span class="property">get</span>.<span class="property">name</span> <span class="comment">//&#x27;get foo&#x27;</span></span><br><span class="line">descriptor.<span class="property">set</span>.<span class="property">name</span> <span class="comment">//&#x27;set foo&#x27;</span></span><br></pre></td></tr></table></figure>

<p>如果对象的方法是一个 Symbol 值，那么 name 属性返回的是这个 Symbol 值的描述。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> key1 = <span class="title class_">Symbol</span>(<span class="string">&quot;description&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> key2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [key1]() &#123;&#125;,</span><br><span class="line">  [key2]() &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj[key1].<span class="property">name</span> <span class="comment">//&#x27;[description]&#x27;</span></span><br><span class="line">obj[key2].<span class="property">name</span> <span class="comment">//&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h3><p>ES5 比较两个值是否相等，只有两个相等运算符：&#x3D;&#x3D;和&#x3D;&#x3D;&#x3D;，他们都有个缺点，前者会自动转换数据类型，后者 NaN 不等于自身，以及+0 等于-0。<br>ES6 提出了<em>Same-value-equality</em>算法来解决这个问题，Object.is()就是部署这个算法的新方法。<br>不同之处只有两个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">;+<span class="number">0</span> === -<span class="number">0</span> <span class="comment">//true</span></span><br><span class="line"><span class="title class_">NaN</span> === <span class="title class_">NaN</span> <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(+<span class="number">0</span>, -<span class="number">0</span>) <span class="comment">//false</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>ES5 可以用代码部署：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>, <span class="string">&#x27;is&#x27;</span> &#123;</span><br><span class="line">    value : <span class="keyword">function</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x === y) &#123;</span><br><span class="line">            <span class="comment">//针对+0不等于-0的情况</span></span><br><span class="line">            <span class="keyword">return</span> x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//针对NaN</span></span><br><span class="line">        <span class="keyword">return</span> x !== x &amp;&amp; y !== y;</span><br><span class="line">    &#125;,</span><br><span class="line">    configurable : <span class="literal">true</span>,</span><br><span class="line">    enumerable : <span class="literal">false</span>,</span><br><span class="line">    writable : <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h3><p>Object.assign 方法用于将源对象的所有 <strong>可枚举</strong> 属性复制到目标对象。第一个参数是目标对象，后面的参数都是源对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> source1 = &#123; <span class="attr">b</span>: <span class="number">2</span> &#125;</span><br><span class="line"><span class="keyword">var</span> source2 = &#123; <span class="attr">c</span>: <span class="number">3</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target, source1, source2)</span><br><span class="line">target <span class="comment">//&#123; a : 1, b : 2, c : 3 &#125;</span></span><br></pre></td></tr></table></figure>

<p>如果只有一个参数，Object.assign()会直接返回该参数。<br>如果参数不是对象，会先转成对象，然后返回，由于 undefined 和 null 无法转变，所以如果将他们作为参数，就会报错。但是，如果 undefined 和 null 不在首参数，那就不会报错。<br>其他类型的值（数值、字符串和布尔值）不在首参数也不会报错，但是，除了字符串会以数组形式复制到目标对象，其他值都不会产生效果。<br><strong>Object.assign()方法实行的赋值是浅复制，如果源对象的某个属性的值是对象，那么目标对象得到的是这个对象的引用</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">1</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">assign</span>(obj2, obj1)</span><br><span class="line">obj1.<span class="property">a</span>.<span class="property">b</span> = <span class="number">2</span></span><br><span class="line">obj2.<span class="property">a</span>.<span class="property">b</span> <span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<p>对于这种嵌套对象，一旦遇到同名属性，处理的方法是替换而不是添加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&quot;c&quot;</span>, <span class="attr">d</span>: <span class="string">&quot;e&quot;</span> &#125; &#125;</span><br><span class="line"><span class="keyword">var</span> source = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="string">&quot;hello&quot;</span> &#125; &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(target.<span class="property">source</span>)</span><br><span class="line"><span class="comment">//target对象的a属性被source对象的a属性整个替换掉了</span></span><br></pre></td></tr></table></figure>

<p><strong>Object.assign()可以用来处理数组，但是会把数组当成对象来处理。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]) <span class="comment">//[4, 5, 3]</span></span><br></pre></td></tr></table></figure>

<p>常见用途：</p>
<ul>
<li>为对象添加属性：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">apply</span>(<span class="variable language_">this</span>, &#123; x, y &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>为对象添加方法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>, &#123;</span><br><span class="line">  <span class="title function_">someMethod</span>(<span class="params">arg1, arg2</span>) &#123;&#125;,</span><br><span class="line">  <span class="title function_">anotherMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">someMethod</span> = <span class="keyword">function</span> (<span class="params">arg1, arg2</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SomeClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">anotherMethod</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>克隆对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//只克隆对象自身值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, origin)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//保持继承链的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> originProto = <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(origin)</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(originProto), origin)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>合并多个对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">target, ...sources</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(target, ...sources)</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并到一个对象</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">merge</span> = (<span class="params">...source</span>) =&gt; <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, ...source)</span><br></pre></td></tr></table></figure>

<ul>
<li>为属性指定默认值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">DEFAULTS</span> = &#123;</span><br><span class="line">  <span class="attr">logLevel</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">outputFormat</span>: <span class="string">&quot;html&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">processContent</span>(<span class="params">options</span>) &#123;</span><br><span class="line">  options = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable constant_">DEFAULTS</span>, options)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(options)</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性的可枚举性"><a href="#属性的可枚举性" class="headerlink" title="属性的可枚举性"></a>属性的可枚举性</h3><p>对象的每一个属性都有一描述对象，用于控制该属性的行为，Object.getOwnPropertyDescriptor 方法可以获取该属性的描述对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">foo</span>: <span class="number">123</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&quot;foo&quot;</span>)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     value : 123,</span></span><br><span class="line"><span class="comment">//     writable : true,</span></span><br><span class="line"><span class="comment">//     enumerable : true,</span></span><br><span class="line"><span class="comment">//     configurable : false</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>enumerable 属性成为可枚举性，如果该属性为 false，就表示某些操作会忽略当前属性。<br>ES5 有三个操作会忽略 enumerable 为 false 的属性：</p>
<ul>
<li>for…in 循环：只遍历对象自身和继承的可枚举属性。</li>
<li>Object.keys()： 返回对象自身的所有可枚举属性的键名。</li>
<li>JSON.stringify()：只串行化对象自身的可枚举属性。</li>
</ul>
<p><strong>ES6 规定，所有 Class 的原型的方法都是不可枚举的</strong></p>
<h3 id="属性的遍历"><a href="#属性的遍历" class="headerlink" title="属性的遍历"></a>属性的遍历</h3><p>ES6 共有五种方法遍历对象的属性：</p>
<ul>
<li>for…in 循环：遍历对象自身和继承的可枚举属性（不含 Symbol 属性）。</li>
<li>Object.keys()：返回一个数组，包括对象自身的（不含继承的）所有可枚举属性（不含 Symbol 属性）。</li>
<li>Object.getOwnPropertyNames(obj)：返回一个数组，包含对象自身的所有属性（不含 Symbol 属性，但是包括不可枚举属性）。</li>
<li>Object.getOwnPropertySymbols(obj)： 返回一个数组，包含对象自身的所有 Symbol 属性。</li>
<li>Reflect.ownKeys(obj)：返回一个数组，包含对象自身的所有属性，不管属性名是 Symbol 还是字符串，也不管是否可枚举。<br>以上方法遍历对象属性时都遵守同样的属性遍历次序规则：</li>
<li>首先遍历所有属性名为数值的属性，按照数字排序。</li>
<li>其次遍历所有属性名为字符串的属性，按照生成时间排序。</li>
<li>最后遍历所有属性名为 Symbol 值的属性，按照生成时间排序。</li>
</ul>
<h3 id="proto属性"><a href="#proto属性" class="headerlink" title="proto属性"></a><strong>proto</strong>属性</h3><p><strong>proto</strong>属性用来读取或设置当前对象的 prototype 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ES6写法</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">__proto__</span> = someOtherObj</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5写法</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(someOtherObj)</span><br><span class="line">obj.<span class="property">method</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p>在实现上，<strong>proto</strong>调用的是 Object.prototype.<strong>proto</strong>，实现如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>, <span class="string">&quot;__proto__&quot;</span>, &#123;</span><br><span class="line">  <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _thisObj = <span class="title class_">Object</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(_thisObj)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">set</span>(<span class="params">proto</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span> === <span class="literal">undefined</span> || <span class="variable language_">this</span> === <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isObject</span>(<span class="variable language_">this</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_">isObject</span>(proto)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> status = <span class="title class_">Reflect</span>.<span class="title function_">setPrototypeOf</span>(<span class="variable language_">this</span>, proto)</span><br><span class="line">    <span class="keyword">if</span> (!status) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TypeError</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isObject</span>(<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>(value) === value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果一个对象本身部署了<strong>proto</strong>属性，则该属性的值就是对象的原型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(&#123; <span class="attr">__proto__</span>: <span class="literal">null</span> &#125;) <span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<h3 id="Object-setPrototypeOf"><a href="#Object-setPrototypeOf" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>Object.setPrototypeOf()用于设置一个对象的 prototype 对象，返回参数本身。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> proto = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">x</span>: <span class="number">10</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, proto)</span><br><span class="line">proto.<span class="property">y</span> = <span class="number">20</span></span><br><span class="line">proto.<span class="property">z</span> = <span class="number">30</span></span><br><span class="line"><span class="comment">//obj对象可以读取proto对象的属性</span></span><br><span class="line">obj.<span class="property">y</span> <span class="comment">//20</span></span><br><span class="line">obj.<span class="property">z</span> <span class="comment">//30</span></span><br></pre></td></tr></table></figure>

<p>如果第一个参数不是对象，就会自动转为对象，但是由于返回的还是第一个参数，所以这个操作不会有任何的结果。<br><strong>如果第一个参数是 undefined 或 null，则会报错</strong></p>
<h3 id="Object-setPrototypeOf-1"><a href="#Object-setPrototypeOf-1" class="headerlink" title="Object.setPrototypeOf()"></a>Object.setPrototypeOf()</h3><p>Object.setPrototypeOf()用于读取一个对象的 prototype 对象。<br>如果第一个参数不是对象，则会自动转为对象。<br><strong>如果第一个参数是 undefined 或 null，则会报错</strong></p>
<h3 id="Object-keys-、Object-values-、Object-entries"><a href="#Object-keys-、Object-values-、Object-entries" class="headerlink" title="Object.keys()、Object.values()、Object.entries()"></a>Object.keys()、Object.values()、Object.entries()</h3><p>Object.keys()返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键名。<br>Object.values()返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键值。<br>Object.entries()返回一个数组，成员是参数对象自身的（不含继承）所有可遍历属性的键值对数组。<br>实现 Object.entries()：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Generator函数版本</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">entries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    <span class="keyword">yield</span> [key, obj[key]]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非Generator函数版本</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">entries</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>([key, obj[key]])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; x, y, ...z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">4</span> &#125;</span><br><span class="line">x <span class="comment">//1</span></span><br><span class="line">y <span class="comment">//2</span></span><br><span class="line">z <span class="comment">//&#123; a : 3, b : 4 &#125;</span></span><br></pre></td></tr></table></figure>

<p>扩展运算符可以用于合并两个对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> ab = &#123; ...a, ...b &#125;</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="keyword">let</span> ab = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, a, b)</span><br></pre></td></tr></table></figure>

<h3 id="Object-getOwnPropertyDescriptors"><a href="#Object-getOwnPropertyDescriptors" class="headerlink" title="Object.getOwnPropertyDescriptors()"></a>Object.getOwnPropertyDescriptors()</h3><p>ES5 的 Object.getOwnPropertyDescriptor()方法用来返回某个对象属性的 descriptor。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">p</span>: <span class="string">&quot;a&quot;</span> &#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptor</span>(obj, <span class="string">&quot;p&quot;</span>)</span><br><span class="line"><span class="comment">// Object &#123;</span></span><br><span class="line"><span class="comment">//     value : &#x27;a&#x27;,</span></span><br><span class="line"><span class="comment">//     writable : true,</span></span><br><span class="line"><span class="comment">//     enumerable: true,</span></span><br><span class="line"><span class="comment">//     configurable: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<p>ES2017 引入了 Object.getOwnPropertyDescriptors()方法，返回指定对象所有自身属性（非继承）的 descriptor。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="number">123</span>,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">bar</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">foo</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(obj)</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//     foo: &#123;</span></span><br><span class="line"><span class="comment">//         value : 123,</span></span><br><span class="line"><span class="comment">//         writable: true,</span></span><br><span class="line"><span class="comment">//         enumerable: true,</span></span><br><span class="line"><span class="comment">//         configurable: true</span></span><br><span class="line"><span class="comment">//     &#125;,</span></span><br><span class="line"><span class="comment">//     bar: &#123;</span></span><br><span class="line"><span class="comment">//         get: [Function bar],</span></span><br><span class="line"><span class="comment">//         set: undefined,</span></span><br><span class="line"><span class="comment">//         enumerable: true,</span></span><br><span class="line"><span class="comment">//         configurable: true</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="使用-Object-prototype-toString-进行类型判断"><a href="#使用-Object-prototype-toString-进行类型判断" class="headerlink" title="使用 Object.prototype.toString()进行类型判断"></a>使用 Object.prototype.toString()进行类型判断</h3><p><code>Object.prototype</code>能够更好的识别出类型，<code>typeof</code>只能识别出基础类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> date) <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(date)) <span class="comment">// [object Date]</span></span><br></pre></td></tr></table></figure>

<p>可以识别的类型有：</p>
<ul>
<li>123: [object Number]</li>
<li>‘1234’: [object String]</li>
<li>true: [object Boolean]</li>
<li>undefined: [object Undefined]</li>
<li>null: [object null]</li>
<li>{foo: ‘bar’}: [object Object]</li>
<li>[1, 2, 3]: [object Array]</li>
<li>new Date(): [object Date]</li>
<li>new Error(): [object Error]</li>
<li>&#x2F;a+&#x2F;g: [object RegExp]</li>
<li>function a() {}: [object Function]</li>
<li>Math: [object Math]</li>
<li>JSON: [object JSON]</li>
<li>arguments: [object arguments]</li>
</ul>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>工厂模式</title>
    <url>/2019/07/09/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Basketball</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;basketball&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Basketball</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getMember</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getBallSize</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">FootBall</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;football&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">FootBall</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getMember</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">11</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getBallSize</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Tennis</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;tennis&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Tennis</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getMember</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getBallSize</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;small&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">SportFactory</span> = <span class="keyword">function</span> (<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="keyword">switch</span> (name) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;basketball&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Basketball</span>()</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;football&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FootBall</span>()</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;tennis&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tennis</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> footBall = <span class="keyword">new</span> <span class="title class_">SportFactory</span>(<span class="string">&#x27;football&#x27;</span>)</span><br><span class="line">footBall.<span class="title function_">getMember</span>()</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Product base attribute</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="title function_">operation</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProduct1</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">operation</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is Product1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProduct2</span> <span class="keyword">implements</span> <span class="title class_">Product</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">operation</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is Product2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Creator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="title function_">factoryMethod</span>(): <span class="title class_">Product</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">operation</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> product = <span class="variable language_">this</span>.<span class="title function_">factoryMethod</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> product.<span class="title function_">operation</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreator1</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Creator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">factoryMethod</span>(): <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct1</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteCreator2</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Creator</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">factoryMethod</span>(): <span class="title class_">Product</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProduct2</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clientCode</span>(<span class="params">creator: Creator</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(creator.<span class="title function_">operation</span>())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clientCode</span>(<span class="keyword">new</span> <span class="title class_">ConcreteCreator1</span>())</span><br><span class="line"><span class="title function_">clientCode</span>(<span class="keyword">new</span> <span class="title class_">ConcreteCreator2</span>())</span><br></pre></td></tr></table></figure>

<h3 id="安全工厂"><a href="#安全工厂" class="headerlink" title="安全工厂"></a>安全工厂</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Factory</span> = <span class="keyword">function</span> (<span class="params">type, content</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Factory</span>) &#123;</span><br><span class="line">    <span class="comment">// check if is instance Factory</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="variable language_">this</span>[type](content)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Factory</span>(type, content)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Factory</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="title class_">Java</span>: <span class="keyword">function</span> (<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title class_">JavaScript</span>: <span class="keyword">function</span> (<span class="params">content</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(content)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> data = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;Java&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;This is Java&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;JavaScript&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;This is JavaScript&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; data.<span class="property">length</span>; i++) <span class="title class_">Factory</span>(data[i].<span class="property">type</span>, data[i].<span class="property">content</span>)</span><br></pre></td></tr></table></figure>

<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * to extend superType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">subType</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">superType</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">VehicleFactory</span> = (<span class="params">subType, superType</span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">VehicleFactory</span>[superType] === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    F.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">VehicleFactory</span>[superType]()</span><br><span class="line">    subType.<span class="property">constuctor</span> = subType</span><br><span class="line">    subType.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;don&#x27; not have this abstract class&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// create base class</span></span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Car</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">type</span> = <span class="string">&#x27;car&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>.<span class="property">Car</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getPrice</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getSpeed</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;abstract&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable constant_">BMW</span> = <span class="keyword">function</span> (<span class="params">price, speed</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">price</span> = price</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">speed</span> = speed</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">VehicleFactory</span>(<span class="variable constant_">BMW</span>, <span class="string">&#x27;Car&#x27;</span>) <span class="comment">// interface</span></span><br><span class="line"><span class="variable constant_">BMW</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">  <span class="attr">getPrice</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">price</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">getSpeed</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">speed</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">let</span> myBmw = <span class="keyword">new</span> <span class="title function_">BMW</span>(<span class="number">10000</span>, <span class="number">100</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(myBmw.<span class="title function_">getPrice</span>())</span><br></pre></td></tr></table></figure>

<figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// product interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * base operation</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * inject some operation</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">AbstractProductA</span>&#125; <span class="variable">product</span></span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">string</span>&#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="title function_">functionB</span>(<span class="attr">product</span>: <span class="title class_">AbstractProductA</span>): <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concrete production</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA1</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is functionA from ProductA1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductA2</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is functionA from ProductA2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB1</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is functionA from ProductB1&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">functionB</span>(<span class="attr">product</span>: <span class="title class_">AbstractProductA</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Function B2: &#x27;</span> + product.<span class="title function_">functionA</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteProductB2</span> <span class="keyword">implements</span> <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">  <span class="title function_">functionA</span>(): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;This is functionA from ProductB2&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">functionB</span>(<span class="attr">product</span>: <span class="title class_">AbstractProductA</span>): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;Function B2: &#x27;</span> + product.<span class="title function_">functionA</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// factory interface</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createProductA</span>(): <span class="title class_">AbstractProductA</span></span><br><span class="line">  <span class="title function_">createProductB</span>(): <span class="title class_">AbstractProductB</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// concrete factory</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory1</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createProductA</span>(): <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA1</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createProductB</span>(): <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductB1</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ConcreteFactory2</span> <span class="keyword">implements</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">  <span class="title function_">createProductA</span>(): <span class="title class_">AbstractProductA</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductA2</span>()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">createProductB</span>(): <span class="title class_">AbstractProductB</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ConcreteProductB2</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// usage</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * use with different facotry.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">AbstractFactory</span>&#125; <span class="variable">factory</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">clientCode</span>(<span class="params">factory: AbstractFactory</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> productA = factory.<span class="title function_">createProductA</span>()</span><br><span class="line">  <span class="keyword">const</span> productB = factory.<span class="title function_">createProductB</span>()</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(productB.<span class="title function_">functionA</span>())</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(productB.<span class="title function_">functionB</span>(productA))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">clientCode</span>(<span class="keyword">new</span> <span class="title class_">ConcreteFactory1</span>())</span><br><span class="line"><span class="title function_">clientCode</span>(<span class="keyword">new</span> <span class="title class_">ConcreteFactory2</span>())</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>巴黎圣母院大火</title>
    <url>/2019/04/16/%E5%B7%B4%E9%BB%8E%E5%9C%A3%E6%AF%8D%E9%99%A2%E5%A4%A7%E7%81%AB/</url>
    <content><![CDATA[<h3 id="又一次的见证历史。"><a href="#又一次的见证历史。" class="headerlink" title="又一次的见证历史。"></a>又一次的见证历史。</h3><blockquote>
<p>卡西莫多失去了他心爱的姑娘，也失去了他心爱的钟楼。</p>
</blockquote>
<p><img src="/images/sub-buzz-10836-1555373659-1.webp" alt="大火照片1"></p>
<p><img src="/images/mmexport1555390040545.jpg" alt="大火照片2"></p>
<p><img src="/images/%E5%B7%B4%E9%BB%8E%E5%9C%A3%E6%AF%8D%E9%99%A2%E5%A4%A7%E7%81%AB3.jpeg" alt="大火照片3"></p>
<p>废墟中的十字架依旧闪发着光芒</p>
<p><img src="/images/%E5%B7%B4%E9%BB%8E%E5%9C%A3%E6%AF%8D%E9%99%A2%E5%A4%A7%E7%81%AB4.jpeg" alt="废墟"></p>
<p>PS： 看到一条推，说你看大火都没有把十字架给损毁，难道你还不相信上帝吗？下面回：因为金的熔点比木高很多。XD</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>广度优先搜索</title>
    <url>/2019/03/13/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/</url>
    <content><![CDATA[<h3 id="广度优先搜索"><a href="#广度优先搜索" class="headerlink" title="广度优先搜索"></a>广度优先搜索</h3><p>在 N * M 的网格中，从 start 走到 end 。<br>广度解法：需要一个队列，从 start 节点开始，当一个节点抛出时，将它周围的节点入队，直至抛出的节点是 end 节点。<br>模拟网格：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = [</span><br><span class="line">  <span class="comment">// map[x][y]</span></span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">  [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>],</span><br><span class="line">]</span><br><span class="line"><span class="title function_">find</span>(map)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>算法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">find</span>(<span class="params">map</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> maxX = map.<span class="property">length</span> - <span class="number">1</span>, <span class="comment">// 最大 x 坐标</span></span><br><span class="line">    maxY, <span class="comment">// 最大 y 坐标</span></span><br><span class="line">    queue = [], <span class="comment">// 寻路队列</span></span><br><span class="line">    start_x = -<span class="number">1</span>, <span class="comment">// 起始位置 x 坐标</span></span><br><span class="line">    start_y = -<span class="number">1</span>, <span class="comment">// 起始位置 y 坐标</span></span><br><span class="line">    end_x = -<span class="number">1</span>, <span class="comment">// 结束位置 x 坐标</span></span><br><span class="line">    end_y = -<span class="number">1</span>, <span class="comment">// 结束位置 y 坐标</span></span><br><span class="line">    unpassed = [] <span class="comment">// 用于判断是否经过的数组</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果数组长度为0，返回</span></span><br><span class="line">  <span class="keyword">if</span> (maxX &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    maxY = map[<span class="number">0</span>].<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 寻找起始坐标和终止坐标</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = map.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, innerLen = map[i].<span class="property">length</span>; j &lt; innerLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (map[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">        start_x = i</span><br><span class="line">        start_y = j</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (map[i][j] == <span class="number">2</span>) &#123;</span><br><span class="line">        end_x = i</span><br><span class="line">        end_y = j</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (start_x != -<span class="number">1</span> &amp;&amp; end_x != -<span class="number">1</span>) <span class="keyword">break</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 缺少起始位置或者结束位置</span></span><br><span class="line">  <span class="keyword">if</span> (start_x == -<span class="number">1</span> || end_x == -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;地图有误&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化路径数组</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = map.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> result = []</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, innerLen = map[i].<span class="property">length</span>; j &lt; innerLen; j++) &#123;</span><br><span class="line">      result.<span class="title function_">push</span>(<span class="literal">true</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    unpassed.<span class="title function_">push</span>(result)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 起始位置进入队列</span></span><br><span class="line">  queue.<span class="title function_">push</span>([start_x, start_y])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">// 取出当前位置</span></span><br><span class="line">    <span class="keyword">var</span> [current_x, current_y] = queue.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断是否经过</span></span><br><span class="line">    <span class="keyword">if</span> (unpassed[current_x][current_y]) &#123;</span><br><span class="line">      unpassed[current_x][current_y] = <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">continue</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印路径数组</span></span><br><span class="line">    <span class="title function_">show</span>(unpassed)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 到达终点</span></span><br><span class="line">    <span class="keyword">if</span> (current_x == end_x &amp;&amp; current_y == end_y) <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 上方位置入队</span></span><br><span class="line">      <span class="keyword">if</span> (current_x &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([current_x - <span class="number">1</span>, current_y])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 右方位置入队</span></span><br><span class="line">      <span class="keyword">if</span> (current_y &lt; maxY) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([current_x, current_y + <span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 下方位置入队</span></span><br><span class="line">      <span class="keyword">if</span> (current_x &lt; maxX) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([current_x + <span class="number">1</span>, current_y])</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 左方位置入队</span></span><br><span class="line">      <span class="keyword">if</span> (current_y &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        queue.<span class="title function_">push</span>([current_x, current_y - <span class="number">1</span>])</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">map</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = map.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>, innerLen = map[i].<span class="property">length</span>; j &lt; innerLen; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!map[i][j]) &#123;</span><br><span class="line">        str += <span class="string">&quot;*&quot;</span></span><br><span class="line">      &#125; <span class="keyword">else</span> str += <span class="string">&quot;0&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>开坑</title>
    <url>/2018/08/10/%E5%BC%80%E5%9D%91/</url>
    <content><![CDATA[<h1 id="开坑第一篇"><a href="#开坑第一篇" class="headerlink" title="开坑第一篇"></a>开坑第一篇</h1><p>从大学开始就想着弄一篇自己的博客，但是一直都断断断续的。<br>在这个风雨交加的午间，我决定开坑了。<br>可能以后主要还是用于记笔记之类的吧，偶尔应该也会写点杂七杂八的东西。。</p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>惰性单例</title>
    <url>/2019/07/12/%E6%83%B0%E6%80%A7%E5%8D%95%E4%BE%8B/</url>
    <content><![CDATA[<h3 id="惰性单例"><a href="#惰性单例" class="headerlink" title="惰性单例"></a>惰性单例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">LazySingle</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> instance = <span class="literal">null</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">Single</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title class_">Method</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;public method&quot;</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title class_">Prototype</span>: <span class="string">&quot;some message&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!instance) instance = <span class="title class_">Single</span>()</span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">LazySingle</span>().<span class="property">Prototype</span>)</span><br><span class="line"><span class="title class_">LazySingle</span>().<span class="title class_">Method</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>尾调用</title>
    <url>/2018/08/13/%E5%B0%BE%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="尾调用"><a href="#尾调用" class="headerlink" title="尾调用"></a>尾调用</h3><p>Tail Call 是函数式编程的一个重要概念，就是指某个函数的最后一步是调用另一个函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">g</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>尾调用不一定出现在函数尾部，只要是最后一步操作即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (x &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">t</span>(x)</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">m</span>(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>函数调用会在内存中形成一个 call frame，保存调用位置和内部变量等信息。所有的 call frame 形成一个 call stack。<br>尾调用由于是函数的最后一步操作，所以不需要保留外层函数的 call frame，这就叫 Tail Call Optimization，即只保留内层函数的调用帧。</p>
<h2 id="尾递归"><a href="#尾递归" class="headerlink" title="尾递归"></a>尾递归</h2><p>递归非常耗内存，因为需要同时保存多个 call frame，很容易发生 stack overflow。但对于尾递归来说，由于只存在一个 call frame，所以不会发生溢出。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci</span>(<span class="params">n</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci</span>(n - <span class="number">1</span>) + <span class="title class_">Fibonacci</span>(n - <span class="number">2</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">10</span>)) <span class="comment">//89</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">100</span>)) <span class="comment">//overflow</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">500</span>)) <span class="comment">//overflow</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>尾递归优化如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Fibonacci</span>(<span class="params">n, ac1 = <span class="number">1</span>, ac2 = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) <span class="keyword">return</span> ac2</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Fibonacci</span>(n - <span class="number">1</span>, ac2, ac1 + ac2)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">10</span>)) <span class="comment">//89</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">100</span>)) <span class="comment">//573147844013817200000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Fibonacci</span>(<span class="number">500</span>)) <span class="comment">//2.2559151616193602e+104</span></span><br></pre></td></tr></table></figure>

<p>由此可见，尾调用优化对递归操作意义重大，<strong>所有 ECMAScript 的实现都必须部署尾调用优化</strong>。</p>
<h3 id="递归函数的改写"><a href="#递归函数的改写" class="headerlink" title="递归函数的改写"></a>递归函数的改写</h3><p>函数式编程有一个概念，叫 currying，将多参数的函数转换成单参数的形式。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘的例子</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">currying</span>(<span class="params">fn, n</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">m</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, m, n)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tailFactorial</span>(<span class="params">n, total</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">tailFactorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> factorial = <span class="title function_">currying</span>(tailFactorial, <span class="number">1</span>) <span class="comment">//fn, n 都已设定</span></span><br><span class="line"><span class="title function_">factorial</span>(<span class="number">5</span>) <span class="comment">//传 m 120</span></span><br></pre></td></tr></table></figure>

<p>第二种方法就是使用 ES6 的默认函数值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">n, total = <span class="number">1</span></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (n === <span class="number">1</span>) <span class="keyword">return</span> total</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">factorial</span>(n - <span class="number">1</span>, n * total)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="尾递归优化的实现"><a href="#尾递归优化的实现" class="headerlink" title="尾递归优化的实现"></a>尾递归优化的实现</h3><h4 id="将递归转换成循环执行"><a href="#将递归转换成循环执行" class="headerlink" title="将递归转换成循环执行"></a>将递归转换成循环执行</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="comment">//累加函数</span></span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">sum</span>(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// sum(1, 100000); //RangeError: Maximum call stack size exceeded</span></span><br><span class="line"><span class="comment">//用 trampoline 将递归转换为循环执行</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">trampoline</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">while</span> (f &amp;&amp; f <span class="keyword">instanceof</span> <span class="title class_">Function</span>) &#123;</span><br><span class="line">    f = <span class="title function_">f</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> f</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) <span class="keyword">return</span> sum1.<span class="title function_">bind</span>(<span class="literal">null</span>, x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">trampoline</span>(<span class="title function_">sum1</span>(<span class="number">1</span>, <span class="number">100000</span>)) <span class="comment">//100001</span></span><br></pre></td></tr></table></figure>

<h4 id="使用状态变量"><a href="#使用状态变量" class="headerlink" title="使用状态变量"></a>使用状态变量</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">tco</span>(<span class="params">f</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> value</span><br><span class="line">  <span class="keyword">var</span> active = <span class="literal">false</span></span><br><span class="line">  <span class="keyword">var</span> accumulated = []</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">accumulator</span>(<span class="params"></span>) &#123;</span><br><span class="line">    accumulated.<span class="title function_">push</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">    <span class="keyword">if</span> (!active) &#123;</span><br><span class="line">      active = <span class="literal">true</span></span><br><span class="line">      <span class="keyword">while</span> (accumulated.<span class="property">length</span>) &#123;</span><br><span class="line">        value = f.<span class="title function_">apply</span>(<span class="variable language_">this</span>, accumulated.<span class="title function_">shift</span>())</span><br><span class="line">      &#125;</span><br><span class="line">      active = <span class="literal">false</span></span><br><span class="line">      <span class="keyword">return</span> value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="title function_">tco</span>(<span class="keyword">function</span> (<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (y &gt; <span class="number">0</span>) <span class="keyword">return</span> <span class="title function_">sum</span>(x + <span class="number">1</span>, y - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Functional Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>并查集</title>
    <url>/2019/03/13/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h3 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h3><p>用集合中的某个元素来代表这个集合，该元素称为集合的代表元。<br>一个集合内的所有元素组织成以代表元为根的树形结构。<br>对于每一个元素<code>parent[x]</code>指向 x 在树形结构上的父亲节点。如果 x 是根节点，则令<code>parent[x] = x</code>。<br>对于查找操作，假设需要确定 x 所在的的集合，也就是确定集合的代表元。可以沿着<code>parent[x]</code>不断在树形结构中向上移动，直到到达根节点。</p>
<span id="more"></span>

<p>节点表示：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> maxSize = <span class="number">1000000</span></span><br><span class="line"><span class="keyword">var</span> parent = [] <span class="comment">// 父亲节点数组</span></span><br><span class="line"><span class="keyword">var</span> rank = [] <span class="comment">// 深度数组</span></span><br><span class="line"><span class="keyword">var</span> data = [] <span class="comment">// 数据数组</span></span><br></pre></td></tr></table></figure>

<p>初始化时都设置 parent 为自己的标号：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">makeSet</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  parent[i] = i</span><br><span class="line">  rank[i] = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>查找：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">findSet</span>(<span class="params">i</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (parent[i] == i) <span class="keyword">return</span> parent[i]</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">findSet</span>(parent[i])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>合并：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">union</span>(<span class="params">i, j</span>) &#123;</span><br><span class="line">  i = <span class="title function_">findSet</span>(i)</span><br><span class="line">  j = <span class="title function_">findSet</span>(j)</span><br><span class="line">  <span class="keyword">if</span> (i == j) <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> (rank[i] &gt; rank[j]) &#123;</span><br><span class="line">    parent[j] = i</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (rank[i] == rank[j]) rank[j]++</span><br><span class="line">    parent[i] = j</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>拖放事件</title>
    <url>/2018/08/15/%E6%8B%96%E6%94%BE%E4%BA%8B%E4%BB%B6/</url>
    <content><![CDATA[<p>拖拽元素事件：</p>
<ul>
<li>dragstart：拖拽前触发</li>
<li>drag：拖拽前到拖拽结束之间，连续触发</li>
<li>dragend：拖拽结束触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> aLi = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> li <span class="keyword">of</span> aLi) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> count = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    li.<span class="property">ondragstart</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    li.<span class="property">ondrag</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(count++) <span class="comment">//连续触发</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    li.<span class="property">ondragend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>目标元素事件：</p>
<ul>
<li>dragenter：进入目标元素触发，相当于 mouseover</li>
<li>dragover：进入目标到离开目标之间，连续触发</li>
<li>dragleave：离开目标元素触发，相当于 mouseout</li>
<li>drop：在目标元素上释放鼠标触发</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50px;height:50px;background:yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">ondragenter</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;blue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">ondragover</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>) <span class="comment">//连续触发</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//要想触发drop事件，就必须在dragover中阻止默认事件</span></span></span><br><span class="line"><span class="language-javascript">    ev.<span class="title function_">preventDefault</span>() <span class="comment">//阻止默认事件</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">ondragleave</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&quot;yellow&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;drop&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="dataTransfer-对象"><a href="#dataTransfer-对象" class="headerlink" title="dataTransfer 对象"></a>dataTransfer 对象</h3><ul>
<li>setData()：设置数据 key 和 value 值(必须是 string)</li>
<li>getDate()；获取数据，根据 key 值获取 value</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>li3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:50px;height:50px;background:yellow&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oUl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> aLi = oUl.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#div1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = aLi.<span class="property">length</span>; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">    aLi[i].<span class="property">index</span> = i</span></span><br><span class="line"><span class="language-javascript">    aLi[i].<span class="property">ondragstart</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      ev.<span class="property">dataTransfer</span>.<span class="title function_">setData</span>(<span class="string">&quot;index&quot;</span>, <span class="variable language_">this</span>.<span class="property">index</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">ondrop</span> = <span class="keyword">function</span> (<span class="params">ev</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    oUl.<span class="title function_">removeChild</span>(aLi[ev.<span class="property">dataTransfer</span>.<span class="title function_">getData</span>(<span class="string">&quot;index&quot;</span>)])</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, length = aLi.<span class="property">length</span>; i &lt; length; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//重新赋索引值</span></span></span><br><span class="line"><span class="language-javascript">      aLi[i].<span class="property">index</span> = i</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>effectAllowed：设置光标样式(none, copy, copyLink, copyMove, link, linkMove, move all, uninitalized)</li>
<li>setDragImage：参数为指定的元素、x 坐标值、坐标值</li>
<li>files：获取外部拖拽文件，返回一个 fileList 列表，fileList 下 type 属性返回文件类型</li>
</ul>
<h3 id="FileReader"><a href="#FileReader" class="headerlink" title="FileReader"></a>FileReader</h3><p>FileReader 用于读取文件信息</p>
<ul>
<li>readAsDataURL：参数为要读取的文件对象，将文件读取为 DataUrl</li>
<li>onload：当读取文件完成时触发此事件，通过 this.result 获取读取文件的数据，如果是图片，返回 base64 格式的图片数据</li>
</ul>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>扩展内建类</title>
    <url>/2024/08/30/%E6%89%A9%E5%B1%95%E5%86%85%E5%BB%BA%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="extends-Array"><a href="#extends-Array" class="headerlink" title="extends Array"></a>extends Array</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PowerArray</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">  <span class="title function_">isEmpty</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span> === <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// filter/map/... 等函数不再传递PowerArray</span></span><br><span class="line">  <span class="keyword">static</span> get [<span class="title class_">Symbol</span>.<span class="property">species</span>] () &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Array</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="keyword">new</span> <span class="title class_">PowerArray</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="title function_">alert</span>(arr.<span class="title function_">isEmpty</span>()); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> filter_array = arr.<span class="title function_">filter</span>(<span class="function"><span class="params">i</span> =&gt;</span> i &gt; <span class="number">1</span>);</span><br><span class="line"><span class="title function_">alert</span>(filter_array.<span class="title function_">isEmpty</span>()); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>归纳法</title>
    <url>/2019/04/14/%E5%BD%92%E7%BA%B3%E6%B3%95/</url>
    <content><![CDATA[<h3 id="自然数上的一般归纳原理"><a href="#自然数上的一般归纳原理" class="headerlink" title="自然数上的一般归纳原理"></a>自然数上的一般归纳原理</h3><p>假设$P$是自然数上的一个性质，则如果</p>
<ol>
<li>$P(0)$成立 – base case</li>
<li>对所有的自然数$k$，$P(k)$蕴涵$P(k+1)$ – induction step</li>
</ol>
<p>则$P(n)$对所有自然数$n$成立</p>
<p>$$<br>\ \ \ \ \ \ \ \ \ \ [P(k)]\<br>\frac{P(0)\ P(k+1)}{P(n)}<br>$$</p>
<p>$[P(k)]$为归纳假设，$k$不能出现在$P(k + 1)$的任何假设中</p>
<p><strong>定理：每个自然是要么是偶数，要么是奇数。</strong><br>用归纳法来证明：</p>
<ol>
<li>0 是偶数 -&gt; 0 是偶数或奇数</li>
<li>假设 k 是偶数或奇数，证明 k + 1 是奇数或偶数：<ol>
<li>k 是偶数，则 k + 1 是奇数</li>
<li>k 是奇数，则 k + 1 是偶数</li>
</ol>
</li>
<li>得证</li>
</ol>
<span id="more"></span>

<h3 id="自然数上的完全归纳原理"><a href="#自然数上的完全归纳原理" class="headerlink" title="自然数上的完全归纳原理"></a>自然数上的完全归纳原理</h3><p>假设$P$是自然数上的一个性质，则：<br>如果对每个自然数$k$，假定$P(i)$对所有自然数$i(i &lt; k)$成立，则可以证明$P(k)$成立</p>
<p>$$<br>[\forall i &lt; k.P(i)]\<br>\frac{P(k)}{P(n)}<br>$$</p>
<p>$k$不能出现在其他前提条件的其他假设中</p>
<p><strong>定理：所有$n \geq 2$的自然数都可以写成素数的乘积$n &#x3D; p_1…p_k$</strong><br>对$n$进行完全归纳：</p>
<ol>
<li>$n$是素数，那么$n &#x3D; n$</li>
<li>$n$不是素数，则$\exists\  n % m &#x3D; 0(1 &lt; m &lt; n)$所以$n &#x3D; m * \frac{n}{m}$，<br>对$m$和$\frac{n}{m}$再次归纳，得$m &#x3D; p_1…p_k$且$\frac{n}{m} &#x3D; q_1…q_k$<br>得<br>$$n &#x3D; m * \frac{n}{m} &#x3D; p_1…p_kq_1…q_k$$</li>
<li>得证</li>
</ol>
<h3 id="字典序归纳原理"><a href="#字典序归纳原理" class="headerlink" title="字典序归纳原理"></a>字典序归纳原理</h3><p>假设$P$是自然数序对上的一个性质，则：<br>如果对每个自然数序对$(m, n)$，假定$P(m’, n’)$对所有的$(m’, n’) &lt; (m, n)$成立，则可以证明$P(m, n)$成立</p>
<h3 id="结构归纳法"><a href="#结构归纳法" class="headerlink" title="结构归纳法"></a>结构归纳法</h3><h4 id="形式-1"><a href="#形式-1" class="headerlink" title="形式 1"></a>形式 1</h4><p>假设$P$是某个文法产生的任一表达式$e$上的一个性质，则：</p>
<ul>
<li>对每个原子表达式$e$，证明$P(e)$为真</li>
<li>对直接子表达式为$e_1,…,e_k$的任何复合表达式$e$，证明如果$P(e_i)(i &#x3D; 1, …, k)$都为真，则$P(e)$也为真</li>
</ul>
<h4 id="形式-2"><a href="#形式-2" class="headerlink" title="形式 2"></a>形式 2</h4><p>假设$P$是某个文法产生的任一表达式$e$上的一个性质，则：</p>
<ul>
<li>对每个原子表达式$e$，证明$P(e)$为真</li>
<li>对任何表达式$e$的任何子表达式$e’$，证明如果$P(e’)$都为真，则$P(e)$也为真</li>
</ul>
<h3 id="表的结构归纳法"><a href="#表的结构归纳法" class="headerlink" title="表的结构归纳法"></a>表的结构归纳法</h3><p>假设 P 是元素类型为$\tau$的表(list)上的一个性质，则：</p>
<ul>
<li>$P([])$, []表示空表</li>
<li>对类型为$\tau$的所有元素$y$以及类型为$\tau$ list 的表$ys$都有$P(ys)$蕴涵$P(y::ys)$，则$P(xs)$对所有类型为$\tau$ list 的表$xs$成立<br>$$<br>\ \ \ \ \ \ \ \ \ \ [P(ys)]\<br>\frac{P([])\ P(y::ys)}{P(xs)}<br>$$<br>$y$和$ys$不能出现在$P(y::ys)$的其他假设中</li>
</ul>
<p><strong>定理：所有的表都不等于自己的表尾</strong><br>对$xs$结构归纳：</p>
<ul>
<li>$\forall x.[x] \neq []$，两个表是相等的当且仅当它们具有相同的长度且对应的元素也相等</li>
<li>假定$\forall x.x::ys \neq ys$成立，并对于任意的$y$和$ys$证明$\forall x.x::(y::ys) \neq y::ys$，所以只要证明两边表尾不相等：即证明$y::ys \neq ys$<br><strong>不适用于无穷表，$[n, n, …]$等于它自己的表尾</strong></li>
</ul>
<p>定理：对于所有的表 xs 和 ys，有$len(xs@ys) &#x3D; len\ xs + len\ ys$（@连接运算）<br>对 xs 结构归纳：</p>
<ul>
<li>$len([]@ys) &#x3D; len[] + len\ ys$成立</li>
<li>假定$len(xs\ @\ ys) &#x3D; len\ xs + len\ ys$成立，那么我们可以证明对于所有的$x$和$xs$，有$len((x::xs)\ @\ ys) &#x3D; len(x::xs) + len\ ys$也成立<br>$$<br>len((x::xs)@ys) &#x3D; len(x::(xs@ys))\<br>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  &#x3D; 1 + len(xs@ys)\<br>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  &#x3D; 1 + (len\ xs + len\ ys)\<br>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  &#x3D; (1 + len\ xs) + len\ ys\<br>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  &#x3D; len(x::xs) + len\ ys<br>$$</li>
</ul>
<h3 id="树的结构归纳法"><a href="#树的结构归纳法" class="headerlink" title="树的结构归纳法"></a>树的结构归纳法</h3><p>假设 P 是类型$\tau$ tree 的树的一个性质，则：</p>
<ul>
<li>$P(empty)$</li>
<li>对于所有类型为$\tau$的元素$x$以及类型为$\tau$ tree 的树$t_1$和$t_2$都有，$P(t_1)$和$P(t_2)$蕴涵$P(node(x, t_1, t_2))$<br>$$<br>\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ [P(t_1), P(t_2)]\<br>\frac{P(empty)\ P(node(x, t_1, t_2))}{P(t)}<br>$$<br>$x$、$t_1$和$t_2$不能出现在$P(node(x, t_1, t_2))$的其他假设中</li>
</ul>
<h3 id="证明上的归纳"><a href="#证明上的归纳" class="headerlink" title="证明上的归纳"></a>证明上的归纳</h3><p>假设一个公式可以证明的，那么：<br>推理规则：若一组公式可证，则另一个公式也证$\frac{A_1…A_n}{B}$，如果$A_1,…,A_n$（前提）都可证，那么 B（结论）也可证</p>
<ul>
<li>相等性的自反公理： $e &#x3D; e$</li>
<li>相等性的传递规则：$\frac{e_1 &#x3D; e_2\ e_2 &#x3D; e_3}{e_1 &#x3D; e_3}$</li>
</ul>
<p>所以一个证明可以定义为一个公式序列，该序列中的每个公式都是公理或是由先前的公式通过一条推理规则得到的结论。可以有两个方法来归纳：</p>
<ul>
<li>对公式序列的长度进行自然数归纳法</li>
<li>把证明看成树，所用的公理看叶节点，推理规则看成内部节点，由对$A_1, …, A_n$的证明来构造对$B$的证明</li>
</ul>
<p>在某个证明系统中，证明对每个证明$\alpha$，$P(\alpha)$为真：</p>
<ul>
<li>对该系统中的每个公理，证明$P$成立</li>
<li>假定对$\alpha_1,…,\alpha_k$，$P$都成立，证明$P(\alpha)$也成立，则$\alpha$是$\alpha_1,…,\alpha_k$延伸出的一个证明</li>
</ul>
<p>证明系统的可靠性：在公式的某种特定解释下，每个可证的公式都为真。</p>
]]></content>
      <tags>
        <tag>Math</tag>
      </tags>
  </entry>
  <entry>
    <title>广州之行</title>
    <url>/2018/12/24/%E5%B9%BF%E5%B7%9E%E4%B9%8B%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="导语"><a href="#导语" class="headerlink" title="导语"></a>导语</h1><p>想着下学期开始可能没有太多时间了，而且大学间还<strong>没有旅过游</strong>，所以就挑了个时间去了广州。<br>由于时间不是很足，所以去的地方不是很多，主要还是那几个比较火的地点：</p>
<ul>
<li>上下九</li>
<li>北京路</li>
<li>江南西</li>
<li>海珠区</li>
</ul>
<p>而且……拍的照也不是很多。</p>
<h1 id="上火车"><a href="#上火车" class="headerlink" title="上火车"></a>上火车</h1><p>本以为挑的时间段算比较好的，但是失算了。火车上<strong>挺多人</strong>的，但是与春运相比又显得人<strong>挺少的</strong>。<br>可能大部分都是去考研的吧，很多背着包的大学生。<br><img src="/images/IMG_20181221_181327_HHT.jpg" width="495"><br>对面的老大爷和右边的是一家，听口音像是潮州那边的。半道老大爷还拿出了一瓶葡萄酒，喝了起来。<br>中途老大爷睡着了，长得和家有儿女里夏雨的爷爷相似。<br>临走时估摸着大爷听见了我们也是去广州的，并没有与普通人说帅哥，而是说了句“靓仔”</p>
<p>其实坐火车也是很有趣的一件事，比坐医院里观察人要欢乐的多。</p>
<span id="more"></span>

<h1 id="到达广州"><a href="#到达广州" class="headerlink" title="到达广州"></a>到达广州</h1><p>在晚上九点多到达了广州站，出来明显感觉到**热！不是一般的热！**看了看天气似乎是 25℃。<br><img src="/images/guangzhouStation.jpg" width="495"><br>与其他火车站一样，出站口聚集了许多住宿的房东。好在提前订好了房间，于是出发乘坐地铁去往住处。<br>路线是 <strong>广州站-&gt;2 号线-&gt;江南西</strong></p>
<h1 id="广州第一餐"><a href="#广州第一餐" class="headerlink" title="广州第一餐"></a>广州第一餐</h1><p>或许是赶上了互联网行业下班时间，路上有许多背着<strong>瑞士包</strong>的男生，少数<strong>格子衫</strong>的，地铁人挺多，但是算不上挤。<br>到达广州第一餐，就是久违的 MacDonald，对，MacDonald。<br><img src="/images/MacDonald.jpg" width="495"><br>当然也就是解解馋了，毕竟上学的地方只有<strong>一家</strong>MacDonald，而且在车站。</p>
<h1 id="肠粉"><a href="#肠粉" class="headerlink" title="肠粉"></a>肠粉</h1><p>这次来广州只吃了一次肠粉，因为时间关系不能再吃第二餐，只能等回家吃了。<br>准备吃的时候，发现了两家，一家是华辉拉肠，一家是银记肠粉。<br><img src="/images/stores.jpg" height="495"><br>虽然听过银记肠粉的名头，但是还是选择了华辉拉肠，原因是——<strong>有个本地人说了句华辉拉肠好吃</strong>。<br>点了一个普通的蛋肠和皮蛋瘦肉粥，但是当我吃第一口的时候我就后悔了。<br><img src="/images/huahui.jpg" width="495"><br>酱料，不应该叫做酱料，应该叫<strong>酱油</strong>，而且还是<strong>老抽</strong>。<br>这和我小时候吃的普通肠粉、石磨肠粉、簸箕肠粉完全就是两个味道，实在是太失望了，而且没有<strong>酱汁</strong>，这是最大的槽点。<br>肠粉没了酱汁，我觉得就不能叫做肠粉了。<br>吃完后已经快十二点了，所以选择回去休息。</p>
<h1 id="住处"><a href="#住处" class="headerlink" title="住处"></a>住处</h1><p>住处是在 Airbnb 上找的，但是可能是专业人士经营的，买的没有卖的精。虽说实物与网图差距不是很大，但还是挺不满意的。<br>唯一的满意之处也就是与众不同+交通方便了吧。只摄了一张图（没错就是我的脚）：<br><img src="/images/room.jpg" height="495"></p>
<h1 id="第一天"><a href="#第一天" class="headerlink" title="第一天"></a>第一天</h1><p>这天起的挺早的，还在收拾的时候就听见楼下传来一声“点外卖用饿了吗”，几十个外卖小哥骑着小蓝车开始刷街了，也不知道是不是饿了吗的传统活动。<br>住的地方在江南西，周围挺多网红店的，但是营业时间大部分都是早上十点开始，所以考虑晚上回来再看看。</p>
<ul>
<li>江南西-&gt;宝业路-&gt;沙园</li>
</ul>
<p>一早去的地方是宝业路，但是几乎都是烧烤店，所以就没有做过多停留，选择去寻找一家烤西瓜的店。<br>地图上看的那家店在一家商场里，但是转了很久都没找着，根据定位判断，可能是不开了，因为那家店的位置开了家新店，而且在搞活动：<br><img src="/images/IMG_20181224_095623.jpg" width="495"><br>所以，我们决定去北京路。</p>
<ul>
<li>沙园-&gt;8 号线-&gt;2 号线-&gt;6 号线-&gt;北京路</li>
</ul>
<p>不得不说北京路的小吃非常多，各种小吃都有。但是，<strong>人多</strong>，很多都是长长的队伍。<br>买了根蟹肉棒：<br><img src="/images/IMG_20181222_121148.jpg" width="495"><br>原味脆皮棒（给我的感觉就是泡芙）：<br><img src="/images/IMG_20181224_095418.jpg" width="495"><br>时间已经差不多到午饭的点了，附近刚好有家点都德，就决定去了。<br>过了早茶的时间，人不是很多，来的也大部分都是游客，都是奔着拍照来的。<br>椰汁糕，没得说的：<br><img src="/images/IMG_20181222_130238.jpg" width="495"><br>排骨（牙齿整形 ing 咬不动）：<br><img src="/images/IMG_20181222_125816.jpg" height="495"><br>灌汤包（被我手快夹了一个）：<br><img src="/images/IMG_20181222_131500.jpg" width="495"><br>还有虾饺，云吞，港式混酱肠粉。<br>嗯，混酱，芝麻酱、甜面酱、酱油，<strong>负分！</strong><br>吃饱后开始散食了，附近兜兜转转，赏赏花：<br><img src="/images/IMG_20181222_122429.jpg" width="495"><br>顺便顺着地图找到了家店——步步高昇钵仔糕：<br><img src="/images/IMG_20181224_095348.jpg" width="495"><br>这家店不一样的原因是会放鸡蛋，与普通的钵仔糕不一样，普通的一般不放或者放椰果什么的（其实钵仔糕没什么味道）：<br><img src="/images/IMG_20181224_095333.jpg" width="495"><br>感觉逛得差不多了，想吃的吃的着的都吃了，吃不着的都是人，决定换个地方。</p>
<ul>
<li>北京路-&gt;6 号线-&gt;文化公园</li>
</ul>
<p>文化公园往前走点，就发现了大大的招牌：<br><img src="/images/IMG_20181224_173238.jpg" width="495"><br>与北京路差不多，人挺多的，但是小吃感觉挺少的，大部分还是服饰的商家。让我倍感神奇的是，臭豆腐也可以排那么长的队伍。<br>逛了逛手信，还是觉得鸡仔饼可以让我提起兴趣，其余的在小时候已经吃腻了。顺带买了瓶凉茶治咳嗽（现在觉得一点效果也没有）：<br><img src="/images/IMG_20181222_151923.jpg" width="495"><br>然后就一路走到了黄沙，途中遇到了迪卡侬（滴滴）：<br><img src="/images/IMG_20181222_154502.jpg" width="495"><br>也差不多一下午就逛完了，还是决定去北京路附近吃。</p>
<ul>
<li>黄沙-&gt;6 号线-&gt;北京路</li>
</ul>
<p>这次路过了大头虾，排队的人依然很多，本准备翻翻菜单就走，然后发现有两人的位置，于是就进去了。<br>上菜速度还是有点慢的，而且，越式菜也有点吃不惯。<br>三色刨冰：<br><img src="/images/IMG_20181222_173822.jpg" width="495"><br>越式春卷（味道怪怪的，但是配上酱料还算能吃）：<br><img src="/images/IMG_20181222_173853.jpg" width="495"><br>盐焗基围虾：<br><img src="/images/IMG_20181224_095453.jpg" width="495"><br>越式炒米（大赞，要不是吃不下了）：<br><img src="/images/IMG_20181224_095519.jpg" width="495"><br>虽然吃的不多，但是会有饱的感觉（也许是错觉）。<br>临走看看排队的人们：<br><img src="/images/IMG_20181224_095543.jpg" height="495"></p>
<ul>
<li>北京路-&gt;天字码头-&gt;大沙头游船码头</li>
</ul>
<p>又到了散食时间，沿着北京路一直往下走，去江边看看。<br>沿途经过的酒吧：<br><img src="/images/IMG_20181224_095053.jpg" height="495"><br>江边有挺多拍照的人，也许是光线挺美的吧：<br><img src="/images/IMG_20181224_095005.jpg" height="495"><br>还有苟：<br><img src="/images/IMG_20181224_094919.jpg" width="495"><br>本来想着直接走去看广州塔的，看了看地图……行吧，坐地铁。</p>
<ul>
<li>东湖-&gt;6 号线-&gt;1 号线-&gt;5 号线-&gt;珠江新城</li>
</ul>
<p>不直接去广州塔的原因是我觉得站在塔底反而不好拍了。到了珠江新城，崩溃了，为什么这个出口可以这么长，走了快十分钟还没出去。<br>但是终于，还是看见了广州塔：<br><img src="/images/IMG_20181222_204917_HHT.jpg" height="495"><br>趁着没有人合影的时机，来了张：<br><img src="/images/IMG_20181222_205910.jpg" height="495"><br>旁边就是 K11：<br><img src="/images/IMG_20181224_095249.jpg" width="495"><br>但是由于已经挺晚的了，回去晚了没地铁了，所以就没进去。</p>
<p>第一天到这就差不多结束了，回去收拾收拾就碎觉了。</p>
<h1 id="第二天"><a href="#第二天" class="headerlink" title="第二天"></a>第二天</h1><p>第二天就起的比较晚了，而且下午就得上车，所以也就在广州东附近转了几圈。</p>
<ul>
<li>江南西-&gt;2 号线-&gt;8 号线-&gt;3 号线-&gt;广州东<br>上 3 号线时本以为大家都是去广州东的，结果后面两站一车厢只剩几个人了，来这第一次在地铁上可以坐着。</li>
</ul>
<p>去了广州东站寄存了行李后，就出来觅食了。在大众点评上看好了一家店，奔着那出发。<br>途中经过一家一点点，只有一个人，这也是在广州第一次看见没人排队的一点点，买到了红茶冰淇淋：<br><img src="/images/IMG_20181224_095236.jpg" width="495"><br>花了近二十分钟到了那家店，发现门上贴着一张纸：“臨时休息”，好嘛白跑一趟。<br>决定去路上经过的鸟剑居酒屋（十号店），坐下后发现周围三桌都是日本家庭，女性有很明显的家庭主妇的气质。<br>鱼籽寿司：<br><img src="/images/IMG_20181224_095215.jpg" width="495"><br>日式薄饼：<br><img src="/images/IMG_20181224_095301.jpg" width="495"><br>照烧鸡扒定食：<br><img src="/images/IMG_20181224_095204.jpg" heigth="495"><br>吃完了就差不多到了该上车的点了，至此本次旅行也画上了句号。</p>
<p><strong>至此我的大学首次旅行也结束了，有的地方还是没有做足准备，但是总的来说还是不错的。</strong></p>
]]></content>
      <tags>
        <tag>Travel</tag>
      </tags>
  </entry>
  <entry>
    <title>数组的扩展</title>
    <url>/2018/08/13/%E6%95%B0%E7%BB%84%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) <span class="comment">//1 2 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, ...[<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>) <span class="comment">//1 2 3 4</span></span><br><span class="line">;[...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;div&quot;</span>)] <span class="comment">//[&lt;div&gt;, &lt;div&gt;, ...];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>(...[<span class="number">1</span>, <span class="number">2</span>]) <span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//与表达式一同使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [...(x &gt; <span class="number">0</span> ? [<span class="string">&quot;a&quot;</span>] : []), <span class="string">&quot;b&quot;</span>]</span><br></pre></td></tr></table></figure>

<h3 id="扩展运算符的应用"><a href="#扩展运算符的应用" class="headerlink" title="扩展运算符的应用"></a>扩展运算符的应用</h3><ul>
<li><p>替代数组的 apply 方法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">x, y, z</span>) &#123;&#125;</span><br><span class="line"><span class="keyword">var</span> args = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 写法</span></span><br><span class="line">f.<span class="title function_">apply</span>(<span class="literal">null</span>, args)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 写法</span></span><br><span class="line"><span class="title function_">f</span>(...args)</span><br><span class="line"></span><br><span class="line"><span class="comment">//用 Math.max 求数组中最大的数</span></span><br><span class="line"><span class="comment">//ES5 写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="number">2</span>, <span class="number">33</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 写法</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">max</span>(...[<span class="number">2</span>, <span class="number">33</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">//用 push 将一个数组添加到另一个数组尾部</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 写法</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>.<span class="title function_">apply</span>(arr1, arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 写法</span></span><br><span class="line">arr1.<span class="title function_">push</span>(...arr2)</span><br></pre></td></tr></table></figure>
</li>
<li><p>合并数组</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;a&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="string">&quot;d&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 写法</span></span><br><span class="line">arr1.<span class="title function_">concat</span>(arr2, arr3)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 写法</span></span><br><span class="line">;[...arr1, ...arr2, ...arr3]</span><br></pre></td></tr></table></figure>
</li>
<li><p>与解构赋值结合</p>
<span id="more"></span>
<p><strong>如果将扩展运算符用于数组赋值，只能将其放在最后一位</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> [first, ...middle, last] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">//SyntaxError: Rest element must be last element</span></span><br></pre></td></tr></table></figure></li>
<li><p>函数的返回值</p>
</li>
<li><p>字符串</p>
</li>
<li><p>实现了 Iterator 接口的对象</p>
</li>
<li><p>Map 和 Set 解构、Generator 函数</p>
</li>
</ul>
<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h3><p>Array.from()将两类对象转换成真正的数组：</p>
<ul>
<li>array-like object</li>
<li>iterable object</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&quot;b&quot;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES5 写法</span></span><br><span class="line"><span class="keyword">var</span> arr = [].<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike)</span><br><span class="line"></span><br><span class="line"><span class="comment">//ES6 写法</span></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike)</span><br></pre></td></tr></table></figure>

<p><strong>DOM 操作返回的 NodeList 集合，以及函数内部的 arguments 对象，Array.from()都可以将他们转换成真正的数组</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//String 有 Iterator 接口</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&quot;hello&quot;</span>) <span class="comment">//[&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>Array.from()还可以接受第二个参数，类似于数组的 map 方法，对每个元素进行处理，将处理后的值放入返回的数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike, <span class="function"><span class="params">x</span> =&gt;</span> x _ x);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike).<span class="title function_">map</span>(<span class="function"><span class="params">x</span> =&gt;</span> x _ x);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(&#123; length : <span class="number">2</span> &#125;, <span class="function">() =&gt;</span> <span class="string">&#x27;test&#x27;</span>); <span class="comment">//[&#x27;test&#x27;, &#x27;test&#x27;]</span></span><br></pre></td></tr></table></figure>

<p><strong>另一个用途是将字符串转为数组，然后返回长度，可以正确处理 Unicode 字符</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">countSymbols</span>(<span class="params">string</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="title function_">from</span>(string).<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>Array.of 用于将一组值转换为数组。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//[1, 2, 3]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>() <span class="comment">//[]</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">of</span>(<span class="literal">undefined</span>) <span class="comment">//[undefined]</span></span><br></pre></td></tr></table></figure>

<p>模拟实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">ArrayOf</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [].<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组实例的-copyWithin"><a href="#数组实例的-copyWithin" class="headerlink" title="数组实例的 copyWithin()"></a>数组实例的 copyWithin()</h3><p>在当前数组内将指定位置的成员复制到其他位置，然后返回当前数组。接受三个参数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">copyWithin</span>(target, (start = <span class="number">0</span>), (end = <span class="variable language_">this</span>.<span class="property">length</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>target（必选）：从该位置开始替换数据</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负数，表示倒数。</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负数，表示倒数。</li>
</ul>
<p><strong>这三个参数会自动转为数值</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//从 0 位置开始，将 3 开始到 this.length 的位置的数据填入</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">3</span>) <span class="comment">//[4, 5, 3, 4, 5];</span></span><br><span class="line">;[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].<span class="title function_">copyWithin</span>(<span class="number">0</span>, <span class="number">2</span>) <span class="comment">//[3, 4, 5, 4, 5];</span></span><br></pre></td></tr></table></figure>

<h3 id="数组实例的-find-和-findIndex"><a href="#数组实例的-find-和-findIndex" class="headerlink" title="数组实例的 find()和 findIndex()"></a>数组实例的 find()和 findIndex()</h3><p>find 用于找出第一个符合条件的数组成员，参数是一个回调函数，如果没有符合的成员，返回 undefined。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="number">1</span>, <span class="number">3</span>, -<span class="number">5</span>, <span class="number">3</span>, <span class="number">2</span>].<span class="title function_">find</span>(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>) <span class="comment">//-5</span></span><br></pre></td></tr></table></figure>

<p>findIndex 方法与 find()类似，没有符合的成员时返回-1。<br>这两个方法都可以接受第二个参数，用来绑定回调函数的 this 对象，这两个函数都能发现 NaN，弥补了 IndexOf 的不足。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="title class_">NaN</span>].<span class="title function_">indexOf</span>(<span class="title class_">NaN</span>) <span class="comment">//-1</span></span><br><span class="line">;[<span class="title class_">NaN</span>].<span class="title function_">findIndex</span>(<span class="function">(<span class="params">y</span>) =&gt;</span> <span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, y)) <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<h3 id="数组实例的-fill"><a href="#数组实例的-fill" class="headerlink" title="数组实例的 fill()"></a>数组实例的 fill()</h3><p>与 copyWithin 一样，接受三个参数：</p>
<ul>
<li>value：用于填充的值</li>
<li>start：起始位置</li>
<li>end：结束位置</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">;[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>].<span class="title function_">fill</span>(<span class="string">&quot;7&quot;</span>, <span class="number">0</span>, <span class="number">1</span>) <span class="comment">//[&#x27;7&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="数组实例的-entries-、keys-和-values"><a href="#数组实例的-entries-、keys-和-values" class="headerlink" title="数组实例的 entries()、keys()和 values()"></a>数组实例的 entries()、keys()和 values()</h3><p>ES6 提供了 3 个新方法用于遍历数组，他们都返回一个 Generator 对象，可用 for…of 遍历。<br>唯一的区别在于 keys()是对键名遍历，values()是对键值遍历，entries()是对键值对遍历。</p>
<h3 id="数组实例的-includes"><a href="#数组实例的-includes" class="headerlink" title="数组实例的 includes()"></a>数组实例的 includes()</h3><p>Array.prototype.includes 方法返回一个布尔值，表示某个数组是否包含给定的值，与 string 的 includes 方法类似。ES2016 引入了该方法。<br><strong>Map 和 Set 有 has 方法，需与 includes 区分</strong></p>
<ul>
<li>Map 的 has 方法是查找键名的</li>
<li>Set 的 has 方法是查找键值的</li>
</ul>
<h3 id="数组的空位"><a href="#数组的空位" class="headerlink" title="数组的空位"></a>数组的空位</h3><p>数组的空位指数组的某一个位置没有任何值。比如 Array 构造函数返回的数组都是空位。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>(<span class="number">3</span>) <span class="comment">//[, , ,]</span></span><br></pre></td></tr></table></figure>

<p><strong>空位不是 undefined</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> <span class="keyword">in</span> [<span class="literal">undefined</span>, <span class="literal">undefined</span>, <span class="literal">undefined</span>] <span class="comment">//0 号位置有值</span></span><br><span class="line"><span class="number">0</span> <span class="keyword">in</span> [, , ,] <span class="comment">//0 号位没值</span></span><br></pre></td></tr></table></figure>

<p>ES5 大多数情况下会忽略空位：</p>
<ul>
<li>forEach()、filter()、every()和 some()都会跳过空位</li>
<li>map()会跳过空位，但会保留这个值</li>
<li>join()和 toString()会将空位视为 undefined，undefined 和 null 会被处理成空字符串</li>
</ul>
<p>ES6 将空位转为 undefined<br><strong>由于空位的规则非常不统一，所以应避免出现空位</strong></p>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>新的选择器</title>
    <url>/2018/08/15/%E6%96%B0%E7%9A%84%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="querySelector"><a href="#querySelector" class="headerlink" title="querySelector()"></a>querySelector()</h3><p>querySelector 只能选择一组中的第一个元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.test&quot;</span>).<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span> <span class="comment">//只有第一个会变红</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><p>querySelectorAll 获取一组元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> aDiv = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> div <span class="keyword">of</span> aDiv) &#123;</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h3><p>getElementsByClassName 通过 class name 选择元素：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> aDiv = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;test&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">for</span> (<span class="keyword">let</span> div <span class="keyword">of</span> aDiv) &#123;</span></span><br><span class="line"><span class="language-javascript">    div.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="获取-classList-属性"><a href="#获取-classList-属性" class="headerlink" title="获取 classList 属性"></a>获取 classList 属性</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box1 box2 box3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> oDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;div1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">classList</span> <span class="comment">//[box1, box2, box3]</span></span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;box4&quot;</span>) <span class="comment">//添加className</span></span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;box2&quot;</span>) <span class="comment">//删除className</span></span></span><br><span class="line"><span class="language-javascript">  oDiv.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;box4&quot;</span>) <span class="comment">//如果有box4，则删除；反之，则添加box4</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title>旧React demo</title>
    <url>/2025/03/24/%E6%97%A7React-demo/</url>
    <content><![CDATA[<h1 id="旧-React-简易实现"><a href="#旧-React-简易实现" class="headerlink" title="旧 React 简易实现"></a>旧 React 简易实现</h1><figure class="highlight js"><figcaption><span>react-old.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; updateDomProperties &#125; <span class="keyword">from</span> <span class="string">&quot;./dom-utils.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根实例</span></span><br><span class="line"><span class="keyword">let</span> rootInstance = <span class="literal">null</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEXT_ELEMENT</span> = <span class="string">&quot;TEXT_ELEMENT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 VDOM 元素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createElement</span>(<span class="params">type, config, ...args</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> props = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, config)</span><br><span class="line">  <span class="keyword">const</span> hasChildren = args.<span class="property">length</span> &gt; <span class="number">0</span></span><br><span class="line">  <span class="keyword">const</span> rawChildren = hasChildren ? [].<span class="title function_">concat</span>(...args) : []</span><br><span class="line"></span><br><span class="line">  props.<span class="property">children</span> = rawChildren</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> c !== <span class="literal">null</span> &amp;&amp; c !== <span class="literal">false</span>)</span><br><span class="line">    .<span class="title function_">map</span>(<span class="function">(<span class="params">c</span>) =&gt;</span> (c <span class="keyword">instanceof</span> <span class="title class_">Object</span> ? c : <span class="title function_">createTextElement</span>(c)))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; type, props &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createTextElement</span>(<span class="params">text</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">createElement</span>(<span class="variable constant_">TEXT_ELEMENT</span>, &#123; <span class="attr">nodeValue</span>: text &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">element, container</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> prevInstance = rootInstance</span><br><span class="line">  <span class="keyword">const</span> nextInstance = <span class="title function_">reconcile</span>(container, prevInstance, element)</span><br><span class="line">  rootInstance = nextInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归更新子元素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcile</span>(<span class="params">parentDom, instance, element</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (instance === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建新实例</span></span><br><span class="line">    <span class="keyword">const</span> newInstance = <span class="title function_">instantiate</span>(element)</span><br><span class="line">    parentDom.<span class="title function_">appendChild</span>(newInstance.<span class="property">dom</span>)</span><br><span class="line">    <span class="keyword">return</span> newInstance</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element === <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 删除实例</span></span><br><span class="line">    parentDom.<span class="title function_">removeChild</span>(instance.<span class="property">dom</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (instance.<span class="property">element</span>.<span class="property">type</span> !== element.<span class="property">type</span>) &#123;</span><br><span class="line">    <span class="comment">// 如果类型不同，则替换实例</span></span><br><span class="line">    <span class="keyword">const</span> newInstance = <span class="title function_">instantiate</span>(element)</span><br><span class="line">    <span class="comment">// 替换实例</span></span><br><span class="line">    parentDom.<span class="title function_">replaceChild</span>(newInstance.<span class="property">dom</span>, instance.<span class="property">dom</span>)</span><br><span class="line">    <span class="keyword">return</span> newInstance</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> element.<span class="property">type</span> === <span class="string">&quot;string&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">// 更新 DOM 实例</span></span><br><span class="line">    <span class="title function_">updateDomProperties</span>(instance.<span class="property">dom</span>, instance.<span class="property">element</span>.<span class="property">props</span>, element.<span class="property">props</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 instance</span></span><br><span class="line">    instance.<span class="property">childInstances</span> = <span class="title function_">reconcilerChildren</span>(instance, element)</span><br><span class="line">    instance.<span class="property">element</span> = element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 更新组件实例</span></span><br><span class="line">    instance.<span class="property">publicInstance</span>.<span class="property">props</span> = element.<span class="property">props</span></span><br><span class="line">    <span class="keyword">const</span> childElement = instance.<span class="property">publicInstance</span>.<span class="title function_">render</span>()</span><br><span class="line">    <span class="keyword">const</span> oldChildInstance = instance.<span class="property">childInstance</span></span><br><span class="line">    <span class="keyword">const</span> childInstance = <span class="title function_">reconcile</span>(parentDom, oldChildInstance, childElement)</span><br><span class="line"></span><br><span class="line">    instance.<span class="property">dom</span> = childInstance.<span class="property">dom</span></span><br><span class="line">    instance.<span class="property">childInstance</span> = childInstance</span><br><span class="line">    instance.<span class="property">element</span> = element</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">reconcilerChildren</span>(<span class="params">instance, element</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> dom = instance.<span class="property">dom</span></span><br><span class="line">  <span class="keyword">const</span> childInstances = instance.<span class="property">childInstances</span></span><br><span class="line">  <span class="keyword">const</span> nextChildElements = element.<span class="property">props</span>.<span class="property">children</span> || []</span><br><span class="line">  <span class="keyword">const</span> newChildInstances = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title class_">Math</span>.<span class="title function_">max</span>(childInstances.<span class="property">length</span>, nextChildElements.<span class="property">length</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 本 demo, 顺序不同也算作更新</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> childInstance = childInstances[i]</span><br><span class="line">    <span class="keyword">const</span> childElement = nextChildElements[i]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> newChildInstance = <span class="title function_">reconcile</span>(dom, childInstance, childElement)</span><br><span class="line"></span><br><span class="line">    newChildInstances.<span class="title function_">push</span>(newChildInstance)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newChildInstances.<span class="title function_">filter</span>(<span class="function">(<span class="params">instance</span>) =&gt;</span> instance !== <span class="literal">null</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把元素实例化成真实的DOM节点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">instantiate</span>(<span class="params">element</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, props &#125; = element</span><br><span class="line">  <span class="keyword">const</span> isDomElement = <span class="keyword">typeof</span> type === <span class="string">&quot;string&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (isDomElement) &#123;</span><br><span class="line">    <span class="comment">// 创建 DOM 元素</span></span><br><span class="line">    <span class="keyword">const</span> isTextElement = type === <span class="variable constant_">TEXT_ELEMENT</span></span><br><span class="line">    <span class="keyword">const</span> dom = isTextElement</span><br><span class="line">      ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">      : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(type)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新 dom</span></span><br><span class="line">    <span class="title function_">updateDomProperties</span>(dom, [], props)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化子元素</span></span><br><span class="line">    <span class="keyword">const</span> childElements = props.<span class="property">children</span> || []</span><br><span class="line">    <span class="keyword">const</span> childInstances = childElements.<span class="title function_">map</span>(instantiate)</span><br><span class="line">    <span class="keyword">const</span> childDoms = childInstances.<span class="title function_">map</span>(<span class="function">(<span class="params">childInstance</span>) =&gt;</span> childInstance.<span class="property">dom</span>)</span><br><span class="line">    childDoms.<span class="title function_">forEach</span>(<span class="function">(<span class="params">childDom</span>) =&gt;</span> dom.<span class="title function_">appendChild</span>(childDom))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> instance = &#123; dom, element, childInstances &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化组件</span></span><br><span class="line">    <span class="keyword">const</span> instance = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> publicInstance = <span class="title function_">createPublicInstance</span>(element, instance)</span><br><span class="line">    <span class="keyword">const</span> childElement = publicInstance.<span class="title function_">render</span>() <span class="comment">// 拿到 vdom</span></span><br><span class="line">    <span class="keyword">const</span> childInstance = <span class="title function_">instantiate</span>(childElement) <span class="comment">// 实例化</span></span><br><span class="line">    <span class="keyword">const</span> dom = childInstance.<span class="property">dom</span></span><br><span class="line"></span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">assign</span>(instance, &#123; dom, element, publicInstance, childInstance &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> instance</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPublicInstance</span>(<span class="params">element, internalInstance</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; type, props &#125; = element</span><br><span class="line"></span><br><span class="line">  <span class="comment">// type 此时是一个 Class</span></span><br><span class="line">  <span class="keyword">const</span> publicInstance = <span class="keyword">new</span> <span class="title function_">type</span>(props)</span><br><span class="line"></span><br><span class="line">  publicInstance.<span class="property">__internalInstance</span> = internalInstance</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> publicInstance</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateInstance</span>(<span class="params">internalInstance</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> parentDom = internalInstance.<span class="property">dom</span>.<span class="property">parentNode</span></span><br><span class="line">  <span class="keyword">const</span> element = internalInstance.<span class="property">element</span></span><br><span class="line"></span><br><span class="line">  <span class="title function_">reconcile</span>(parentDom, internalInstance, element)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">props</span> = props</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="variable language_">this</span>.<span class="property">state</span> || &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">setState</span>(<span class="params">partialState</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, <span class="variable language_">this</span>.<span class="property">state</span>, partialState)</span><br><span class="line">    <span class="title function_">updateInstance</span>(<span class="variable language_">this</span>.<span class="property">__internalInstance</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// render 出来的也是 VDOM</span></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; render, createElement, <span class="title class_">Component</span> &#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<figure class="highlight js"><figcaption><span>dom-utils.js</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEvent</span> = (<span class="params">name</span>) =&gt; name.<span class="title function_">startsWith</span>(<span class="string">&quot;on&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isAttribute</span> = (<span class="params">name</span>) =&gt;</span><br><span class="line">  !<span class="title function_">isEvent</span>(name) &amp;&amp; name !== <span class="string">&quot;children&quot;</span> &amp;&amp; name !== <span class="string">&quot;style&quot;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isNew</span> = (<span class="params">prev, next</span>) =&gt; <span class="function">(<span class="params">key</span>) =&gt;</span> prev[key] !== next[key]</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">isGone</span> = (<span class="params">prev, next</span>) =&gt; <span class="function">(<span class="params">key</span>) =&gt;</span> !(key <span class="keyword">in</span> next)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">TEXT_ELEMENT</span> = <span class="string">&quot;TEXT ELEMENT&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新 DOM 属性</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateDomProperties</span>(<span class="params">dom, prevProps, nextProps</span>) &#123;</span><br><span class="line">  <span class="comment">// remove old event listeners</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(prevProps)</span><br><span class="line">    .<span class="title function_">filter</span>(isEvent)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> !(key <span class="keyword">in</span> nextProps) || <span class="title function_">isNew</span>(prevProps, nextProps)(key))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name.<span class="title function_">toLowerCase</span>().<span class="title function_">substring</span>(<span class="number">2</span>)</span><br><span class="line">      dom.<span class="title function_">removeEventListener</span>(eventType, prevProps[name])</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// remove old attributes</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(prevProps)</span><br><span class="line">    .<span class="title function_">filter</span>(isAttribute)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title function_">isGone</span>(prevProps, nextProps))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      dom[name] = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add new attributes</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(nextProps)</span><br><span class="line">    .<span class="title function_">filter</span>(isAttribute)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title function_">isNew</span>(prevProps, nextProps))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      dom[name] = nextProps[name]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set style</span></span><br><span class="line">  prevProps.<span class="property">style</span> = prevProps.<span class="property">style</span> || &#123;&#125;</span><br><span class="line">  nextProps.<span class="property">style</span> = nextProps.<span class="property">style</span> || &#123;&#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(nextProps.<span class="property">style</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title function_">isNew</span>(prevProps.<span class="property">style</span>, nextProps.<span class="property">style</span>))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      dom.<span class="property">style</span>[key] = nextProps.<span class="property">style</span>[key]</span><br><span class="line">    &#125;)</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(prevProps.<span class="property">style</span>)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title function_">isGone</span>(prevProps.<span class="property">style</span>, nextProps.<span class="property">style</span>))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      dom.<span class="property">style</span>[key] = <span class="string">&quot;&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// add new event listeners</span></span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(nextProps)</span><br><span class="line">    .<span class="title function_">filter</span>(isEvent)</span><br><span class="line">    .<span class="title function_">filter</span>(<span class="title function_">isNew</span>(prevProps, nextProps))</span><br><span class="line">    .<span class="title function_">forEach</span>(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> eventType = name.<span class="title function_">toLowerCase</span>().<span class="title function_">substring</span>(<span class="number">2</span>)</span><br><span class="line">      dom.<span class="title function_">addEventListener</span>(eventType, nextProps[name])</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createDomElement</span>(<span class="params">fiber</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> isTextElement = fiber.<span class="property">type</span> === <span class="variable constant_">TEXT_ELEMENT</span></span><br><span class="line">  <span class="keyword">const</span> dom = isTextElement</span><br><span class="line">    ? <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">    : <span class="variable language_">document</span>.<span class="title function_">createElement</span>(fiber.<span class="property">type</span>)</span><br><span class="line"></span><br><span class="line">  <span class="title function_">updateDomProperties</span>(dom, [], fiber.<span class="property">props</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> dom</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; createDomElement, updateDomProperties &#125;</span><br></pre></td></tr></table></figure>

<p>usage:</p>
<figure class="highlight jsx"><figcaption><span>index.jsx</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&quot;./react-old.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">randomLikes</span> = (<span class="params"></span>) =&gt; <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stories = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;React introduction&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title function_">randomLikes</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Rendering DOM elements &quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title function_">randomLikes</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Element creation and JSX&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title function_">randomLikes</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Instances and reconciliation&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title function_">randomLikes</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Components and state&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;http://baidu.com&quot;</span>,</span><br><span class="line">    <span class="attr">likes</span>: <span class="title function_">randomLikes</span>(),</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>React Stories<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          &#123;this.props.stories.map((story) =&gt; (</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">Story</span> <span class="attr">name</span>=<span class="string">&#123;story.name&#125;</span> <span class="attr">url</span>=<span class="string">&#123;story.url&#125;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">          ))&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Story</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">props</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(props)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">state</span> = &#123; <span class="attr">like</span>: <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>) &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">like</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">like</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">like</span> + <span class="number">1</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; name, url &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">const</span> &#123; like &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;()</span> =&gt;</span> this.like()&#125;&gt;&#123;like&#125;❤️<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;url&#125;</span>&gt;</span>&#123;name&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">React</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">App</span> <span class="attr">stories</span>=<span class="string">&#123;stories&#125;</span> /&gt;</span></span>, <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;root&quot;</span>))</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>普京出兵乌克兰</title>
    <url>/2022/02/22/%E6%99%AE%E4%BA%AC%E5%87%BA%E5%85%B5%E4%B9%8C%E5%85%8B%E5%85%B0/</url>
    <content><![CDATA[<h3 id="出兵了！普京指示俄军方确保顿巴斯地区和平，表示“乌是俄历史上不可分割的一部分”！"><a href="#出兵了！普京指示俄军方确保顿巴斯地区和平，表示“乌是俄历史上不可分割的一部分”！" class="headerlink" title="出兵了！普京指示俄军方确保顿巴斯地区和平，表示“乌是俄历史上不可分割的一部分”！"></a>出兵了！普京指示俄军方确保顿巴斯地区和平，表示“乌是俄历史上不可分割的一部分”！</h3><p>当地时间 21 日，俄罗斯总统普京在宣布承认顿涅茨克人民共和国和卢甘斯克人民共和国独立后，指示俄罗斯国防部在俄罗斯与顿涅茨克人民共和国和卢甘斯克人民共和国的友好合作互助条约被批准之前，确保俄罗斯武装部队维护顿涅茨克人民共和国和卢甘斯克人民共和国的和平。</p>
<p>据澎湃新闻，当地时间 2 月 21 日，俄罗斯总统普京发表全国电视讲话时表示，乌克兰不仅是邻国还是俄罗斯历史上不可分割的一部分，乌民众是俄方的同志和亲人，是有血缘关系的人。</p>
<p>据悉，联合国安理会将应乌克兰方面请求，于美东时间 21 日晚 9 时（北京时间 22 日上午 10 时）召开紧急会议。本月联合国安理会轮值主席为俄罗斯。</p>
<p>乌克兰地区局势紧张，国际资本市场避险情绪升温，推动股票等权益类资产进一步被抛售，而金价和黄金股均进一步上涨。</p>
<p>继欧洲股市普跌之后，亚太股市也普遍下跌，日经 225 指数开盘跌 1.5%，韩国 Kospi 指数下跌 1.41%。A 股市场今天上午也进一步调整，各大指数均现显著下挫，近 4000 股下跌。港股方面亦在调整，恒生指数盘中大跌超过 3%，截至午盘仍跌 2.95%。</p>
<p>普京要求俄军</p>
<p>维护两个“共和国”的和平</p>
<p>据央视新闻，俄罗斯法律门户网站发布了俄总统普京 21 日签署的承认顿涅茨克人民共和国和卢甘斯克人民共和国的总统令内容。根据总统令，因乌克兰拒绝执行明斯克协议，根据当地人民的意愿，俄罗斯承认两个共和国为独立主权国家。总统令责成俄外交部开始与两国进行建立外交关系的谈判，与俄罗斯其他有关部门起草友好合作互助条约，并按程序完成条约的签署。总统令要求俄罗斯国防部在友好互助条约被批准之前确保俄罗斯武装部队维护顿涅茨克人民共和国和卢甘斯克人民共和国的和平。</p>
<p>当日稍早时，俄罗斯总统普京发表全国视频讲话，宣布承认乌东民间武装自称的顿涅茨克人民共和国和卢甘斯克人民共和国为独立国家。</p>
<p>据环球网援引俄罗斯《观点报》22 日报道称，网上有消息称俄军已开始抵达顿巴斯地区，也有人公布了相关视频。</p>
<p>报道称，国际文传电讯社援引目击者的话说，两个装甲车队已处于“顿涅茨克共和国”并向该其北部和西部前进。</p>
<p>报道还称，乌克兰 OstroV 通讯社援引社交媒体的消息称，“俄军第一批部队正进入”顿巴斯地区。</p>
<p>据央视新闻，俄罗斯国家杜马议员米哈伊尔·谢列梅特当地时间 22 日表示，对于俄罗斯宣布承认乌克兰东部“顿涅茨克人民共和国”与“卢甘斯克人民共和国”独立，西方国家准备对俄罗斯实施新的制裁措施，对此俄罗斯已经做好了一切准备迎接事态发展，俄罗斯不会胆怯。俄罗斯不惧怕西方国家的制裁，我们重视的是人民的生命安全而不是经济。</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>未看书导致的一个坑</title>
    <url>/2018/08/10/%E6%9C%AA%E7%9C%8B%E4%B9%A6%E5%AF%BC%E8%87%B4%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</url>
    <content><![CDATA[<p>某日被书中一段代码误导</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;ok&quot;</span>)</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line">promise.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//ok</span></span><br><span class="line"><span class="comment">//Uncaught Error : test</span></span><br></pre></td></tr></table></figure>

<p>由于前面还有这样一段话</p>
<blockquote>
<p>如果 Promise 状态已经变成 Resolved，再抛出错误是无效的。</p>
</blockquote>
<p>当时看到这，思索了许久，为什么已经 resolve 了这个 ERROR 还是可以往外抛出呢？<br>后面发现，settimeout 是一个异步函数，throw 会在下一轮事件循环开始时抛出，所以无论是否 resolve，这个 ERROR 都是会抛出的。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>汤加火山爆发</title>
    <url>/2022/01/18/%E6%B1%A4%E5%8A%A0%E7%81%AB%E5%B1%B1%E7%88%86%E5%8F%91/</url>
    <content><![CDATA[<h3 id="又一次见证历史了。"><a href="#又一次见证历史了。" class="headerlink" title="又一次见证历史了。"></a>又一次见证历史了。</h3><p>预计级别会达到<code>VEI6</code>，不知道后续会不会继续喷发。<br>没想到，疫情还未过去，出现了一个比疫情更严峻的现实问题——<code>无夏之年</code>。</p>
<h2 id="更新于-2022-年-7-月-26-日-17-22-50"><a href="#更新于-2022-年-7-月-26-日-17-22-50" class="headerlink" title="更新于 2022 年 7 月 26 日 17:22:50"></a><strong>更新于 2022 年 7 月 26 日 17:22:50</strong></h2><p>我错了，最近的温度已经到达了 40℃。</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>等式公理</title>
    <url>/2019/04/14/%E7%AD%89%E5%BC%8F%E5%85%AC%E7%90%86/</url>
    <content><![CDATA[<h3 id="公式-P-Q-R-P-Q-R"><a href="#公式-P-Q-R-P-Q-R" class="headerlink" title="公式: $$P{Q}R\ ({P}Q{R})$$"></a>公式: $$P{Q}R\ ({P}Q{R})$$</h3><p>P 和 R 都是一阶公式, 如果前提条件 P 在执行 Q 前成立, 则执行后得到满足条件 R 的状态<br>部分正确性断言: 如果 P 在 Q 执行前为真, 那么, 如果 Q 的执行终止,则终止在使 R 为真的某个状态<br>终止性断言:如果 P 在 Q 执行前为真, 那么 Q 将终止在使 R 为真的某个状态<br><strong>赋值公理: $$\vdash P_0 {x:&#x3D;f} P$$</strong></p>
<h3 id="推理规则的表示"><a href="#推理规则的表示" class="headerlink" title="推理规则的表示"></a>推理规则的表示</h3><p>$$\frac{premise -&gt; f_0, f_1, …, f_n}{conclusion -&gt; f_0}$$</p>
<h3 id="推理规则"><a href="#推理规则" class="headerlink" title="推理规则"></a>推理规则</h3><ul>
<li>Rules of Consequence:<br>$$\frac{P{Q}R,\ R\rightarrow S}{P{Q}S}\ \ \ \ \ \frac{P{Q}R,\ S\rightarrow P}{S{Q}R}$$</li>
<li>Rule of Composition:<br>$$\frac{P{Q_1}R_1,\ R_1{Q_2}R}{P{Q_1, Q_2}R}$$</li>
<li>Rules of Iteration:<br>$$\frac{P\ &amp;\ B{S}P}{P\ {while\ B\ do\ S}\ \neg B \ &amp;\  P}$$</li>
</ul>
<h3 id="等式公理"><a href="#等式公理" class="headerlink" title="等式公理"></a>等式公理</h3><ul>
<li>代换: $[N&#x2F;x]M$ 表示表示 M 中的自由变元 x 用 N 代换的结果, <strong>N 中的自由变元代换后不能成为约束变元</strong></li>
<li>约束变元改名: $\lambda x:\sigma .M &#x3D; \lambda y:\sigma.[y&#x2F;x]M$ 例如:$\lambda x:\sigma.x + y &#x3D; \lambda z:\sigma .z+y$</li>
<li>等价公理: 计算函数实际就是在函数中使用实在变元替换形式变元, $(\lambda x:\sigma.M)N &#x3D; [N&#x2F;x]M$</li>
<li>同余性规则: 相等的函数作用于相等的变元产生相等的结果, $\frac{M_1&#x3D;M_2,\ N_1&#x3D;N_2}{M_1N_1&#x3D;M_2N_2}$</li>
</ul>
]]></content>
      <tags>
        <tag>Math</tag>
        <tag>Type Theory</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的Array实现</title>
    <url>/2019/02/28/%E7%AE%80%E5%8D%95%E7%9A%84Array%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="简单的-Array-实现"><a href="#简单的-Array-实现" class="headerlink" title="简单的 Array 实现"></a>简单的 Array 实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Array</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span> = [] <span class="comment">// 数组</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size <span class="comment">// 最大长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span> = <span class="number">0</span> <span class="comment">// 成员数量</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">arr</span>.<span class="property">length</span> == <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Array is full&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">elems</span>++] = elem</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">find</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="variable language_">this</span>.<span class="property">elems</span>; i &lt; len; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">arr</span>[i] == elem) <span class="keyword">return</span> i</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">delete</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">find</span>(elem)</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Element not found&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index, len = <span class="variable language_">this</span>.<span class="property">elems</span> - <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">arr</span>[i] = <span class="variable language_">this</span>.<span class="property">arr</span>[i + <span class="number">1</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>--</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">update</span>(<span class="params">oldVal, newVal</span>) &#123;</span><br><span class="line">    <span class="comment">// only use for unique element</span></span><br><span class="line">    <span class="keyword">let</span> index = <span class="variable language_">this</span>.<span class="title function_">find</span>(oldVal)</span><br><span class="line">    <span class="keyword">if</span> (index == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Element not found&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[index] = newVal</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> srt = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="variable language_">this</span>.<span class="property">elems</span>; i &lt; len; i++) &#123;</span><br><span class="line">      srt += <span class="string">&quot;&quot;</span> + <span class="variable language_">this</span>.<span class="property">arr</span>[i] + <span class="string">&quot; &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(srt)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">length</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">elems</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line">arr.<span class="title function_">add</span>(<span class="number">1</span>)</span><br><span class="line">arr.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line">arr.<span class="title function_">add</span>(<span class="number">3</span>)</span><br><span class="line">arr.<span class="title function_">add</span>(<span class="number">4</span>)</span><br><span class="line">arr.<span class="title function_">display</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">length</span>())</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 2 3 4</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>正则的扩展</title>
    <url>/2018/08/11/%E6%AD%A3%E5%88%99%E7%9A%84%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;xyz&quot;</span>, <span class="string">&quot;i&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/xyz/i</span>)</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/xyz/i</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="regexp">/abc/gi</span>, <span class="string">&quot;i&quot;</span>).<span class="property">flags</span> <span class="comment">//ig 被覆盖成 i</span></span><br></pre></td></tr></table></figure>

<h3 id="match-、replace-、search-、split"><a href="#match-、replace-、search-、split" class="headerlink" title="match()、replace()、search()、split()"></a>match()、replace()、search()、split()</h3><p>String.prototype.match 调用 RegExp.prototype[Symbol.match]<br>String.prototype.replace 调用 RegExp.prototype[Symbol.replace]<br>String.prototype.search 调用 RegExp.prototype[Symbol.search]<br>String.prototype.split 调用 RegExp.prototype[Symbol.split]</p>
<span id="more"></span>

<h3 id="u-修饰符、i-修饰符、y-修饰符"><a href="#u-修饰符、i-修饰符、y-修饰符" class="headerlink" title="u 修饰符、i 修饰符、y 修饰符"></a>u 修饰符、i 修饰符、y 修饰符</h3><p>ES6 对正则表达式添加了 u 修饰符，用来处理大于\uFFFF 的 Unicod 字符。<br>\u004B 与\u212A 都是 K，不加修饰就无法识别非规范的 K 字符。<br>y 修饰符与 g 修饰符类似，也是全局匹配，不同之处在于 g 修饰符只要剩余位置中存在匹配就行，而 y 修饰符会确保匹配必须从剩余的第一个位置开始。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&quot;aaa-aa-a&quot;</span></span><br><span class="line"><span class="keyword">var</span> r1 = <span class="regexp">/a+/g</span></span><br><span class="line"><span class="keyword">var</span> r2 = <span class="regexp">/a+/y</span></span><br><span class="line"></span><br><span class="line">r1.<span class="title function_">exec</span>(s) <span class="comment">//[&#x27;aaa&#x27;]</span></span><br><span class="line">r2.<span class="title function_">exec</span>(s) <span class="comment">//[&#x27;aaa&#x27;]</span></span><br><span class="line">r1.<span class="title function_">exec</span>(s) <span class="comment">//[&#x27;aa&#x27;]</span></span><br><span class="line">r2.<span class="title function_">exec</span>(s) <span class="comment">//null</span></span><br></pre></td></tr></table></figure>

<h3 id="sticky-属性"><a href="#sticky-属性" class="headerlink" title="sticky 属性"></a>sticky 属性</h3><p>与 y 修饰符匹配，表示是否设置了 y 修饰符。</p>
<h3 id="flags-属性"><a href="#flags-属性" class="headerlink" title="flags 属性"></a>flags 属性</h3><p>返回正则表达式的修饰符。</p>
<h3 id="组匹配"><a href="#组匹配" class="headerlink" title="组匹配"></a>组匹配</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">RE_DATE</span> = <span class="regexp">/(\d&#123;4&#125;)-(\d&#123;2&#125;)-(\d&#123;2&#125;)/</span></span><br><span class="line"><span class="keyword">const</span> matchObj = <span class="variable constant_">RE_DATE</span>.<span class="title function_">exec</span>(<span class="string">&quot;2018-03-01&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> year = matchObj[<span class="number">1</span>] <span class="comment">//2018</span></span><br><span class="line"><span class="keyword">const</span> month = matchObj[<span class="number">2</span>] <span class="comment">//03</span></span><br><span class="line"><span class="keyword">const</span> day = matchObj[<span class="number">3</span>] <span class="comment">//01</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的Queue实现</title>
    <url>/2019/02/28/%E7%AE%80%E5%8D%95%E7%9A%84Queue%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="简单的-Queue-实现"><a href="#简单的-Queue-实现" class="headerlink" title="简单的 Queue 实现"></a>简单的 Queue 实现</h3><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size <span class="comment">// 队列最大长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="number">0</span> <span class="comment">// 首位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bottom</span> = -<span class="number">1</span> <span class="comment">// 尾位置</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span> = <span class="number">0</span> <span class="comment">// 成员个数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span> = [] <span class="comment">// 队列</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elems</span> == <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Queue is full&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">bottom</span> == <span class="variable language_">this</span>.<span class="property">size</span> - <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="comment">// 循环队列</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bottom</span> = -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[++<span class="variable language_">this</span>.<span class="property">bottom</span>] = elem</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>++</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">out</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elems</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Queue is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">top</span>]</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">top</span>] = <span class="literal">null</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span>++</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">top</span> == <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">top</span> = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>--</span><br><span class="line">    <span class="keyword">return</span> elem</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> queue = <span class="keyword">new</span> <span class="title class_">Queue</span>()</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">3</span>)</span><br><span class="line">queue.<span class="title function_">add</span>(<span class="number">2</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">out</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">out</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(queue.<span class="title function_">out</span>())</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="链式实现"><a href="#链式实现" class="headerlink" title="链式实现"></a>链式实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data = -<span class="number">1</span>, next = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="literal">null</span> <span class="comment">// 首指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bottom</span> = <span class="literal">null</span> <span class="comment">// 尾指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span> = <span class="number">0</span> <span class="comment">// 成员个数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elems</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">bottom</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(elem)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> newNode = <span class="keyword">new</span> <span class="title class_">Node</span>(elem)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bottom</span>.<span class="property">next</span> = newNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">bottom</span> = newNode</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">out</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elems</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queue is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">top</span></span><br><span class="line">    <span class="keyword">let</span> value = current.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">top</span>.<span class="property">next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>--</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">current</span> = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">Queue is empty</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的LinkList实现</title>
    <url>/2019/02/28/%E7%AE%80%E5%8D%95%E7%9A%84LinkList%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="简单的-LinkList-实现"><a href="#简单的-LinkList-实现" class="headerlink" title="简单的 LinkList 实现"></a>简单的 LinkList 实现</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data = -<span class="number">1</span>, prev = <span class="literal">null</span>, next = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">prev</span> = prev <span class="comment">// 向前指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = next <span class="comment">// 向后指针</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LinkList</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span> <span class="comment">// 首、尾指针</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = <span class="number">0</span> <span class="comment">// 元素个数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addHead</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> elemNode = <span class="keyword">new</span> <span class="title class_">Node</span>(elem)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">size</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = elemNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = elemNode</span><br><span class="line">      elemNode.<span class="property">next</span> = <span class="variable language_">this</span>.<span class="property">head</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = elemNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deleteHead</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">size</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">prev</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">head</span>.<span class="property">next</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>--</span><br><span class="line">      <span class="keyword">return</span> elem</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">addTail</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> elemNode = <span class="keyword">new</span> <span class="title class_">Node</span>(elem)</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">size</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = elemNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      elemNode.<span class="property">prev</span> = <span class="variable language_">this</span>.<span class="property">tail</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = elemNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = elemNode</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">deleteTail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">size</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">data</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">next</span> = <span class="literal">null</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="variable language_">this</span>.<span class="property">tail</span>.<span class="property">prev</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span>--</span><br><span class="line">      <span class="keyword">return</span> elem</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">display</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">head</span>,</span><br><span class="line">      count = <span class="variable language_">this</span>.<span class="property">size</span>,</span><br><span class="line">      str = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      str += current.<span class="property">data</span> + <span class="string">&quot; &quot;</span></span><br><span class="line">      current = current.<span class="property">next</span></span><br><span class="line">      count--</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> linklist = <span class="keyword">new</span> <span class="title class_">LinkList</span>()</span><br><span class="line">linklist.<span class="title function_">addHead</span>(<span class="number">1</span>)</span><br><span class="line">linklist.<span class="title function_">addHead</span>(<span class="number">2</span>)</span><br><span class="line">linklist.<span class="title function_">addHead</span>(<span class="number">3</span>)</span><br><span class="line">linklist.<span class="title function_">deleteHead</span>()</span><br><span class="line">linklist.<span class="title function_">addTail</span>(<span class="number">4</span>)</span><br><span class="line">linklist.<span class="title function_">display</span>()</span><br></pre></td></tr></table></figure>

<h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p><code>2 1 4</code></p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>策略模式</title>
    <url>/2019/07/15/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">ResultState</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">States</span> = &#123;</span><br><span class="line">    <span class="attr">state0</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state0&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state1&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state2&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">state3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;state3&quot;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">show</span>(<span class="params">result</span>) &#123;</span><br><span class="line">    <span class="title class_">States</span>[<span class="string">&quot;state&quot;</span> + result] &amp;&amp; <span class="title class_">States</span>[<span class="string">&quot;state&quot;</span> + result]()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    show,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="title class_">ResultState</span>.<span class="title function_">show</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>

<h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Price</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">return30</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>) * <span class="number">30</span>,</span><br><span class="line">    <span class="attr">return50</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> +price + <span class="built_in">parseInt</span>(price / <span class="number">100</span>) * <span class="number">50</span>,</span><br><span class="line">    <span class="attr">percent90</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> (price * <span class="number">100</span> * <span class="number">90</span>) / <span class="number">10000</span>,</span><br><span class="line">    <span class="attr">percent80</span>: <span class="function">(<span class="params">price</span>) =&gt;</span> (price * <span class="number">100</span> * <span class="number">80</span>) / <span class="number">10000</span>,</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">algorithm, price</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> obj[algorithm] &amp;&amp; obj[algorithm](price)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">let</span> price = <span class="title class_">Price</span>(<span class="string">&quot;return50&quot;</span>, <span class="number">321.13</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(price)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的Stack实现</title>
    <url>/2019/02/28/%E7%AE%80%E5%8D%95%E7%9A%84Stack%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h3 id="简单的-Stack-实现"><a href="#简单的-Stack-实现" class="headerlink" title="简单的 Stack 实现"></a>简单的 Stack 实现</h3><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">size = <span class="number">10</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span> = [] <span class="comment">// 栈</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size <span class="comment">// 最大长度</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = -<span class="number">1</span> <span class="comment">// 栈顶</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">top</span> == <span class="variable language_">this</span>.<span class="property">size</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">size</span> *= <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">arr</span>[++<span class="variable language_">this</span>.<span class="property">top</span>] = elem</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> elem = <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">top</span>--]</span><br><span class="line">    <span class="keyword">return</span> elem</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">peekTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">top</span> == -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">arr</span>[<span class="variable language_">this</span>.<span class="property">top</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt;= <span class="variable language_">this</span>.<span class="property">top</span>; i++) &#123;</span><br><span class="line">      str += <span class="variable language_">this</span>.<span class="property">arr</span>[i] + <span class="string">&quot; &quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> stack = <span class="keyword">new</span> <span class="title class_">Stack</span>()</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">1</span>)</span><br><span class="line">stack.<span class="title function_">push</span>(<span class="number">2</span>)</span><br><span class="line">stack.<span class="title function_">pop</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(stack.<span class="title function_">peekTop</span>())</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h4 id="链式实现"><a href="#链式实现" class="headerlink" title="链式实现"></a>链式实现</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Node</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data = -<span class="number">1</span>, next = <span class="literal">null</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">data</span> = data</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">next</span> = next</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Stack</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="literal">null</span> <span class="comment">// 栈顶</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span> = <span class="number">0</span> <span class="comment">// 成员个数</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">push</span>(<span class="params">elem</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="keyword">new</span> <span class="title class_">Node</span>(elem, <span class="variable language_">this</span>.<span class="property">top</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">pop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">elems</span> == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;stack is empty&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="variable language_">this</span>.<span class="property">top</span></span><br><span class="line">    <span class="keyword">let</span> elem = current.<span class="property">data</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">top</span>.<span class="property">next</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">elems</span>--</span><br><span class="line">    current = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> elem</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">peekTop</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">top</span>.<span class="property">data</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><p><code>1</code></p>
]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
      <tags>
        <tag>Data Structure</tag>
      </tags>
  </entry>
  <entry>
    <title>简陋VDOM</title>
    <url>/2019/04/11/%E7%AE%80%E9%99%8BVDOM/</url>
    <content><![CDATA[<h3 id="一个简陋的-VDOM"><a href="#一个简陋的-VDOM" class="headerlink" title="一个简陋的 VDOM"></a>一个简陋的 VDOM</h3><p>希望以后会慢慢完善吧…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> data = &#123;</span><br><span class="line">  <span class="attr">tag</span>: <span class="string">&quot;div&quot;</span>,</span><br><span class="line">  <span class="attr">children</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">&quot;span&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tag</span>: <span class="string">&quot;#text&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;hello world&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">tag</span>: <span class="string">&quot;p&quot;</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tag</span>: <span class="string">&quot;#text&quot;</span>,</span><br><span class="line">          <span class="attr">content</span>: <span class="string">&quot;This is a paragraph!&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tag</span>: <span class="string">&quot;h1&quot;</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">tag</span>: <span class="string">&quot;#text&quot;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&quot;This is a H1 tag&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">tag</span>: <span class="string">&quot;h6&quot;</span>,</span><br><span class="line">          <span class="attr">children</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">tag</span>: <span class="string">&quot;#text&quot;</span>,</span><br><span class="line">              <span class="attr">content</span>: <span class="string">&quot;and I&#x27;m h6&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">VDOM</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tag</span> = data.<span class="property">tag</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">children</span> = data.<span class="property">children</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">content</span> = data.<span class="property">content</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">static</span> <span class="title function_">render</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="keyword">new</span> <span class="title function_">VDOM</span>(data)</span><br><span class="line">    <span class="keyword">if</span> (_this.<span class="property">tag</span> === <span class="string">&quot;#text&quot;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(_this.<span class="property">content</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> node = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(_this.<span class="property">tag</span>)</span><br><span class="line">    _this.<span class="property">children</span>.<span class="title function_">map</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> node.<span class="title function_">appendChild</span>(<span class="variable constant_">VDOM</span>.<span class="title function_">render</span>(child)))</span><br><span class="line">    <span class="keyword">return</span> node</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">diff</span> = (<span class="params">root, oldV, newV, current = <span class="number">0</span></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (!oldV) root.<span class="title function_">appendChild</span>(newV)</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (!newV) root.<span class="title function_">removeChild</span>(root.<span class="property">childNodes</span>[current])</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (newV.<span class="property">tag</span> !== oldV.<span class="property">tag</span> || newV.<span class="property">content</span> !== oldV.<span class="property">content</span>)</span><br><span class="line">    root.<span class="title function_">replaceChild</span>(<span class="keyword">new</span> <span class="title function_">VDOM</span>(newV).<span class="title function_">render</span>(), root.<span class="property">childNodes</span>[current])</span><br><span class="line">  <span class="comment">// 递归判断</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newV.<span class="property">children</span>.<span class="property">length</span> || i &lt; oldV.<span class="property">children</span>.<span class="property">length</span>; i++)</span><br><span class="line">      <span class="title function_">diff</span>(root.<span class="property">childNodes</span>[i], oldV.<span class="property">children</span>[i], newV.<span class="property">children</span>[i], i)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#root&quot;</span>).<span class="title function_">appendChild</span>(<span class="variable constant_">VDOM</span>.<span class="title function_">render</span>(data))</span><br></pre></td></tr></table></figure>

<p>结构为:</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      This is a paragraph!</span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a H1 tag<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h6</span>&gt;</span>and I&#x27;m h6<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
        <tag>VDOM</tag>
      </tags>
  </entry>
  <entry>
    <title>美国参议院一致通过《香港人权与民主法案》</title>
    <url>/2019/11/20/%E7%BE%8E%E5%9B%BD%E5%8F%82%E8%AE%AE%E9%99%A2%E4%B8%80%E8%87%B4%E9%80%9A%E8%BF%87%E3%80%8A%E9%A6%99%E6%B8%AF%E4%BA%BA%E6%9D%83%E4%B8%8E%E6%B0%91%E4%B8%BB%E6%B3%95%E6%A1%88%E3%80%8B/</url>
    <content><![CDATA[<p><em>Hong Kong Human Rights and Democracy Act</em></p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>绘制点</title>
    <url>/2020/06/17/%E7%BB%98%E5%88%B6%E7%82%B9/</url>
    <content><![CDATA[<h3 id="Shader"><a href="#Shader" class="headerlink" title="Shader"></a>Shader</h3><p>WebGL 使用两种 Shader：</p>
<ul>
<li>Vertex Shader：用于描述 point 的特性。</li>
<li>Fragment Shader：用于逐片处理。</li>
</ul>
<p>Shader Program 使用的是 GLSL ES 语言，在 JS 中需要使用字符串编写，再通过函数加载进去。</p>
<p>WebGL 的执行流程大致为：</p>
<ol>
<li>Get canvas.</li>
<li>Get WebGL context.</li>
<li>Initialize vertex shader and fragment shader.</li>
<li>Set clear color.</li>
<li>Clear canvas.</li>
<li>Draw.</li>
</ol>
<h3 id="vec4"><a href="#vec4" class="headerlink" title="vec4"></a>vec4</h3><p>在 GLSL ES 中，<code>vec4</code>类型用四维适量描述一个点的三维空间投影，<code>(x, y, z, w)</code>等价与三维空间的<code>(x / w, y / w, z / w)</code>。<br>WebGL 坐标系统水平向右为 x 正轴，竖直向上为 y 正轴，垂直屏幕向外为 z 正轴。范围都在<code>[-1, 1]</code>之间。</p>
<span id="more"></span>

<h3 id="使用-onmousedown-搭配-WebGL-进行图像绘制"><a href="#使用-onmousedown-搭配-WebGL-进行图像绘制" class="headerlink" title="使用 onmousedown 搭配 WebGL 进行图像绘制"></a>使用 onmousedown 搭配 WebGL 进行图像绘制</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> vShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    attribute vec4 a_Position;</span></span><br><span class="line"><span class="string">    attribute float a_PointSize;</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_Position = a_Position;</span></span><br><span class="line"><span class="string">        gl_PointSize = a_PointSize;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fShaderSource = <span class="string">`</span></span><br><span class="line"><span class="string">    void main() &#123;</span></span><br><span class="line"><span class="string">        gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#canvas&quot;</span>)</span><br><span class="line">  <span class="keyword">const</span> gl = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;webgl&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!gl) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed to initialize context for WebGL&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="title function_">initShaders</span>(gl, vShaderSource, fShaderSource)) &#123;</span><br><span class="line">    <span class="comment">// initialize program</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed to initialize shaders.&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a_Position = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;a_Position&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (a_Position &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;failed to get the storage location of a_Position&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> a_PointSize = gl.<span class="title function_">getAttribLocation</span>(gl.<span class="property">program</span>, <span class="string">&quot;a_PointSize&quot;</span>)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">vertexAttrib1f</span>(a_PointSize, <span class="number">5.0</span>) <span class="comment">// set the &#x27;attribute float a_PointSize&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// canvas.onmousemove = function (event) &#123;</span></span><br><span class="line">  canvas.<span class="property">onmousedown</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="title function_">click</span>(event, gl, canvas, a_Position)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clearColor</span>(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">1</span>)</span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> g_points = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">click</span>(<span class="params">event, gl, canvas, a_Position</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> x = event.<span class="property">clientX</span></span><br><span class="line">  <span class="keyword">let</span> y = event.<span class="property">clientY</span></span><br><span class="line">  <span class="keyword">let</span> rect = event.<span class="property">target</span>.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line"></span><br><span class="line">  <span class="comment">// toggle the domain of points x, y to [-1, 1]</span></span><br><span class="line">  x = (x - rect.<span class="property">left</span> - canvas.<span class="property">width</span> / <span class="number">2</span>) / (canvas.<span class="property">width</span> / <span class="number">2</span>)</span><br><span class="line">  y = (canvas.<span class="property">height</span> / <span class="number">2</span> - (y - rect.<span class="property">top</span>)) / (canvas.<span class="property">height</span> / <span class="number">2</span>)</span><br><span class="line">  g_points.<span class="title function_">push</span>(x)</span><br><span class="line">  g_points.<span class="title function_">push</span>(y)</span><br><span class="line"></span><br><span class="line">  gl.<span class="title function_">clear</span>(gl.<span class="property">COLOR_BUFFER_BIT</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = g_points.<span class="property">length</span>; i &lt; len; i += <span class="number">2</span>) &#123;</span><br><span class="line">    gl.<span class="title function_">vertexAttrib3f</span>(a_Position, g_points[i], g_points[i + <span class="number">1</span>], <span class="number">0</span>) <span class="comment">// set x, y</span></span><br><span class="line"></span><br><span class="line">    gl.<span class="title function_">drawArrays</span>(gl.<span class="property">POINTS</span>, <span class="number">0</span>, <span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>WebGL</category>
      </categories>
      <tags>
        <tag>WebGL</tag>
      </tags>
  </entry>
  <entry>
    <title>美国确认空袭导致伊朗将军苏莱曼尼死亡</title>
    <url>/2020/01/03/%E7%BE%8E%E5%9B%BD%E7%A1%AE%E8%AE%A4%E7%A9%BA%E8%A2%AD%E5%AF%BC%E8%87%B4%E4%BC%8A%E6%9C%97%E5%B0%86%E5%86%9B%E8%8B%8F%E8%8E%B1%E6%9B%BC%E5%B0%BC%E6%AD%BB%E4%BA%A1/</url>
    <content><![CDATA[<p>《纽约时报》美国当地时间 1 月 2 日报道说，美国官员确认，在美军对巴格达的一次空袭中，伊朗伊斯兰革命卫队特种部队“圣城旅”部队指挥官卡西姆·苏莱曼尼将军死亡。</p>
<p>《纽约时报》报道，伊朗官方媒体确认了，伊拉克当地时间 3 日，伊朗将军卡西姆·苏莱曼尼在美军对巴格达国际机场一处目标的空袭中死亡。苏莱曼尼是伊朗革命卫队中的重要官员。美国国防部声明表示，美国发动了空袭。</p>
<blockquote>
<p>“苏莱曼尼将军积极筹划了对美国在伊拉克及地区的外交官和服务人员的攻击。苏莱曼尼将军和‘圣城旅’需要为美军和联军数百人死亡、数千人受伤负起责任。”</p>
</blockquote>
<h3 id="伊朗誓言为苏莱曼尼将军之死报复美国"><a href="#伊朗誓言为苏莱曼尼将军之死报复美国" class="headerlink" title="伊朗誓言为苏莱曼尼将军之死报复美国"></a>伊朗誓言为苏莱曼尼将军之死报复美国</h3><p>伊朗伊斯兰革命卫队（伊朗武装力量组成部分）前总司令、伊朗确定国家利益委员会秘书长穆赫辛·雷扎伊称，伊朗将为在巴格达死于火箭弹袭击的伊斯兰革命卫队圣城旅指挥官卡西姆·苏莱曼尼将军复仇。</p>
<p>雷扎伊在推特上写道：</p>
<blockquote>
<p>“殉难的卡西姆·苏莱曼尼去找他的兄弟们了。我们会狠狠报复美国。”</p>
</blockquote>
<p>伊斯兰革命卫队圣城旅指挥官卡西姆·苏莱曼尼将军 2 日晚上在巴格达的火箭弹袭击中被炸死，伊拉克什叶派民兵武装“人民动员组织”(Al-Hashd al-Shaabi)的几位高级别成员也一同丧生，12 名伊拉克士兵受伤。</p>
<p>五角大楼称系按照美国总统川普的命令开展对苏莱曼尼的行动。五角大楼称，此次打击旨在预防伊朗方面的袭击，而苏莱曼尼本人涉嫌参与袭击联盟基地和美国驻伊拉克大使馆。</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>美股再次熔断</title>
    <url>/2020/03/13/%E7%BE%8E%E8%82%A1%E5%86%8D%E6%AC%A1%E7%86%94%E6%96%AD/</url>
    <content><![CDATA[<h3 id="开盘受挫"><a href="#开盘受挫" class="headerlink" title="开盘受挫"></a>开盘受挫</h3><ul>
<li>开盘后，标普 500 指数跌幅扩大至 7%，触发本周第二次熔断，美股暂停交易 15 分钟。而加拿大多伦多证交所暂停股票交易，股指跌 9.17%，触发一级市场熔断。</li>
<li>恢复交易后，三大指数进一步下跌，道指一度下挫 2100 点。波音下跌 15.4%，仅仅一个月时间，市值腰斩。巴里克黄金 10.2%，特斯拉跌 9.4%。美股邮轮股大跌，挪威邮轮跌超 30%，皇家加勒比邮轮跌超 25%。</li>
<li>今天，美股期货连续出现熔断，早间，纳斯达克指数期货就跌至 7600 点触发熔断，跌幅超 5%。下午标普 500 指数期货跌超 5%，也触发交易限制。</li>
<li>今日，标普 500 期货、道指期货、纳指期货均跌超 5%，再度触发熔断。据不完全统计，除了美股期指外，日内还有泰国股市、菲律宾股市、韩国股市、巴基斯坦股市、印尼股市、巴西股市，加拿大股市 8 个国家股市发生熔断。巴西股市触发二级熔断</li>
</ul>
<h3 id="欧洲央行维持三大关键利率不变"><a href="#欧洲央行维持三大关键利率不变" class="headerlink" title="欧洲央行维持三大关键利率不变"></a>欧洲央行维持三大关键利率不变</h3><p>欧洲央行公布 3 月会议的利率决议，其中，欧洲央行是否会追随美联储和英国央行的步伐进行降息成为最大看点，今日，欧洲央行宣布，维持三大关键利率不变，其中，维持基准利率在 0.000%不变，将存款利率维持在-0.500%不变。此前市场预期降息 10 个基点。</p>
<h3 id="比特币跌破-5000-24h-涨幅-40"><a href="#比特币跌破-5000-24h-涨幅-40" class="headerlink" title="比特币跌破 5000,24h 涨幅-40%"></a>比特币跌破 5000,24h 涨幅-40%</h3><p>北京时间 13&#x2F;03&#x2F;2020 7:30am，BTC 跌破 5000 美元。短线来看 BTC 的避险属性几乎为零。</p>
<h3 id="比特币跌破-4000-24h-涨幅-47"><a href="#比特币跌破-4000-24h-涨幅-47" class="headerlink" title="比特币跌破 4000,24h 涨幅-47%"></a>比特币跌破 4000,24h 涨幅-47%</h3><p>北京时间 13&#x2F;03&#x2F;2020 10:15am</p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>继承</title>
    <url>/2019/07/09/%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="子类的原型对象-类式继承"><a href="#子类的原型对象-类式继承" class="headerlink" title="子类的原型对象-类式继承"></a>子类的原型对象-类式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类式继承</span></span><br><span class="line"><span class="comment">// parent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">superValue</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">superValue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubClass</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">subValue</span> = <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperClass</span>()</span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subValue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> child = <span class="keyword">new</span> <span class="title class_">SubClass</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getSuperValue</span>()) <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="title function_">getSubValue</span>()) <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="创建即继承-构造函数继承"><a href="#创建即继承-构造函数继承" class="headerlink" title="创建即继承-构造函数继承"></a>创建即继承-构造函数继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperClass</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">books</span> = [<span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>]</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">id</span> = id</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">showBooks</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">books</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubClass</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, id)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">instance1.<span class="property">books</span>.<span class="title function_">push</span>(<span class="string">&quot;test&quot;</span>)</span><br><span class="line">instance2.<span class="property">books</span>.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">books</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">books</span>)</span><br><span class="line"><span class="comment">// instance1.showBooks(); // Type Error</span></span><br></pre></td></tr></table></figure>

<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// parent</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperClass</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">books</span> = [<span class="string">&quot;JavaScript&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;css&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// child</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubClass</span>(<span class="params">name, time</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">time</span> = time</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperClass</span>()</span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">time</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="string">&quot;js book&quot;</span>, <span class="number">1998</span>)</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="string">&quot;css book&quot;</span>, <span class="number">2003</span>)</span><br><span class="line">instance1.<span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure>

<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritObject</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">  <span class="attr">alikeBook</span>: [<span class="string">&quot;css book&quot;</span>, <span class="string">&quot;html&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newBook = <span class="title function_">inheritObject</span>(book)</span><br><span class="line">newBook.<span class="property">name</span> = <span class="string">&quot;ajax&quot;</span></span><br><span class="line">newBook.<span class="property">alikeBook</span>.<span class="title function_">push</span>(<span class="string">&quot;xml&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> otherBook = <span class="title function_">inheritObject</span>(book)</span><br><span class="line">otherBook.<span class="property">name</span> = <span class="string">&quot;flash&quot;</span></span><br><span class="line">otherBook.<span class="property">alikeBook</span>.<span class="title function_">push</span>(<span class="string">&quot;as&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newBook.<span class="property">name</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newBook.<span class="property">alikeBook</span>) <span class="comment">// 引用类型的属性共享</span></span><br></pre></td></tr></table></figure>

<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritObject</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// base object</span></span><br><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;js&quot;</span>,</span><br><span class="line">  <span class="attr">alikeBook</span>: [<span class="string">&quot;css&quot;</span>, <span class="string">&quot;html&quot;</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createBook</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> o = <span class="title function_">inheritObject</span>(obj)</span><br><span class="line"></span><br><span class="line">  o.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> o</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> books = <span class="title function_">createBook</span>(book)</span><br><span class="line">books.<span class="title function_">getName</span>()</span><br></pre></td></tr></table></figure>

<h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">inheritObject</span>(<span class="params">o</span>) &#123;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">  F.<span class="property"><span class="keyword">prototype</span></span> = o</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inheritPrototype</span>(<span class="params">subClass, superClass</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="title function_">inheritObject</span>(superClass.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line">  p.<span class="property">constuctor</span> = subClass</span><br><span class="line">  subClass.<span class="property"><span class="keyword">prototype</span></span> = p</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for test</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SuperClass</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">nums</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getName</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubClass</span>(<span class="params">name, time</span>) &#123;</span><br><span class="line">  <span class="title class_">SuperClass</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name)</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">time</span> = time</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">inheritPrototype</span>(<span class="title class_">SubClass</span>, <span class="title class_">SuperClass</span>)</span><br><span class="line"><span class="title class_">SubClass</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getTime</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">time</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="string">&quot;js book&quot;</span>, <span class="number">202</span>)</span><br><span class="line">instance1.<span class="property">nums</span>.<span class="title function_">push</span>(<span class="number">30</span>)</span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SubClass</span>(<span class="string">&quot;css book&quot;</span>, <span class="number">222</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance1.<span class="property">nums</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(instance2.<span class="property">nums</span>)</span><br></pre></td></tr></table></figure>

<h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">mix</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> len = <span class="variable language_">arguments</span>.<span class="property">length</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> arg = <span class="variable language_">arguments</span>[i]</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> property <span class="keyword">in</span> arg) &#123;</span><br><span class="line">      <span class="variable language_">this</span>[property] = arg[property]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> book1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;JavaScript&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> book2 = &#123;</span><br><span class="line">  <span class="attr">price</span>: <span class="number">34</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> book3 = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&quot;haha&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">book3.<span class="title function_">mix</span>(book1, book2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(book3)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>美股熔断</title>
    <url>/2020/03/10/%E7%BE%8E%E8%82%A1%E7%86%94%E6%96%AD/</url>
    <content><![CDATA[<h3 id="股市停止跳动"><a href="#股市停止跳动" class="headerlink" title="股市停止跳动"></a>股市停止跳动</h3><p>美国股市有熔断制度：</p>
<ol>
<li>当大盘跌幅达到-7%的时候，触发 1 级熔断，美国证券市场停止交易 15 分钟。</li>
<li>当大盘跌幅达到-13%的时候，触发 2 级熔断，美国证券市场再停止交易 15 分钟。</li>
<li>当大盘跌幅达到-20%的时候，触发 3 级熔断，当天直接停盘，不再交易。</li>
</ol>
<p>这是自颁布以来，继 1997&#x2F;10&#x2F;27 之后的第二次熔断。主要的原因很有可能是石油大国之间的价格战争。</p>
<h3 id="石油减产协议"><a href="#石油减产协议" class="headerlink" title="石油减产协议"></a>石油减产协议</h3><ol>
<li>2020&#x2F;3&#x2F;6，欧佩克和俄罗斯谈崩，无法达成减产 150 万&#x2F;日的协议。</li>
<li>2020&#x2F;3&#x2F;7，沙特发出增产公告，并大幅度调整官方油价，俄罗斯也应战，增加石油产量。</li>
<li>周一开盘，国际油价暴跌 30%，危机情绪加大，引发各国股市大幅震荡。</li>
</ol>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>装饰器</title>
    <url>/2019/07/14/%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
    <content><![CDATA[<h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 为dom元素添加事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type"></span>&#125; <span class="variable">dom</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">type</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">fn</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addEvent</span>(<span class="params">dom, type, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dom.<span class="property">addEventListener</span>) &#123;</span><br><span class="line">    dom.<span class="title function_">addEventListener</span>(type, fn, <span class="literal">false</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dom.<span class="property">attachEvent</span>) &#123;</span><br><span class="line">    dom.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, fn)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    dom[<span class="string">&quot;on&quot;</span> + type] = fn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 装饰已有对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">id</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">fn</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">decorator</span>(<span class="params">id, fn</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(id)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> id.<span class="property">onclick</span> === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> oldFn = id.<span class="property">onclick</span></span><br><span class="line">    id.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">oldFn</span>()</span><br><span class="line">      <span class="title function_">fn</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    obj.<span class="property">onclick</span> = fn</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Observer</span> = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> _message = &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">regist</span>: <span class="keyword">function</span> (<span class="params">type, fn</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> _message[type] === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        _message[type] = [fn]</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _message[type].<span class="title function_">push</span>(fn)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fire</span>: <span class="keyword">function</span> (<span class="params">type, args</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (!_message[type]) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">let</span> events = &#123;</span><br><span class="line">        type,</span><br><span class="line">        <span class="attr">args</span>: args || &#123;&#125;,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = _message[type].<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">        _message[type][i].<span class="title function_">call</span>(<span class="variable language_">this</span>, events)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">remove</span>: <span class="keyword">function</span> (<span class="params">type, fn</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (_message[type] <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = _message[type].<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">          _message[type][i] === fn &amp;&amp; _message[type].<span class="title function_">splice</span>(i, <span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Observer</span>.<span class="title function_">regist</span>(<span class="string">&quot;test&quot;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="comment">// register</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">type</span>, e.<span class="property">args</span>.<span class="property">msg</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Observer</span>.<span class="title function_">fire</span>(<span class="string">&quot;test&quot;</span>, &#123; <span class="attr">msg</span>: <span class="string">&quot;this is some test message&quot;</span> &#125;) <span class="comment">// send</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>解构赋值</title>
    <url>/2018/08/10/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [, , third] = [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>, <span class="string">&quot;baz&quot;</span>]</span><br><span class="line">third <span class="comment">//&#x27;baz&#x27;</span></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x, y <span class="comment">//1, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">head <span class="comment">//1</span></span><br><span class="line">tail <span class="comment">//[2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&quot;a&quot;</span>]</span><br><span class="line">x <span class="comment">//a</span></span><br><span class="line">y <span class="comment">//undefined</span></span><br><span class="line">z <span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>])</span><br><span class="line">x <span class="comment">//&#x27;a&#x27;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h3 id="不完全解构也会解构成功"><a href="#不完全解构也会解构成功" class="headerlink" title="不完全解构也会解构成功"></a>不完全解构也会解构成功</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">x, y <span class="comment">//1, 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>]</span><br><span class="line">a <span class="comment">//1</span></span><br><span class="line">b <span class="comment">//2</span></span><br><span class="line">d <span class="comment">//4</span></span><br></pre></td></tr></table></figure>

<h3 id="只要具备-Iterator-接口，都可以进行解构赋值"><a href="#只要具备-Iterator-接口，都可以进行解构赋值" class="headerlink" title="只要具备 Iterator 接口，都可以进行解构赋值"></a>只要具备 Iterator 接口，都可以进行解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">fibs</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">0</span>,</span><br><span class="line">    b = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">yield</span> a</span><br><span class="line">    ;[a, b] = [b, a + b]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [first, second, third, fourth, fifth, sixth] = <span class="title function_">fibs</span>()</span><br><span class="line">sixth <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="string">&quot;true&quot;</span>] = []</span><br><span class="line">foo <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&quot;b&quot;</span>] = [<span class="string">&quot;a&quot;</span>] <span class="comment">//x = a, y = b</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">&quot;b&quot;</span>] = [<span class="string">&quot;a&quot;</span>, <span class="literal">undefined</span>] <span class="comment">//x = a, y = b;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>] <span class="comment">//x = null, null 不严格等于 undefined</span></span><br></pre></td></tr></table></figure>

<p>如果默认值是一个表达式，那么这个表达式是 lazy evaluation 的，只有在用到时才会求值。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;f is run&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [x = <span class="title function_">f</span>()] = [<span class="number">1</span>] <span class="comment">//f 不会执行</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [] <span class="comment">//ReferenceError</span></span><br></pre></td></tr></table></figure>

<h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;</span><br><span class="line">foo <span class="comment">//&#x27;aaa&#x27;</span></span><br><span class="line">bar <span class="comment">//&#x27;baz&#x27;</span></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;</span><br><span class="line">baz <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;</span><br><span class="line">baz <span class="comment">//&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure>

<p>前者是匹配模式，后者是变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">&quot;aaa&quot;</span>, <span class="attr">bar</span>: <span class="string">&quot;baz&quot;</span> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="解构的嵌套"><a href="#解构的嵌套" class="headerlink" title="解构的嵌套"></a>解构的嵌套</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">p</span>: [<span class="string">&quot;hello&quot;</span>, &#123; <span class="attr">y</span>: <span class="string">&quot;world&quot;</span> &#125;],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">p</span>: [x, &#123; y &#125;],</span><br><span class="line">&#125; = obj</span><br><span class="line"><span class="comment">//x : &#x27;hello&#x27;, y : &#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> node = &#123;</span><br><span class="line">  <span class="attr">loc</span>: &#123;</span><br><span class="line">    <span class="attr">start</span>: &#123;</span><br><span class="line">      <span class="attr">line</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">column</span>: <span class="number">5</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> &#123;</span><br><span class="line">  loc,</span><br><span class="line">  <span class="attr">loc</span>: &#123; start &#125;,</span><br><span class="line">  <span class="attr">loc</span>: &#123;</span><br><span class="line">    <span class="attr">start</span>: &#123; line &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125; = node</span><br><span class="line">line <span class="comment">//1</span></span><br><span class="line">loc <span class="comment">//Object &#123;start : Object&#125;</span></span><br><span class="line">start <span class="comment">//Object &#123;line : 1, column : 5&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x</span><br><span class="line">;(&#123; x &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;) <span class="comment">//避免 JavaScript 解释为代码块</span></span><br></pre></td></tr></table></figure>

<p><em>如果解构失败，变量的值等于 undefined</em></p>
<h3 id="解构的用途"><a href="#解构的用途" class="headerlink" title="解构的用途"></a>解构的用途</h3><h4 id="交换变量的值"><a href="#交换变量的值" class="headerlink" title="交换变量的值"></a>交换变量的值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>,</span><br><span class="line">  y = <span class="number">2</span></span><br><span class="line">;[x, y] = [y, x]</span><br></pre></td></tr></table></figure>

<h4 id="从函数返回多个值"><a href="#从函数返回多个值" class="headerlink" title="从函数返回多个值"></a>从函数返回多个值</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">example1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = <span class="title function_">example1</span>()</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">example2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">bar</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = <span class="title function_">example2</span>()</span><br></pre></td></tr></table></figure>

<h4 id="函数参数的定义"><a href="#函数参数的定义" class="headerlink" title="函数参数的定义"></a>函数参数的定义</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">[x, y, z]</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">f</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">&#123; x, y, z &#125;</span>) &#123;&#125;</span><br><span class="line"><span class="title function_">f1</span>(&#123; <span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">1</span> &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="提取-JSON-数据"><a href="#提取-JSON-数据" class="headerlink" title="提取 JSON 数据"></a>提取 JSON 数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="number">32</span>,</span><br><span class="line">  <span class="attr">status</span>: <span class="string">&quot;OK&quot;</span>,</span><br><span class="line">  <span class="attr">data</span>: [<span class="number">332</span>, <span class="number">452</span>],</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>ECMAScript</category>
      </categories>
      <tags>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>词法作用域与动态作用域</title>
    <url>/2020/07/28/%E8%AF%8D%E6%B3%95%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E5%8A%A8%E6%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
    <content><![CDATA[<h3 id="JavaScript-采用的是词法作用域（lexical-scoping）"><a href="#JavaScript-采用的是词法作用域（lexical-scoping）" class="headerlink" title="JavaScript 采用的是词法作用域（lexical scoping）"></a>JavaScript 采用的是词法作用域（lexical scoping）</h3><p>JavaScript 函数的作用域在函数定义的时候就确定了，所以实际使用的值与函数定义位置有关系。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(value)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> value = <span class="number">2</span></span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>() <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<p>上面这个例子中，<code>foo</code>函数中的<code>value</code>向上寻找为在全局定义的<code>1</code>，所以会打印出<code>1</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">value=1</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">foo</span></span>()&#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="variable">$value</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">bar</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> value=2</span><br><span class="line">    foo</span><br><span class="line">&#125;</span><br><span class="line">bar <span class="comment">#2</span></span><br></pre></td></tr></table></figure>

<p>而在<code>bash</code>中，由于是动态作用域，所以会打印出<code>2</code>。</p>
<span id="more"></span>

<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><p>输出的都会是<code>local</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">foo</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">let</span> text = <span class="string">&quot;local&quot;</span></span><br><span class="line">  <span class="keyword">let</span> <span class="title function_">f</span> = (<span class="params"></span>) =&gt; text</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">f</span>()</span><br><span class="line">  <span class="comment">// return f</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">foo</span>()) <span class="comment">// local</span></span><br><span class="line"><span class="comment">// console.log(foo()()) // local</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>ECMAScript</tag>
      </tags>
  </entry>
  <entry>
    <title>自用vscode插件</title>
    <url>/2019/03/27/%E8%87%AA%E7%94%A8vscode%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<ul>
<li>background: 背景的可爱萌妹子, 当然可以自定义背景</li>
<li>beautify: 代码格式化</li>
<li>Dracula Official: 颜色主题</li>
<li>Haskell Syntax Highlighting: Haskell 语法高亮</li>
<li>HTML Snippets: HTML 自动补全</li>
<li>HTML CSS Support</li>
<li>JavaScript (ES6) code snippets: JS 自动补全</li>
<li>Markdown PDF: 神器, 但是默认会装一个 Chromium</li>
<li>npm Intellisense: 自动导入模块</li>
<li>Path Intellisense: 自动补全文件名</li>
<li>Quokka.js: 方便 debug</li>
<li>Vetur</li>
<li>vscode-icons: vscode 文件图标</li>
<li>Vue 2 Snippets</li>
<li>yddict(npm): 查词, 非常方便, 安装:<code>sudo npm i yddict -g</code>, 用法: <code>yd hello</code></li>
<li>http-server(npm)</li>
</ul>
]]></content>
      <tags>
        <tag>Config</tag>
      </tags>
  </entry>
  <entry>
    <title>跨浏览器处理处理XML</title>
    <url>/2018/11/01/%E8%B7%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%84%E7%90%86%E5%A4%84%E7%90%86XML/</url>
    <content><![CDATA[<h3 id="一个简单的处理-XML-的函数"><a href="#一个简单的处理-XML-的函数" class="headerlink" title="一个简单的处理 XML 的函数"></a>一个简单的处理 XML 的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">parseXml</span>(<span class="params">xml</span>) &#123;</span><br><span class="line">  <span class="comment">//跨浏览器处理 XML</span></span><br><span class="line">  <span class="keyword">var</span> xmldom = <span class="literal">null</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">DOMParser</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    xmldom = <span class="keyword">new</span> <span class="title class_">DOMParser</span>().<span class="title function_">parseFromString</span>(xml, <span class="string">&quot;text/xml&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> errors = xmldom.<span class="title function_">getElementsByTagName</span>(<span class="string">&quot;parsererror&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (errors.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;XML parsing error:&quot;</span> + errors[<span class="number">0</span>].<span class="property">textContent</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">ActiveXObject</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    xmldom = <span class="title function_">createDocument</span>()</span><br><span class="line">    xmldom.<span class="title function_">loadXML</span>(xml)</span><br><span class="line">    <span class="keyword">if</span> (xmldom.<span class="property">parseError</span> != <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;XML parsing error:&quot;</span> + xmldom.<span class="property">parseError</span>.<span class="property">reason</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;No XML parser available.&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> xmldom</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="序列化-XML-文档"><a href="#序列化-XML-文档" class="headerlink" title="序列化 XML 文档"></a>序列化 XML 文档</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//序列化 xmldom 文档</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">serializeXML</span>(<span class="params">xmldom</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="title class_">XMLSerializer</span> != <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="comment">//兼容 ie9+ safari Chrome opera</span></span><br><span class="line">    <span class="keyword">var</span> serializer = <span class="keyword">new</span> <span class="title class_">XMLSerializer</span>()</span><br><span class="line">    <span class="keyword">return</span> serializer.<span class="title function_">serializeToString</span>(xmldom)</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> xmldom.<span class="property">xml</span> != <span class="literal">undefined</span>) &#123;</span><br><span class="line">    <span class="comment">//兼容 ie9.0 以下</span></span><br><span class="line">    <span class="keyword">return</span> xmldom.<span class="property">xml</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;serialize XML Dom failed!&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
        <tag>XML</tag>
      </tags>
  </entry>
  <entry>
    <title>阿米巴经营记录</title>
    <url>/2021/12/08/%E9%98%BF%E7%B1%B3%E5%B7%B4%E7%BB%8F%E8%90%A5%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="日航哲学-–-成功方程式"><a href="#日航哲学-–-成功方程式" class="headerlink" title="日航哲学 – 成功方程式"></a>日航哲学 – 成功方程式</h3><blockquote>
<p>人生 · 工作的结果 &#x3D; 思维方式 _ 努力 _ 能力</p>
</blockquote>
<blockquote>
<p>作为人，何谓正确</p>
</blockquote>
<p>领导人率先垂范，以身作则。</p>
<h3 id="阿米巴系统"><a href="#阿米巴系统" class="headerlink" title="阿米巴系统"></a>阿米巴系统</h3><p>京瓷的经营理念： <em>在追求全体员工物质和精神两方面幸福的同时，为人类社会的进步发展做出贡献。</em></p>
<blockquote>
<p>阿米巴经营是通过一个个小集体的独立核算来实现全员参与经营、凝聚全体员工力量和智慧的经营管理系统。</p>
</blockquote>
<p>但是在 <em>乌合之众</em> 中说到，群体聚集在一起的智商，只会降低。所以是否可以利用群体的力量，独立的领导人（智慧&amp;方向），达到目的。</p>
<h3 id="阿米巴经营的目的"><a href="#阿米巴经营的目的" class="headerlink" title="阿米巴经营的目的"></a>阿米巴经营的目的</h3><ol>
<li>确立与市场挂钩的分部门核算制度</li>
<li>培养具有经营意识的人才</li>
<li>实现全员参与的经营</li>
</ol>
<h3 id="创业初期部门结构"><a href="#创业初期部门结构" class="headerlink" title="创业初期部门结构"></a>创业初期部门结构</h3><p><img src="/svgs/amoeba/1.svg" alt="创业初期部门结构"></p>
<p><strong>核心技术在研发</strong></p>
<h3 id="传统公司经营模式"><a href="#传统公司经营模式" class="headerlink" title="传统公司经营模式"></a>传统公司经营模式</h3><p><img src="/svgs/amoeba/2.svg" alt="传统公司经营模式"></p>
<p>如果市场价格波动，销售的售价必然下降。此时，如果减少销量，会增加库存。增加销量，成本增高，总利润下降。</p>
<p>此时拆分成阿米巴之后，生产和销售之间必然会产生分歧。此时直接损害生产部的利益，所以传统经营模式在阿米巴经营中并不适用。</p>
<h3 id="细分阿米巴的三个条件"><a href="#细分阿米巴的三个条件" class="headerlink" title="细分阿米巴的三个条件"></a>细分阿米巴的三个条件</h3><ol>
<li>能够独立核算的单位</li>
<li>独立完成某个业务的单位</li>
<li>划分组织必须有利于实现公司的方针和目标</li>
</ol>
]]></content>
      <tags>
        <tag>Reading Notes</tag>
      </tags>
  </entry>
  <entry>
    <title>顶层对象</title>
    <url>/2018/08/10/%E9%A1%B6%E5%B1%82%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h3 id="ES6-中，为了保持兼容性，var-和-function-声明的全局变量依旧是顶层对象的属性"><a href="#ES6-中，为了保持兼容性，var-和-function-声明的全局变量依旧是顶层对象的属性" class="headerlink" title="ES6 中，为了保持兼容性，var 和 function 声明的全局变量依旧是顶层对象的属性"></a>ES6 中，为了保持兼容性，var 和 function 声明的全局变量依旧是顶层对象的属性</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span> <span class="comment">//如果在 Node 的 REPL 环境，可以写成 global.a 或者 this.a</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">a</span> <span class="comment">//1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">b</span> <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="global-对象"><a href="#global-对象" class="headerlink" title="global 对象"></a>global 对象</h3><ul>
<li>在浏览器对象中，顶层对象是 window，但 Node 和 Web Worker 没有 window。</li>
<li>在浏览器和 Web Worker 中，self 也指向顶层对象，但 Node 没有 self。</li>
<li>在 Node 中，顶层对象是 global，但其他环境都不支持。</li>
</ul>
<p>以下为两种勉强可以取到顶层对象的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&quot;undefined&quot;</span></span><br><span class="line">  ? <span class="variable language_">window</span></span><br><span class="line">  : <span class="keyword">typeof</span> process === <span class="string">&quot;object&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">&quot;function&quot;</span> &amp;&amp;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="variable language_">global</span> === <span class="string">&quot;object&quot;</span></span><br><span class="line">  ? <span class="variable language_">global</span></span><br><span class="line">  : <span class="variable language_">this</span></span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line"><span class="keyword">var</span> getGlobal = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> self !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> self</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">window</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="variable language_">global</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">global</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;unalbe to locate global object&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>首张黑洞照片</title>
    <url>/2019/04/10/%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%87/</url>
    <content><![CDATA[<h3 id="见证历史"><a href="#见证历史" class="headerlink" title="见证历史"></a>见证历史</h3><p><img src="/images/%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%871.png" alt="黑洞图片"><br><strong>爱因斯坦是正确的!</strong><br><img src="/images/%E9%A6%96%E5%BC%A0%E9%BB%91%E6%B4%9E%E7%85%A7%E7%89%872.jpg" alt="爱因斯坦"></p>
]]></content>
      <tags>
        <tag>history</tag>
      </tags>
  </entry>
  <entry>
    <title>防抖与节流</title>
    <url>/2020/07/30/%E9%98%B2%E6%8A%96%E4%B8%8E%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>浏览器中有的事件触发非常频繁，如果在事件触发的时候就调用，这时就会不断地产生新的调用，导致变‘卡’。<br>防抖就是在某段时间间隔内，不调用函数，直到一段时间后不在再新的事件触发，再调用函数；或者是先调用函数，在一段时间间隔内继续触发不再重复调用函数。</p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> times = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do some thing</span></span><br><span class="line">  container.<span class="property">innerHTML</span> = <span class="string">`run <span class="subst">$&#123;++times&#125;</span> time(s).`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">function(): *</span>&#125; <span class="variable">func</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">wait</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">boolean</span>&#125; <span class="variable">immediate</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> &#123;<span class="type">function(): *</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer <span class="comment">// start a new timer every time it is triggered</span></span><br><span class="line">  <span class="keyword">let</span> result <span class="comment">// get the return from func | undefined(only if the immediate is true will return a value)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> debounced = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> context = <span class="variable language_">this</span> <span class="comment">// current context</span></span><br><span class="line">    <span class="keyword">let</span> args = <span class="variable language_">arguments</span> <span class="comment">// events</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (immediate) &#123;</span><br><span class="line">      <span class="comment">// check whether it is called immediately</span></span><br><span class="line">      <span class="keyword">let</span> callNow = !timer <span class="comment">// callNow is always false unless the timer is null</span></span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        timer = <span class="literal">null</span> <span class="comment">// set the timer null after wait time</span></span><br><span class="line">      &#125;, wait)</span><br><span class="line">      <span class="keyword">if</span> (callNow) &#123;</span><br><span class="line">        <span class="comment">// means timer is null now, then call func</span></span><br><span class="line">        result = func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 1. bind the `this` to `&lt;div id=&quot;container&quot;&gt;&lt;/div&gt;`</span></span><br><span class="line">        <span class="comment">// 2. get the `event`</span></span><br><span class="line">        func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  debounced.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// to cancel the debounce</span></span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    timer = <span class="literal">null</span> <span class="comment">// reset to null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> debounced</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userAction = <span class="title function_">debounce</span>(getUserAction, <span class="number">5000</span>, <span class="literal">true</span>) <span class="comment">// get the function `debounced`</span></span><br><span class="line"></span><br><span class="line">container.<span class="property">onmousemove</span> = userAction</span><br><span class="line">button.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  userAction.<span class="title function_">cancel</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>如果持续触发事件，那么每固定时间内只触发一次事件。实现方式可以使用时间戳，或者定时器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> times = <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> container = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#container&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#cancel&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserAction</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// do some thing</span></span><br><span class="line">  container.<span class="property">innerHTML</span> = <span class="string">`run <span class="subst">$&#123;++times&#125;</span> time(s).`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params"></span></span><br><span class="line"><span class="params">  func,</span></span><br><span class="line"><span class="params">  wait,</span></span><br><span class="line"><span class="params">  options = &#123;</span></span><br><span class="line"><span class="params">    leading: <span class="literal">true</span>, // run immediately</span></span><br><span class="line"><span class="params">    trailing: <span class="literal">true</span>, // run after wait time</span></span><br><span class="line"><span class="params">  &#125;</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer</span><br><span class="line">  <span class="keyword">let</span> context</span><br><span class="line">  <span class="keyword">let</span> args</span><br><span class="line">  <span class="keyword">let</span> previous = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> later = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    previous = !options.<span class="property">leading</span> ? <span class="number">0</span> : <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">    func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">    context = args = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> throttled = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">    <span class="keyword">if</span> (!previous &amp;&amp; !options.<span class="property">leading</span>) previous = now</span><br><span class="line">    <span class="keyword">let</span> remaining = wait - (now - previous)</span><br><span class="line">    context = <span class="variable language_">this</span></span><br><span class="line">    args = <span class="variable language_">arguments</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</span><br><span class="line">      <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="literal">null</span></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      previous = now</span><br><span class="line">      func.<span class="title function_">apply</span>(context, args)</span><br><span class="line">      <span class="keyword">if</span> (!timer) context = args = <span class="literal">null</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timer &amp;&amp; options.<span class="property">trailing</span>) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(later, remaining)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  throttled.<span class="property">cancel</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">    previous = <span class="number">0</span></span><br><span class="line">    timer = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> throttled</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> userAction = <span class="title function_">throttle</span>(getUserAction, <span class="number">5000</span>, &#123;</span><br><span class="line">  <span class="attr">leading</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">trailing</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// let userAction = throttle(getUserAction, 5000, &#123;leading: false, trailing: true&#125;)</span></span><br><span class="line"></span><br><span class="line">container.<span class="property">onmousemove</span> = userAction</span><br><span class="line">button.<span class="property">onclick</span> = userAction.<span class="property">cancel</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>通用中心路由基座式微前端实现</title>
    <url>/2021/09/13/%E9%80%9A%E7%94%A8%E4%B8%AD%E5%BF%83%E8%B7%AF%E7%94%B1%E5%9F%BA%E5%BA%A7%E5%BC%8F%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<h1 id="什么是微前端"><a href="#什么是微前端" class="headerlink" title="什么是微前端"></a>什么是微前端</h1><p>微前端架构具备以下几个核心价值</p>
<ul>
<li>技术栈无关：主框架不限制接入应用的技术栈，子应用具备完全自主权</li>
<li>独立开发、独立部署：子应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</li>
<li>独立运行时：每个子应用之间状态隔离，运行时状态不共享</li>
</ul>
<h1 id="现有解决方案"><a href="#现有解决方案" class="headerlink" title="现有解决方案"></a>现有解决方案</h1><ul>
<li>路由分发（nginx）</li>
<li>npm 子包：基座负责打包构建发布，打包时集成；</li>
<li>iframe：应用之间完全独立；需要基座提供通信方案；</li>
<li>通用中心路由基座式：完全独立；需要基座提供通信方案；使用 DOM 实现；（阿里乾坤）</li>
<li>特定中心路由基座式：相同技术栈；复用基座公共基建内容；（美团广告业务）</li>
</ul>
<span id="more"></span>

<h3 id="方案对比"><a href="#方案对比" class="headerlink" title="方案对比"></a>方案对比</h3><table>
<thead>
<tr>
<th align="center">方案</th>
<th align="center">技术栈是否能统一</th>
<th align="center">单独打包</th>
<th align="center">单独部署</th>
<th align="center">打包部署速度</th>
<th align="center">单页应用体验</th>
<th align="center">子工程切换速度</th>
<th align="center">工程间通信难度</th>
<th align="center">现有工程侵入性</th>
<th align="center">学习成本</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><strong>NPM 式</strong></td>
<td align="center">是（不强制）</td>
<td align="center">否</td>
<td align="center">否</td>
<td align="center">慢</td>
<td align="center">是</td>
<td align="center">快</td>
<td align="center">正常</td>
<td align="center">高</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center"><strong>iframe 式</strong></td>
<td align="center">是（不强制）</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">正常</td>
<td align="center">否</td>
<td align="center">慢</td>
<td align="center">高</td>
<td align="center">高</td>
<td align="center">低</td>
</tr>
<tr>
<td align="center"><strong>通用中心路由基座式</strong></td>
<td align="center">是（不强制）</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">正常</td>
<td align="center">是</td>
<td align="center">慢</td>
<td align="center">高</td>
<td align="center">高</td>
<td align="center">高</td>
</tr>
<tr>
<td align="center"><strong>特定中心路由基座式</strong></td>
<td align="center">是（强制）</td>
<td align="center">是</td>
<td align="center">是</td>
<td align="center">快</td>
<td align="center">是</td>
<td align="center">快</td>
<td align="center">正常</td>
<td align="center">低</td>
<td align="center">低</td>
</tr>
</tbody></table>
<h1 id="通用中心路由基座式实现"><a href="#通用中心路由基座式实现" class="headerlink" title="通用中心路由基座式实现"></a>通用中心路由基座式实现</h1><h3 id="应用架构"><a href="#应用架构" class="headerlink" title="应用架构"></a>应用架构</h3><pre><code class="highlight mermaid">graph TB
App[App]
App --&gt; App1[App1]
App --&gt; App2[App2]
App --&gt; App3[App3]
App --&gt; App4[...]</code></pre>

<h3 id="实现方案"><a href="#实现方案" class="headerlink" title="实现方案"></a>实现方案</h3><pre><code class="highlight mermaid">graph LR
Start(Start)
Start --&gt; Route(/subapp/xxx/index)
Route --&gt; Match(根路由匹配到 /subapp)
Match --&gt; DoubleMatch&#123;二级路由xxx匹配到子路由注册信息&#125;
DoubleMatch --&gt; | 匹配失败 | MatchError(失败处理) --&gt; End(End)
DoubleMatch --&gt; | 匹配成功 | IsLoaded&#123;检查是否已经加载&#125;
IsLoaded --&gt; | 是 | Loaded(直接获取模块) --&gt; End
IsLoaded --&gt; | 否 | LoadJs&#123;异步获取JS&#125;
LoadJs --&gt; | 失败 | MatchJsError(失败处理) --&gt; End
LoadJs --&gt; | 成功 | MatchSuccess(获取子工程模块) --&gt; LoadPage(显示子工程页面) --&gt; End</code></pre>

<h2 id="核心流程"><a href="#核心流程" class="headerlink" title="核心流程"></a>核心流程</h2><h3 id="1、注册子应用"><a href="#1、注册子应用" class="headerlink" title="1、注册子应用"></a>1、注册子应用</h3><pre><code class="highlight mermaid">graph LR
Start(Start) --&gt; GetList[拿到子应用列表] --&gt; Init[将子应用初始状态设置为 NOT_LOADED] --&gt; GlobalHook(设置全局生命周期) --&gt; End(End)</code></pre>

<h3 id="2、运行"><a href="#2、运行" class="headerlink" title="2、运行"></a>2、运行</h3><pre><code class="highlight mermaid">graph LR
Start(Start) --&gt; Hijack[Hijack Route] --&gt; Reroute[ReRoute] --&gt; LoadOther(对其他子应用进行资源预加载) --&gt; End(End)</code></pre>

<h3 id="3、页面路由切换"><a href="#3、页面路由切换" class="headerlink" title="3、页面路由切换"></a>3、页面路由切换</h3><pre><code class="highlight mermaid">graph LR
Start(Start) --&gt; ReRoute --&gt; End(end)</code></pre>

<h2 id="核心代码逻辑"><a href="#核心代码逻辑" class="headerlink" title="核心代码逻辑"></a>核心代码逻辑</h2><h3 id="1、Hijack-Route"><a href="#1、Hijack-Route" class="headerlink" title="1、Hijack Route"></a>1、Hijack Route</h3><ol>
<li>设置全局变量 <code>HistoryEvent</code></li>
<li>重写 <code>pushState</code> 方法，每次调用之后生成一个 <code>PopStateEvent</code>，赋值给 <code>HistoryEvent</code></li>
<li>重写 <code>replaceState</code> 方法，每次调用之后生成一个 <code>PopStateEvent</code> ，赋值给 <code>HistoryEvent</code></li>
<li>监听 <code>hashChange</code> ，调用 <code>reroute</code></li>
<li>监听 <code>popstate</code>，调用<code>reroute</code></li>
<li>对<code>addEventListener</code>和<code>removeEventListener</code>注入，对<code>hashChange</code>和<code>popstate</code>进行拦截</li>
</ol>
<h3 id="2、ReRoute"><a href="#2、ReRoute" class="headerlink" title="2、ReRoute"></a>2、ReRoute</h3><ul>
<li>actives：所有处于 <code>active</code> 状态的子应用列表</li>
<li>unmounted：所有处于 <code>unmount</code> 状态的子应用列表</li>
</ul>
<pre><code class="highlight mermaid">graph LR
Start(Start) --&gt; IfUrl&#123;url !== lastUrl&#125;
IfUrl --&gt; | false | End(End)
IfUrl --&gt; | true | AppList[拿到app的状态列表]
AppList --&gt; | unmount | UnMount --&gt; Finish[Finish]
AppList --&gt; | active | BeforeLoad --&gt; Assets --&gt; Mounted --&gt; Finish
Finish --&gt; OpenListener[启动监听] --&gt; End</code></pre>

<h2 id="生命周期函数"><a href="#生命周期函数" class="headerlink" title="生命周期函数"></a>生命周期函数</h2><h3 id="1、beforeLoad"><a href="#1、beforeLoad" class="headerlink" title="1、beforeLoad"></a>1、beforeLoad</h3><pre><code class="highlight mermaid">graph LR
Start --&gt; Loading[set app state to LOADING] --&gt; GlobalHook --&gt; LoadHTML --&gt; Loaded[set app state to LOADED] --&gt; End</code></pre>

<p><strong>LoadHTML：</strong></p>
<pre><code class="highlight mermaid">graph LR
Start --&gt; Init[get container ant entry] --&gt; Dom[get dom node] --&gt; parseHTML --&gt; CSS[get external css] --&gt; JS[get external js] --&gt; RunCode --&gt; Return[return application]</code></pre>

<h3 id="2、Assets"><a href="#2、Assets" class="headerlink" title="2、Assets"></a>2、Assets</h3><pre><code class="highlight mermaid">graph LR
Start --&gt; IsLoaded&#123;&quot;status === LOADED&quot;&#125;
IsLoaded --&gt; | false | End
IsLoaded --&gt; | true | Assets[set app state to ASSETS_LOADING] --&gt; RunApp[run app.assets] --&gt; NotMounted[set app state to NOT_MOUNTED] --&gt; End</code></pre>

<h3 id="3、Mounted"><a href="#3、Mounted" class="headerlink" title="3、Mounted"></a>3、Mounted</h3><pre><code class="highlight mermaid">graph LR
Start --&gt; Mounting[set app state to MOUNTING] --&gt; RunApp[run app.mounted] --&gt; GloalHook --&gt; Mounted[set app state to MOUNTED] --&gt; End</code></pre>

<h3 id="4、UnMounted"><a href="#4、UnMounted" class="headerlink" title="4、UnMounted"></a>4、UnMounted</h3><pre><code class="highlight mermaid">graph LR
Start --&gt; UnMounting[set app state to UNMOUNTING] --&gt; RunApp[run app.unmount] --&gt; GlobalHook --&gt; NotMounted[set app state to NOT_MOUNTED] --&gt; End</code></pre>
]]></content>
      <categories>
        <category>Engineering</category>
      </categories>
      <tags>
        <tag>Interview</tag>
        <tag>Micro Frontend</tag>
      </tags>
  </entry>
  <entry>
    <title>随便聊聊</title>
    <url>/2019/04/15/%E9%9A%8F%E4%BE%BF%E8%81%8A%E8%81%8A/</url>
    <content><![CDATA[<h3 id="一篇文章"><a href="#一篇文章" class="headerlink" title="一篇文章"></a>一篇文章</h3><p>昨天晚上看了某乎的一篇文章，叫<a href="https://zhuanlan.zhihu.com/p/62388759?utm_source=qq&utm_medium=social&utm_oi=709716343179448320">《比 996 更该死的那些人》</a>，里面的开头：</p>
<blockquote>
<p>这几年真的觉得这个世界真的已经变得不可救药了<br>勤劳和奋斗不仅不再被传颂和赞扬，竟然成了被鄙视，被视作愚蠢的品质。<br>而享乐，投机取巧成这些在过去难以启齿的行为，成了光明正大，人人争相炫耀的东西。</p>
</blockquote>
<p>虽然这篇文章我开了开头就没看了，但是还是让我感触颇深，我不赞同第二句，但是第三句我是非常赞同的。在以前我是不会羡慕别人的，不知道从什么时候开始，我会越来越羡慕那些比我强、过的比我好、智商比我高的人。是欲望变了吗？我觉得是的。那个无欲无求的日子，我是不想去回忆的，因为对我来说，和坐牢一样。</p>
<p>从不会去鄙视那些勤劳和奋斗的人，因为他们不知道什么时候就已经追上你并且超过你了，学如逆水行舟，不进则退，但是我实在无法理解的是，投机取巧，为什么在某些人眼里成了政治正确。炫耀享乐，这个我还是可以理解的，毕竟大部分的人还是喜欢被别夸，被别人羡慕嫉妒，当然也有真正是为了分享快乐。</p>
<p>投机取巧的话，不知道是否是因为圈子不同，我觉得我周围认为投机取巧的人是正确的人还不少，甚至于在学校加大监管的情况下，组队进行“帮助”，并且在成绩还可以的时候，去蛊惑那些认真考试但成绩不佳的同学，试图拉他们下水。实在是不能理解那些人心里的想法，是为了让别人顺从自己从而获得心里的快感吗？我不太懂。似乎各大高校都有这种人的存在，这到底是为什么呢？</p>
<span id="more"></span>

<h3 id="一张图片"><a href="#一张图片" class="headerlink" title="一张图片"></a>一张图片</h3><p><img src="/images/IMG_20190411_073910-min.jpg" alt="听阴天说什么"><br>已经很久没有这样让人舒适的天气了，温度刚好，湿度刚好，风力刚好，阴天，简直完美。上一次让我有这种感觉的时候，还是在高一，也许是高二，青涩懵懂的高中时代，已经过去三年了。高中阶段，可以说是我目前最快乐的阶段，没有学习压力，没有生活压力，一个人住，晚上想出来溜达就出来溜达。</p>
<h3 id="一件事情"><a href="#一件事情" class="headerlink" title="一件事情"></a>一件事情</h3><p>同样是某乎上的一件事，<a href="https://www.zhihu.com/question/319998260/answer/651009502">《如何看待杭州一女子月薪 4K，买两万元名牌包被丈夫指责这一事件？》</a>：</p>
<blockquote>
<p>林海觉得，妻子和其他的女人不一样，不会想要买这个买那个，不贪慕虚荣。</p>
<p>然而，就在前几天，妻子收到一个包裹，打开以后，是一个包装精美的奢侈品包包。据妻子解释，是她找人代购的，花了四个月工资。<br>“一瞬间感觉我已经不认识眼前的这个女人了。四个月的工资就买个包吗？那她跟其他那些爱慕虚荣的女人有什么区别呢？我现在事业刚刚有点起步，我们家的收入状况比起刚结婚时，是好了一些。但离“土豪”的程度还很远啊！”</p>
<p>据林海介绍，夫妻两人都是工薪阶层。妻子每个月工资拿到手五千不到，而自己的收入全看绩效，每个月并不稳定。这让他很无奈：“房贷大部分是我还的，都不知道要还多少年。这下好了，小半年，都要靠我一个人了。”两人现在还没有孩子，但对孩子的态度，他也有了改观：“没孩子也好，有了孩子，又是一笔支出。养孩子要买奶粉钱，还要买包，那能花得过来吗？”</p>
<p>妻子回复：心寒。他根本没有看到我这几年为家里的付出。我想不明白，我用我自己的积蓄，用我自己的钱，给自己买了人生当中第一个奢侈品，有问题吗？我三十多岁了，跟他谈恋爱到结婚已经八年了。没伸手问他要过一分钱，他也从来没有送过我一个超过 700 元的礼物。那天我闺蜜要跟他老公去法国旅行，问我有什么想要带的吗？我也是狠狠心，让她帮我带了这个包包回来。这个包我在网上已经反反复复看了大半年了，我都没有勇气跟老公提出来说，老公能不能把这个包送给我？我自己刷卡买的！</p>
</blockquote>
<p>这件事下的回答，很有趣，我也看了很多。有的人，是从家庭的观点出发的；有的人，是从女人的角度出发的；还有的人，是从男人的角度出发的。</p>
<p>对于一个家庭来说，我觉得很少有哪个家庭，会为了买一个不必要的东西而花费一个人四个月的积蓄。可能是自身家庭的原因，我觉得一个家庭，积蓄的多少决定了可以承担的风险有多大，因为你不知道明天和意外哪个先来，如果出了意外的话，家里的积蓄可以让你不那么艰难。所以，对于一个家庭来说，我觉得花费一个人四个月的积蓄，去买一个包，这是非常不正确的，奢侈品不是人人都需要的，也不是必要的，也许是虚荣心，一时眼红买了一个包，这是冲动，但人和动物的区别，就是可以克制自己。也像有的评论说的那样，你穿的很差，背着一个很好的包，谁都觉得背的是 A 货，但是如果你穿的很好，背着一个 A 货，大家肯定都认为你背的是正品，这样看来，买这个包也没什么必要了。而且，婚后的收入是共有的，你的开销，实际上有你伴侣的一半，所以较大的开销我觉得可以双方商量一下，再考虑是买还是不买。还有的评论说，在买的情况为 0%的时候，为什么要商量？这就好比不管你同不同意我都要买，这不是耍无赖吗？不考虑别的感受，私自做决定，我觉得会对双方关系造成很大的影响。</p>
<p>对于一个男人来说，自己辛苦挣钱还房贷，常年吃不到一顿好的，在这种情况下，自己的老婆花将近半年的钱去买一个包，你心里会怎么想？如果照着女方的观念，我花的是我自己的钱，凭什么管，那男方完全也可以进行一下这种操作，贷款两人平分，其他开支各付个的，但是这样的话，就会有某些人跳出来说：那老娘还结婚干什么。我觉得有个评论说的很对，<a href="https://www.zhihu.com/question/319998260/answer/651009502">妻子的不幸，不是丈夫造成的</a>：</p>
<blockquote>
<p>妻子的不幸，不是丈夫造成的。<br>妻子的不幸是商家，媒体，给妻子提供了看上去精美，却实质有毒的思想和生活。<br>丈夫的不幸是商家，媒体，用有毒的思想改造了他妻子，让他失去了最后的依靠。<br>大众只要接受了商家的教育，媒体的洗脑，ta 们这辈子注定活得悲惨，没有价值。<br>当无产阶级省吃俭用，存钱半年，甚至一年，买入人生第一件奢侈品。这恰恰不是她们获得幸福和希望的起点，而是走向悲惨和痛苦的开端。<br>在资产阶级的残酷压迫下，无产阶级的相互扶持，从来就不是鸟语花香，风轻云淡。在家庭竭力抵御社会压迫时，任何一方的软弱和逃离，都只会让脆弱敏感的联盟走向瓦解。</p>
</blockquote>
<p>我不知道多少人，每天在微博和抖音上混着，我也不知道他们到底是经济基础太好，整天不上班，还是太懒，整天不想上班。微博和抖音，可以说我特别讨厌这两个东西，一个是给人洗脑，一个是消费碎片时间。简单来说，有人问为什么现在的男生&#x2F;女生质量那么差？也许是因为他们的标准太高了，整天在微博上看别人的男朋友女朋友，然后当做自己的择偶目标，也不是说不行，但是你得先看看自己有没有这个实力去匹配这类目标。都说门当户对是旧社会，但是，门当户对确实还挺重要的，经济基础好的人和经济基础差的人，消费观是不一样的。你让一个月平均消费 1k 的人，去消费一个 20k 的东西，而且还是一个不必要的东西，我觉得他是绝对不会去消费的，但是你让一个月均消费 10k 的人，20k 对他来说就是两个月而已。</p>
<p>所以，现实中找不到对的人，就期待去网上寻找自己的真爱，就会出现“见光死”，被骗财骗色等等情况，然后又去微博上，继续看着他们心目中的男神&#x2F;女神。看得越多，商家媒体就越高兴，这都是流量啊，然后找男神&#x2F;女神代言个什么产品，就会有很多人去买，流量转化为利益，男神&#x2F;女神也开心，然后购买了产品的人也觉得自己和男神&#x2F;女神用同款，所以自己也开心，皆大欢喜，质量和性价比什么的，滚一边去。这就直接导致了为什么现在这么多自媒体，为什么这么多人想红，我觉得原因都在这。</p>
<p>再就是抖音，简直是谋杀。你的时间不知不觉中就会被它吃掉，而且你丝毫不会察觉，短视频，刷了一时爽，一直刷一直爽。年轻人，不应该使用这两个东西，当然也不应该使用某乎，以前某乎上确实有许多干货，但最近看来，还是不用去碰了，到处都是无营养的帖子，评论玩段子，偷换概念。年轻人嘛，就应该多学习，多看看新闻，了解下还有许多水深火热的底层人民等着你们去拯救，而不是和某乎一样，人人 985 月薪 30k。</p>
<p>对于一个女人来说，丈夫这么多年来没有送过自己一个礼物，我也会觉得这个丈夫心里没有我。自己从一穷二白的时候就决定要跟他，到现在都不能用自己的积蓄去买自己喜欢的东西，看着别人和自己的爱人到处旅游，也是很羡慕嫉妒的。所以，自己偷偷攒了半年，给自己买了一个心爱的礼物，我觉得没有任何不妥。女人化妆大部分时候不是为了给男人看的，而是为了给其他女人看，不能让自己被其他女人比下去，这样想的话，一个好的包似乎也成为有必要的了。</p>
<p>对于这件事，我觉得双方都有错，但都在情理之中。作为丈夫，妻子这么多年的陪伴连件小礼物都没有，换做是我我也会内疚，所以我们应时不时的给点小惊喜（但是前提是得有自己的小金库），有空的时候多交流，多想想对方需要什么，自己能否做到，尽自己可能的去做，这才是个称职的丈夫。作为妻子，不应该把家庭和丈夫绑在一起，可以看出妻子每个月 4k 还可以攒出小金库，说明这个家的房贷大部分是靠丈夫来支撑的，所以或许她的观念是，丈夫的钱他自己用了，所以我的钱我自己用没什么不妥，但是家庭是需要每个人付出的，如果你的钱大部分拿来还房贷，他花一两万去买个表，相信也会心里憋屈。夫妻双方应多沟通，特别是这种算是比较大的事情，一定要双方达成共识，如果瞒着一方，这就算欺骗。</p>
<h3 id="一些年纪"><a href="#一些年纪" class="headerlink" title="一些年纪"></a>一些年纪</h3><blockquote>
<p>人总是会回忆过去的，但不能待在过去</p>
</blockquote>
<ul>
<li>不知道多少岁： 听奶奶说我从桌子上摔地上了，头着地，有个很大的包。</li>
<li>大概一岁吧，不知道有没有一岁，我只记得父亲用抓了只蜻蜓放在名片盒里让我玩，母亲在喂我吃饭，那时我的脸还挺肥的。</li>
<li>大概是三四岁？记不太清：开始上学前班了，记不得多少这时候的事情，只记得父亲给我买了一个熊的面包，我很喜欢。或许这段记忆也是梦里的。</li>
<li>五岁，一年级：在明珠学校读的，学校进门有个小店，那个老板在玩红警，我现在都记得。也许是那时候对电脑产生了兴趣。开学，父亲带我去教室，因为没有带水杯，所以用矿泉水瓶去给我接热水，当然了，矿泉水瓶怎么可以接开水，一碰就瘪了，所以就没有喝。到了教室，父亲只说了句，坐着啊，我走了。然后我就看着他走了，我还是挺害怕的，但是周围同学都在那坐着，我也就好好坐着了。</li>
<li>六岁，二年级：开始自己走路上学，其实也不远，和父母上班的地方也近，但是每天起的比较早，就自己去上学了。学校有一栋建筑物后面是一片草地，上面有三叶草（只记得形状是三篇叶子），同学说是甜的，我也尝了尝，三叶草不难吃，反而有清香的味道。做过两件事，第一件趴校车车底，第二件和同学打弹珠忘记回家。也不知道当时为啥趴校车车底，如果车子开动了，不敢想会有什么样的结果。哦，还有从后山翻进学校，被蚊子叮的很多包。还碰见了一个从外地来的同学，应该是家境不怎么好吧，学校帮了很多。那时候最喜欢的事就是，站在楼底，然后抬头望着天空，那时候天还很蓝，楼也没有那么多反光的玻璃，看着云就好像楼要压到我身上，或者楼要往那边倒了一样，很奇妙，经常看的忘记时间，看久了脖子痛（当时为什么不躺着呢）。当时似乎班上还有个家境很好的同学，跟着他有辣条吃，于是天天基本就跟在他后面玩。</li>
<li>七岁，三年级：转学了，应该是育英学校，因为父母工作的地方换了。吃不到辣条了，但是会偶尔从家里拿一两块钱，冬天的时候去校门口买油炸火腿肠。校门口还有画糖画的，似乎我还在学校吃食堂吃过一段日子。班上同学我就认识一两个，现在只记得一个姓赵的了。记得那时候中午快迟到了，跑步上课，然后撞到了一个一年级的，导致门牙坏了，拔了四颗牙齿，和吸血鬼一样。学校后门有一种花，上次在广州也见着了，橘黄色的，长条。也是同学跟我说是甜的，我也摘了从后面吮吸，还真是甜的。学了画画，但是实在是没有天分。还记得那时候查发热，每个人进校门都要被红外线温度计测一下，我似乎有点症状，然后就被领到保安亭了，后面趁着没人就跑出来了，天生就不喜欢去医院。</li>
<li>八岁，四年级：转学，去锦华实验了，从那时候起有校车坐了，因为是住在奶奶家。应该也是在食堂吃饭的，依稀记得撞了个高年级的然后被骂了，饭菜一般。那时候有课外活动了，想选计算机来着，可惜人满了，所以一开始选了葫芦丝，后面又去学毛笔了。还在校庆的时候上台表演了一下葫芦丝，现在应该是不会了，只记得那几个唱名是怎么放的。偶尔下大雨的时候校车也会来，然后通知我们回去，不用上课，那时候我就会在家待着干点其他的。后面跑去学毛笔字，也是没学多久就不学了，因为没兴趣，只记得高年级的同学总是叫我们低年级的去洗砚台，我觉得自己的砚台就应该自己洗。比较开心的事是坐校车，因为可以看见外面，尽管没什么风景，但是我每次都是在最后那站，所以后面都是一个人在一辆车里，吹着风。</li>
<li>九岁，五年级：转学，去龙丰学校了，听说原来的班主任还来我家问我为什么没来上课，因为学费涨了负担不起，所以只能转学读一个学费低一点的学校，班主任说我的成绩可以和学校申请减免学费，但是还是没有回去。是一个不太好的学校，这年学会了进网吧，学校后山是一个部队，和同学进去想游泳，结果被撵出来了，还被不知道什么蚂蚁咬了肿了很大一块。我弟弟妹妹也在我这个学校读学前班，所以放学的时候都是我把他们带回来。刚报道的时候，不知道是哪个班级，就随便进了一个，那个老师把我安排在了最后面，周围都是看起来不善的同学，他们下课就打牌，上课吃零食。后面又换了一个班，那个班还不错，同学都比较友善。记得上音乐课，老师放《土耳其进行曲》给我们听，然后说里面有三种片段，要我们听了之后把片段写出来，我写的 ABCBAB，但是其他同学都没有最后的 B 片段，最后老师说班上只有我一个人是正确的，我很开心。那时候还认识了一个好朋友，但那时也没有什么联系方式，所以就断了。</li>
<li>十岁，六年级：转学，回老家了，我小学六年读了五个学校，但是我很少跟人提起过。这五年其实也挨了不少的打，也拿了不少的奖，但都不太值得回忆，就不打算写了。奖状的话，似乎有一两斤重。一开始去那个学校，还要给我做一个测试题，不得不说，老家的教育水平和深圳还是有很大差距的，他们六年级学的东西我四五年级就学完了。但是不知为什么，我还是得去完成小升初的考试，所以就读了六年级。六年级就认识了比较多的同学朋友了，但是唯一让我不爽的是，每天七节课，只有语文数学和英语，偶尔说有体育课，其实就是让我们去拔杂草。忘记哪个周末，和班里的同学约好下课去网吧，结果有个同学没来，跑去告老师了，然后第二天我们就在办公室站了一上午。数学老师很严，其他老师没什么印象，只记得数学老师严，上学第一天就把我的数学书给撕了，因为他上午说带草稿本，而我没带，因为我上午根本就还没来班上，也不听你解释，直接撕，估计是杀鸡儆猴吧。我最讨厌那些不让别人说话，自己判断的人。似乎那年我还学过一点奥数，不太记得了，小房间，幼儿园的那种桌椅，写字十分不舒服。后面听说那个以前玩的好的同学还找我，听说我回老家了，一直在等我什么时候回来。</li>
<li>十一岁，初一：升初中了，开始住老师家了。似乎就是这个阶段我是无欲无求的，每天两点一线，吃饭，睡觉，上课，没有什么其他的事情。老师还不错，化学老师是班上一个同学的爷爷，物理老师是班上一个同学的父亲，语文老师的女儿后面也来我们学校了，后面听说物理老师当了副校长，化学老师不知道退休了没有，老曾，怀念，还有英语老师，那次回去在路上看见了，可惜我在车里，她在路上，还有在路上碰见同学去上课，还能认出我，那都是高中时候的事情了。初一没什么特别的事情，大家都安安分分的上课，同学们也都相互认识，班长是个女生，现在成绩也不错，令我很敬佩的女生，如果现在碰见她，还是会叫一声老班长。</li>
<li>十二岁，初二：分班了，有些成绩差的同学都出去了，就留下了大概五六十个人，和深圳的标准一班四十人不同，老家多的有八九十人，少的才四五十人。教室也换了，在校长办公室楼上，偶尔下楼会碰见校长。和我们一起的就十八班，在隔壁。平平淡淡，上课想听就听一下，不想听就看点杂志，困了就睡一下，还参加了一个歌唱比赛，似乎拿了奖。那年学校有计算机课了，我还记得开机是七喜电脑，还有长虹电脑，我们在那学 flash 动画，那时候觉得很难，然后有个示例动画，好像是熊猫人，很流畅，还有剧情，虽然只有短短的五分钟。似乎是这年，我每天中午不想在住的地方待着，我就选择去学校睡，不记得是不是被老师跟踪过了，可能是，也可能不是。初二物理竞赛还拿了二等奖。</li>
<li>十三岁，初三：又搬到初一那栋楼了，听说校长那个已经是危房，不能住了。老师们那年到临川一中学习，回来之后马上给我们教室的喇叭装了一个开关，这样中午放学如果拖课，就可以把喇叭关了，这样就听不见那嘈杂的音乐了。那年老曾来班上了，我们这是初三才学化学，如果有人上课凳子坏了掉地上了，他还会从办公室拿锤子过来给我们修凳子。生物老师是个很奇特的东西，初一的时候他教我们地理，初二的时候他教我们生物，初三的时候看见他在别的班当体育老师，他脾气很暴躁，但是教的确实很好，如果我们不学习也是会真的生气，但是他从不打人，只打多媒体的桌子，铁皮的，有时候一巴掌可以打凹进去。英语老师很好玩，也跟我们讲她儿子在国外上大学的趣事，一直也想回去看看他们。有天晚上，我睡觉，然后看着窗外，然后突然有个橘黄色的圆环从我眼前飞过，我爬起来却看不见了，我觉得那是外星人的飞船吧。记得那时还得考个物理化学实验，物理实验因为做过很多次了，所以比较快，但是化学的话，由于从没摸过试管烧杯什么的，手滴定的时候一直在抖，旁边老师都看笑了，还好没什么大碍。</li>
<li>十四岁，高一：我似乎是班上唯一一个来临川一中的，但是我不是班上成绩最好的。临川一中教会了我很多东西。高一的时候入学还要个分班考试，也不知道是不是真的会看，因为考试的人比较多，两三千号人，而且考完过几天就分班了，所以我觉得是没有看的。学校还有社团，通过社团和贴吧认识了好大波的朋友，高一的时候还是很愉快的。虽然也是住在别人家，但是管的不是很严，所以晚上可以晚点回去，在外面吃点东西。班主任是黄老师，教数学的，挺搞笑的一个人，后面分班之后跑去教文 A 班了，今年招不到学生的时候还让我帮他招一些学生。政治历史老师没什么印象，因为从来不听课，语文老师倒是印象挺深的，他不怎么讲课，没激情，经常上课的时候跑去他班上管事，因为他觉得他班上太吵了。后面申请换了个语文老师，新老师太有激情了，导致一节课下来很累。夏天，有一天狂风骤雨，然后有爆炸声，似乎是某个烟花厂被雷电给打了，起火爆炸了。</li>
<li>十五岁，高二：文理分班，从六楼去二楼了。这一年，撒贝宁来了，去做了个志愿者；这一年，饶 boss 还是 boss；这一年，朋友们都还没毕业。班主任换成了老吴，我回去看他时还和他聊起同学们，他说：天天关照的同学没有一个回来看我的，反而是你们这些整天被我骂的人回来看我们。这年结束的时候，很多朋友都毕业了，贴吧没了他们也冷清了，就连学校我都觉得少了点熟悉的感觉。但是认识了新的同学，龙兄、谢老板、隔壁老王、隔壁老吴和小焯等。我们这几个算是班上最调皮捣蛋的了，但是这么多年过去了，我们几个似乎混的也还不错，有早早去工作的了，也有准备考研的，一直也没机会聚一聚，只能到某个地方，就去见某个人。龙兄和谢老板在班上还有个外号叫“天龙八部”，因为两个人一起被没收了八部手机。</li>
<li>十六岁，高三：八月中就开始补课了，高三正式开始。校长也退休了，新校长上任三把火，治理了一波不学习的同学，也包括我。可能是对学科没多大的兴趣吧，所以不怎么想学，所以在老师眼里就是那种不学习，整天不知道在干什么的孩子。那年买了第一本的编程书，是关于 PHP 的，但是由于没有电脑实际操作，所以看不了多少。当时班上有一个同学，高一就开始自学信安了，当他在看密码学，XSS，这种书籍时，我才刚开始接触这东西；人家在高中毕业就经济独立了，而我还不知道我的明天在哪。也是从那时开始，我羡慕别人有技术，失去了纯真。当时与父母谈过这个问题，他们还是劝我说读个大学更重要，现在想想，他们是对的，如果我当时不去念大学而是去学技术，万一技术没学好，我连后路都没有了。这一年，有的朋友也回去高考了，他们是贵州的，来我们学校学习，然后回去考贵州卷，记得当时我们全国一卷，分数线是全国最高的。毕业那天，以前的传统是撕书嘛，那天不知道谁偷偷运了个烟花进来，有幸欣赏了一波烟花秀。毕业那天，我们去喝酒，但是最后，也是我们这几个平常不怎么学习的人去陪着老师走了最后的一段路，聊了很多，老师也跟我们说，其实你们不是智商低，你们只是不愿学，以后努力吧，毕竟上了大学，就没有老师可以管你们了。直到现在，我们也会有时间就去一起去看看曾经的老师，曾经的学校，看看曾经的人，曾经的物。</li>
</ul>
<p>FIREWORKS SHOW<br><img src="/images/fireworkShow.jpg" alt="firework1"><br><img src="/images/fireworkShow2.jpg" alt="firework2"></p>
<p>到了大学，学到了自己喜欢的学科，我觉得很荣幸。</p>
<p><strong>终于可以开心的码代码，算是完成了一个梦想吧。</strong></p>
]]></content>
      <tags>
        <tag>Diary</tag>
      </tags>
  </entry>
  <entry>
    <title>~运算符</title>
    <url>/2018/08/12/%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
    <content><![CDATA[<h3 id="运算符"><a href="#运算符" class="headerlink" title="~运算符"></a>~运算符</h3><p>位运算符是三步处理的过程：</p>
<ol>
<li>把运算数转换成 32 位数字</li>
<li>把二进制数转换成它的二进制反码</li>
<li>把二进制数转换成浮点数</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum1 = <span class="number">25</span> <span class="comment">//25 等于 00000000000000000000000000011001</span></span><br><span class="line"><span class="keyword">var</span> iNum2 = ~iNum1 <span class="comment">//转换为 11111111111111111111111111100110</span></span><br><span class="line"><span class="title function_">alert</span>(iNum2) <span class="comment">//输出 &quot;-26&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="技巧"><a href="#技巧" class="headerlink" title="~~技巧"></a>~~技巧</h3><p>这是刷题时看见别人的代码里使用的东西，通常用来代替 Math.trunc()的方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单个 ~</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~<span class="number">1337</span>) <span class="comment">// -1338</span></span><br><span class="line"><span class="comment">//数字输入</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~<span class="number">47.11</span>) <span class="comment">//47</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~<span class="number">1.9999</span>) <span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~<span class="number">3</span>) <span class="comment">//3</span></span><br></pre></td></tr></table></figure>

<p>当原始输入不确定时，~~可以将任何非数字类型转换成 0：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~[]) <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~<span class="title class_">NaN</span>) <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~<span class="literal">null</span>) <span class="comment">//0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// | 0 也是相同的效果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] | <span class="number">0</span>) <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> | <span class="number">0</span>) <span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">null</span> | <span class="number">0</span>) <span class="comment">//0</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p><strong>在使用前应仔细检查值，数值大的情况：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> number = <span class="number">2147483647.123</span> <span class="comment">//比 32 位最大正数，再多一点</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~number) <span class="comment">//2147483647 (ok)</span></span><br><span class="line">number += <span class="number">10000</span> <span class="comment">//2147493647.123 (ok)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(~~number) <span class="comment">//-2147473649</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
